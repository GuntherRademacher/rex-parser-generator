// This file was generated on Wed Sep 22, 2021 20:16 (UTC+02) by REx v5.54 which is Copyright (c) 1979-2021 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q xquery-update-full-text-xqddf-scripting.ebnf -backtrack -ll 2 -java -tree -main

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Arrays;

public class xquery_update_full_text_xqddf_scripting
{
  public static void main(String args[]) throws Exception
  {
    if (args.length == 0)
    {
      System.out.println("Usage: java xquery_update_full_text_xqddf_scripting [-i] INPUT...");
      System.out.println();
      System.out.println("  parse INPUT, which is either a filename or literal text enclosed in curly braces");
      System.out.println();
      System.out.println("  Option:");
      System.out.println("    -i     indented parse tree");
    }
    else
    {
      boolean indent = false;
      for (String arg : args)
      {
        if (arg.equals("-i"))
        {
          indent = true;
          continue;
        }
        Writer w = new OutputStreamWriter(System.out, "UTF-8");
        XmlSerializer s = new XmlSerializer(w, indent);
        String input = read(arg);
        xquery_update_full_text_xqddf_scripting parser = new xquery_update_full_text_xqddf_scripting(input, s);
        try
        {
          parser.parse_XQuery();
        }
        catch (ParseException pe)
        {
          throw new RuntimeException("ParseException while processing " + arg + ":\n" + parser.getErrorMessage(pe));
        }
        finally
        {
          w.close();
        }
      }
    }
  }

  public static class ParseException extends RuntimeException
  {
    private static final long serialVersionUID = 1L;
    private int begin, end, offending, expected, state;

    public ParseException(int b, int e, int s, int o, int x)
    {
      begin = b;
      end = e;
      state = s;
      offending = o;
      expected = x;
    }

    @Override
    public String getMessage()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    }

    public void serialize(EventHandler eventHandler)
    {
    }

    public int getBegin() {return begin;}
    public int getEnd() {return end;}
    public int getState() {return state;}
    public int getOffending() {return offending;}
    public int getExpected() {return expected;}
    public boolean isAmbiguousInput() {return false;}
  }

  public interface EventHandler
  {
    public void reset(CharSequence string);
    public void startNonterminal(String name, int begin);
    public void endNonterminal(String name, int end);
    public void terminal(String name, int begin, int end);
    public void whitespace(int begin, int end);
  }

  public static class TopDownTreeBuilder implements EventHandler
  {
    private CharSequence input = null;
    private Nonterminal[] stack = new Nonterminal[64];
    private int top = -1;

    @Override
    public void reset(CharSequence input)
    {
      this.input = input;
      top = -1;
    }

    @Override
    public void startNonterminal(String name, int begin)
    {
      Nonterminal nonterminal = new Nonterminal(name, begin, begin, new Symbol[0]);
      if (top >= 0) addChild(nonterminal);
      if (++top >= stack.length) stack = Arrays.copyOf(stack, stack.length << 1);
      stack[top] = nonterminal;
    }

    @Override
    public void endNonterminal(String name, int end)
    {
      stack[top].end = end;
      if (top > 0) --top;
    }

    @Override
    public void terminal(String name, int begin, int end)
    {
      addChild(new Terminal(name, begin, end));
    }

    @Override
    public void whitespace(int begin, int end)
    {
    }

    private void addChild(Symbol s)
    {
      Nonterminal current = stack[top];
      current.children = Arrays.copyOf(current.children, current.children.length + 1);
      current.children[current.children.length - 1] = s;
    }

    public void serialize(EventHandler e)
    {
      e.reset(input);
      stack[0].send(e);
    }
  }

  public static abstract class Symbol
  {
    public String name;
    public int begin;
    public int end;

    protected Symbol(String name, int begin, int end)
    {
      this.name = name;
      this.begin = begin;
      this.end = end;
    }

    public abstract void send(EventHandler e);
  }

  public static class Terminal extends Symbol
  {
    public Terminal(String name, int begin, int end)
    {
      super(name, begin, end);
    }

    @Override
    public void send(EventHandler e)
    {
      e.terminal(name, begin, end);
    }
  }

  public static class Nonterminal extends Symbol
  {
    public Symbol[] children;

    public Nonterminal(String name, int begin, int end, Symbol[] children)
    {
      super(name, begin, end);
      this.children = children;
    }

    @Override
    public void send(EventHandler e)
    {
      e.startNonterminal(name, begin);
      int pos = begin;
      for (Symbol c : children)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
      if (pos < end) e.whitespace(pos, end);
      e.endNonterminal(name, end);
    }
  }

  public static class XmlSerializer implements EventHandler
  {
    private CharSequence input;
    private String delayedTag;
    private Writer out;
    private boolean indent;
    private boolean hasChildElement;
    private int depth;

    public XmlSerializer(Writer w, boolean indent)
    {
      input = null;
      delayedTag = null;
      out = w;
      this.indent = indent;
    }

    @Override
    public void reset(CharSequence string)
    {
      writeOutput("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
      input = string;
      delayedTag = null;
      hasChildElement = false;
      depth = 0;
    }

    @Override
    public void startNonterminal(String name, int begin)
    {
      if (delayedTag != null)
      {
        writeOutput("<");
        writeOutput(delayedTag);
        writeOutput(">");
      }
      delayedTag = name;
      if (indent)
      {
        writeOutput("\n");
        for (int i = 0; i < depth; ++i)
        {
          writeOutput("  ");
        }
      }
      hasChildElement = false;
      ++depth;
    }

    @Override
    public void endNonterminal(String name, int end)
    {
      --depth;
      if (delayedTag != null)
      {
        delayedTag = null;
        writeOutput("<");
        writeOutput(name);
        writeOutput("/>");
      }
      else
      {
        if (indent)
        {
          if (hasChildElement)
          {
            writeOutput("\n");
            for (int i = 0; i < depth; ++i)
            {
              writeOutput("  ");
            }
          }
        }
        writeOutput("</");
        writeOutput(name);
        writeOutput(">");
      }
      hasChildElement = true;
    }

    @Override
    public void terminal(String name, int begin, int end)
    {
      if (name.charAt(0) == '\'')
      {
        name = "TOKEN";
      }
      startNonterminal(name, begin);
      characters(begin, end);
      endNonterminal(name, end);
    }

    @Override
    public void whitespace(int begin, int end)
    {
      characters(begin, end);
    }

    private void characters(int begin, int end)
    {
      if (begin < end)
      {
        if (delayedTag != null)
        {
          writeOutput("<");
          writeOutput(delayedTag);
          writeOutput(">");
          delayedTag = null;
        }
        writeOutput(input.subSequence(begin, end)
                         .toString()
                         .replace("&", "&amp;")
                         .replace("<", "&lt;")
                         .replace(">", "&gt;"));
      }
    }

    public void writeOutput(String content)
    {
      try
      {
        out.write(content);
      }
      catch (IOException e)
      {
        throw new RuntimeException(e);
      }
    }
  }

  private static String read(String input) throws Exception
  {
    if (input.startsWith("{") && input.endsWith("}"))
    {
      return input.substring(1, input.length() - 1);
    }
    else
    {
      byte buffer[] = new byte[(int) new java.io.File(input).length()];
      java.io.FileInputStream stream = new java.io.FileInputStream(input);
      stream.read(buffer);
      stream.close();
      String content = new String(buffer, System.getProperty("file.encoding"));
      return content.length() > 0 && content.charAt(0) == '\uFEFF'
           ? content.substring(1)
           : content;
    }
  }

  public xquery_update_full_text_xqddf_scripting(CharSequence string, EventHandler t)
  {
    initialize(string, t);
  }

  public void initialize(CharSequence source, EventHandler parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length();
    reset(0, 0, 0);
  }

  public CharSequence getInput()
  {
    return input;
  }

  public int getTokenOffset()
  {
    return b0;
  }

  public int getTokenEnd()
  {
    return e0;
  }

  public final void reset(int l, int b, int e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo.clear();
    eventHandler.reset(input);
  }

  public void reset()
  {
    reset(0, 0, 0);
  }

  public static String getOffendingToken(ParseException e)
  {
    return e.getOffending() < 0 ? null : TOKEN[e.getOffending()];
  }

  public static String[] getExpectedTokenSet(ParseException e)
  {
    String[] expected;
    if (e.getExpected() >= 0)
    {
      expected = new String[]{TOKEN[e.getExpected()]};
    }
    else
    {
      expected = getTokenSet(- e.getState());
    }
    return expected;
  }

  public String getErrorMessage(ParseException e)
  {
    String message = e.getMessage();
    String[] tokenSet = getExpectedTokenSet(e);
    String found = getOffendingToken(e);
    int size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : java.util.Arrays.toString(tokenSet))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    String prefix = input.subSequence(0, e.getBegin()).toString();
    int line = prefix.replaceAll("[^\n]", "").length() + 1;
    int column = prefix.length() - prefix.lastIndexOf('\n');
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.subSequence(e.getBegin(), Math.min(input.length(), e.getBegin() + 64))
         + "...";
  }

  public void parse_XQuery()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(261);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  }

  private void parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 266:                       // 'xquery'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 62730                 // 'xquery' 'encoding'
     || lk == 130826)               // 'xquery' 'version'
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(261);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 177:                       // 'module'
      lookahead2W(190);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 91825:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  private void parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(266);                   // 'xquery'
    lookahead1W(113);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 122:                       // 'encoding'
      consume(122);                 // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      break;
    default:
      consume(255);                 // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      lookahead1W(106);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 122)                // 'encoding'
      {
        consume(122);               // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
    }
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  private void parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(135);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  private void parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(177);                   // 'module'
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    consume(179);                   // 'namespace'
    lookahead1W(246);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(59);                    // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  private void parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(261);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      switch (l1)
      {
      case 105:                     // 'declare'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'collection' |
                                    // 'construction' | 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' |
                                    // 'default' | 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'index' | 'instance' | 'integrity' | 'intersect' | 'is' | 'le' | 'lt' |
                                    // 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'revalidation' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 150:                     // 'import'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 41065               // 'declare' 'base-uri'
       && lk != 42089               // 'declare' 'boundary-space'
       && lk != 48745               // 'declare' 'construction'
       && lk != 51817               // 'declare' 'copy-namespaces'
       && lk != 52841               // 'declare' 'decimal-format'
       && lk != 54377               // 'declare' 'default'
       && lk != 70761               // 'declare' 'ft-option'
       && lk != 90774               // 'import' 'module'
       && lk != 91753               // 'declare' 'namespace'
       && lk != 100969              // 'declare' 'ordering'
       && lk != 110185              // 'declare' 'revalidation'
       && lk != 111766)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 105:                     // 'declare'
        lookahead2W(175);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 54377)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 91753:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 150:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 70761:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(261);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      switch (l1)
      {
      case 105:                     // 'declare'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'collection' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'index' | 'instance' | 'integrity' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16489               // 'declare' '%'
       && lk != 47209               // 'declare' 'collection'
       && lk != 50281               // 'declare' 'context'
       && lk != 72809               // 'declare' 'function'
       && lk != 77929               // 'declare' 'index'
       && lk != 81001               // 'declare' 'integrity'
       && lk != 98921               // 'declare' 'option'
       && lk != 127593              // 'declare' 'updating'
       && lk != 130153)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 105:                     // 'declare'
        lookahead2W(171);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 50281:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 98921:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  private void parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(52);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  private void parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 105:                       // 'declare'
      lookahead2W(168);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 54377)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (ParseException p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (ParseException p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 42089:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 41065:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 48745:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 100969:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 110185:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 51817:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  private void parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(33);                // S^WS | '(:' | 'boundary-space'
    consume(82);                    // 'boundary-space'
    lookahead1W(130);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 207:                       // 'preserve'
      consume(207);                 // 'preserve'
      break;
    default:
      consume(234);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  private void parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(106);                   // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consume(91);                    // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  private void try_DefaultCollationDecl()
  {
    consumeT(105);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(106);                  // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consumeT(91);                   // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  private void parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'base-uri'
    consume(80);                    // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  private void parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(95);                    // 'construction'
    lookahead1W(130);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 234:                       // 'strip'
      consume(234);                 // 'strip'
      break;
    default:
      consume(207);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  private void parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(67);                // S^WS | '(:' | 'ordering'
    consume(197);                   // 'ordering'
    lookahead1W(128);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 196:                       // 'ordered'
      consume(196);                 // 'ordered'
      break;
    default:
      consume(248);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  private void parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(106);                   // 'default'
    lookahead1W(66);                // S^WS | '(:' | 'order'
    consume(195);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(120);                   // 'empty'
    lookahead1W(118);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consume(144);                 // 'greatest'
      break;
    default:
      consume(168);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  private void try_EmptyOrderDecl()
  {
    consumeT(105);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(106);                  // 'default'
    lookahead1W(66);                // S^WS | '(:' | 'order'
    consumeT(195);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(120);                  // 'empty'
    lookahead1W(118);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consumeT(144);                // 'greatest'
      break;
    default:
      consumeT(168);                // 'least'
    }
  }

  private void parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(101);                   // 'copy-namespaces'
    lookahead1W(125);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    consume(41);                    // ','
    lookahead1W(120);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  private void parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 207:                       // 'preserve'
      consume(207);                 // 'preserve'
      break;
    default:
      consume(185);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  private void parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 154:                       // 'inherit'
      consume(154);                 // 'inherit'
      break;
    default:
      consume(184);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  private void parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(111);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 103:                       // 'decimal-format'
      consume(103);                 // 'decimal-format'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(106);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(103);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(177);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 52)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(59);                  // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  private void parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 104:                       // 'decimal-separator'
      consume(104);                 // 'decimal-separator'
      break;
    case 146:                       // 'grouping-separator'
      consume(146);                 // 'grouping-separator'
      break;
    case 153:                       // 'infinity'
      consume(153);                 // 'infinity'
      break;
    case 174:                       // 'minus-sign'
      consume(174);                 // 'minus-sign'
      break;
    case 66:                        // 'NaN'
      consume(66);                  // 'NaN'
      break;
    case 203:                       // 'percent'
      consume(203);                 // 'percent'
      break;
    case 202:                       // 'per-mille'
      consume(202);                 // 'per-mille'
      break;
    case 267:                       // 'zero-digit'
      consume(267);                 // 'zero-digit'
      break;
    case 113:                       // 'digit'
      consume(113);                 // 'digit'
      break;
    default:
      consume(201);                 // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  private void parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 150:                       // 'import'
      lookahead2W(123);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 111766:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  private void parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(150);                   // 'import'
    lookahead1W(71);                // S^WS | '(:' | 'schema'
    consume(218);                   // 'schema'
    lookahead1W(134);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(105);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 78)                   // 'at'
    {
      consume(78);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(100);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  private void parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 179:                       // 'namespace'
      consume(179);                 // 'namespace'
      lookahead1W(246);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(59);                  // '='
      break;
    default:
      consume(106);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(118);                 // 'element'
      lookahead1W(60);              // S^WS | '(:' | 'namespace'
      consume(179);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  private void parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(150);                   // 'import'
    lookahead1W(59);                // S^WS | '(:' | 'module'
    consume(177);                   // 'module'
    lookahead1W(87);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 179)                  // 'namespace'
    {
      consume(179);                 // 'namespace'
      lookahead1W(246);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(59);                  // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(105);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 78)                   // 'at'
    {
      consume(78);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(100);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  private void parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    consume(179);                   // 'namespace'
    lookahead1W(246);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(59);                    // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  private void parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(106);                   // 'default'
    lookahead1W(112);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 118:                       // 'element'
      consume(118);                 // 'element'
      break;
    default:
      consume(142);                 // 'function'
    }
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    consume(179);                   // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  private void try_DefaultNamespaceDecl()
  {
    consumeT(105);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(106);                  // 'default'
    lookahead1W(112);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 118:                       // 'element'
      consumeT(118);                // 'element'
      break;
    default:
      consumeT(142);                // 'function'
    }
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    consumeT(179);                  // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  private void parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(52);                // S^WS | '(:' | 'ft-option'
    consume(138);                   // 'ft-option'
    lookahead1W(79);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  private void parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(105);                   // 'declare'
    for (;;)
    {
      lookahead1W(166);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 249)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 249:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 254:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 142:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 92:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 152:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  private void parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(249);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  private void parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(167);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(150);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(98);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(150);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  private void try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(167);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(150);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(98);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(150);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  private void parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(254);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(144);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(103);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(130);                 // 'external'
      lookahead1W(101);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(260);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  private void parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  private void parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  private void parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(98);                    // 'context'
    lookahead1W(55);                // S^WS | '(:' | 'item'
    consume(162);                   // 'item'
    lookahead1W(144);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 76)                   // 'as'
    {
      consume(76);                  // 'as'
      lookahead1W(251);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(103);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(130);                 // 'external'
      lookahead1W(101);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(260);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  private void parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(98);              // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  private void try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(98);              // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  private void parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(140);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  private void try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(140);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  private void parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  private void try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  private void parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(268);                   // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(272);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  private void try_EnclosedExpr()
  {
    consumeT(268);                  // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(272);                  // '}'
  }

  private void parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(65);                // S^WS | '(:' | 'option'
    consume(193);                   // 'option'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  private void parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  private void try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_ExprSingle();
    }
  }

  private void parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(169);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 213)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  private void try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(169);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 213)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  private void parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 134:                       // 'for'
      lookahead2W(138);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16006:                     // 'for' '$'
      parse_ForClause();
      break;
    case 169:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  private void try_InitialClause()
  {
    switch (l1)
    {
    case 134:                       // 'for'
      lookahead2W(138);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16006:                     // 'for' '$'
      try_ForClause();
      break;
    case 169:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  private void parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 134:                       // 'for'
    case 169:                       // 'let'
      parse_InitialClause();
      break;
    case 258:                       // 'where'
      parse_WhereClause();
      break;
    case 145:                       // 'group'
      parse_GroupByClause();
      break;
    case 102:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  private void try_IntermediateClause()
  {
    switch (l1)
    {
    case 134:                       // 'for'
    case 169:                       // 'let'
      try_InitialClause();
      break;
    case 258:                       // 'where'
      try_WhereClause();
      break;
    case 145:                       // 'group'
      try_GroupByClause();
      break;
    case 102:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  private void parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(134);                   // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  private void try_ForClause()
  {
    consumeT(134);                  // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  private void parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(161);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(154);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 71)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(147);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 78)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(119);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 221)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  private void try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(161);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(154);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 71)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(147);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 78)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(119);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 221)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(71);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(120);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  private void try_AllowingEmpty()
  {
    consumeT(71);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(120);                  // 'empty'
  }

  private void parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(78);                    // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  private void try_PositionalVar()
  {
    consumeT(78);                   // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  private void parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(221);                   // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  private void try_FTScoreVar()
  {
    consumeT(221);                  // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  private void parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(169);                   // 'let'
    lookahead1W(93);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(93);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  private void try_LetClause()
  {
    consumeT(169);                  // 'let'
    lookahead1W(93);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(93);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  private void parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(102);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 76)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  private void try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(102);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 76)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(134);                   // 'for'
    lookahead1W(132);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 243:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  private void try_WindowClause()
  {
    consumeT(134);                  // 'for'
    lookahead1W(132);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 243:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  private void parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(243);                   // 'tumbling'
    lookahead1W(82);                // S^WS | '(:' | 'window'
    consume(261);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(107);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 123                   // 'end'
     || l1 == 192)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  private void try_TumblingWindowClause()
  {
    consumeT(243);                  // 'tumbling'
    lookahead1W(82);                // S^WS | '(:' | 'window'
    consumeT(261);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(107);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 123                   // 'end'
     || l1 == 192)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  private void parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(227);                   // 'sliding'
    lookahead1W(82);                // S^WS | '(:' | 'window'
    consume(261);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(107);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  private void try_SlidingWindowClause()
  {
    consumeT(227);                  // 'sliding'
    lookahead1W(82);                // S^WS | '(:' | 'window'
    consumeT(261);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(107);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  private void parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(230);                   // 'start'
    lookahead1W(160);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(80);                // S^WS | '(:' | 'when'
    consume(257);                   // 'when'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  private void try_WindowStartCondition()
  {
    consumeT(230);                  // 'start'
    lookahead1W(160);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(80);                // S^WS | '(:' | 'when'
    consumeT(257);                  // 'when'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 192)                  // 'only'
    {
      consume(192);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(123);                   // 'end'
    lookahead1W(160);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(80);                // S^WS | '(:' | 'when'
    consume(257);                   // 'when'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  private void try_WindowEndCondition()
  {
    if (l1 == 192)                  // 'only'
    {
      consumeT(192);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(123);                  // 'end'
    lookahead1W(160);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(80);                // S^WS | '(:' | 'when'
    consumeT(257);                  // 'when'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(155);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 78)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(149);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 208)                  // 'previous'
    {
      consume(208);                 // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(124);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 182)                  // 'next'
    {
      consume(182);                 // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  private void try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CurrentItem();
    }
    lookahead1W(155);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 78)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(149);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 208)                  // 'previous'
    {
      consumeT(208);                // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_PreviousItem();
    }
    lookahead1W(124);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 182)                  // 'next'
    {
      consumeT(182);                // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NextItem();
    }
  }

  private void parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  private void try_CurrentItem()
  {
    try_EQName();
  }

  private void parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  private void try_PreviousItem()
  {
    try_EQName();
  }

  private void parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  private void try_NextItem()
  {
    try_EQName();
  }

  private void parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(102);                   // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  private void try_CountClause()
  {
    consumeT(102);                  // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  private void parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(258);                   // 'where'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  private void try_WhereClause()
  {
    consumeT(258);                  // 'where'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(145);                   // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consume(84);                    // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  private void try_GroupByClause()
  {
    consumeT(145);                  // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consumeT(84);                   // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  private void parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(172);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  private void try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(172);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  private void parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(179);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 51                    // ':='
     || l1 == 76)                   // 'as'
    {
      if (l1 == 76)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      consume(51);                  // ':='
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 91)                   // 'collation'
    {
      consume(91);                  // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  private void try_GroupingSpec()
  {
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(179);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 51                    // ':='
     || l1 == 76)                   // 'as'
    {
      if (l1 == 76)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      consumeT(51);                 // ':='
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_ExprSingle();
    }
    if (l1 == 91)                   // 'collation'
    {
      consumeT(91);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
    }
  }

  private void parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 195:                       // 'order'
      consume(195);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(84);                  // 'by'
      break;
    default:
      consume(229);                 // 'stable'
      lookahead1W(66);              // S^WS | '(:' | 'order'
      consume(195);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(84);                  // 'by'
    }
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  private void try_OrderByClause()
  {
    switch (l1)
    {
    case 195:                       // 'order'
      consumeT(195);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(84);                 // 'by'
      break;
    default:
      consumeT(229);                // 'stable'
      lookahead1W(66);              // S^WS | '(:' | 'order'
      consumeT(195);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(84);                 // 'by'
    }
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_OrderSpecList();
  }

  private void parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(172);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  private void try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(172);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_OrderSpec();
    }
  }

  private void parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  private void try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  private void parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 77                    // 'ascending'
     || l1 == 110)                  // 'descending'
    {
      switch (l1)
      {
      case 77:                      // 'ascending'
        consume(77);                // 'ascending'
        break;
      default:
        consume(110);               // 'descending'
      }
    }
    lookahead1W(176);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 120)                  // 'empty'
    {
      consume(120);                 // 'empty'
      lookahead1W(118);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consume(144);               // 'greatest'
        break;
      default:
        consume(168);               // 'least'
      }
    }
    lookahead1W(173);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 91)                   // 'collation'
    {
      consume(91);                  // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  private void try_OrderModifier()
  {
    if (l1 == 77                    // 'ascending'
     || l1 == 110)                  // 'descending'
    {
      switch (l1)
      {
      case 77:                      // 'ascending'
        consumeT(77);               // 'ascending'
        break;
      default:
        consumeT(110);              // 'descending'
      }
    }
    lookahead1W(176);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 120)                  // 'empty'
    {
      consumeT(120);                // 'empty'
      lookahead1W(118);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consumeT(144);              // 'greatest'
        break;
      default:
        consumeT(168);              // 'least'
      }
    }
    lookahead1W(173);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 91)                   // 'collation'
    {
      consumeT(91);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
    }
  }

  private void parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  private void try_ReturnClause()
  {
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 228:                       // 'some'
      consume(228);                 // 'some'
      break;
    default:
      consume(126);                 // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(107);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(107);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 76)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(151);                 // 'in'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_ExprSingle();
    }
    consume(217);                   // 'satisfies'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  private void try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 228:                       // 'some'
      consumeT(228);                // 'some'
      break;
    default:
      consumeT(126);                // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(107);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(107);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 76)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(151);                // 'in'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_ExprSingle();
    }
    consumeT(217);                  // 'satisfies'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(235);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consume(106);                   // 'default'
    lookahead1W(68);                // S^WS | '(:' | 'return'
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  private void try_SwitchExpr()
  {
    consumeT(235);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consumeT(106);                  // 'default'
    lookahead1W(68);                // S^WS | '(:' | 'return'
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(85);                  // 'case'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  private void try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(85);                 // 'case'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_SwitchCaseOperand();
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  private void try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  private void parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(245);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consume(106);                   // 'default'
    lookahead1W(92);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(68);                // S^WS | '(:' | 'return'
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  private void try_TypeswitchExpr()
  {
    consumeT(245);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consumeT(106);                  // 'default'
    lookahead1W(92);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(68);                // S^WS | '(:' | 'return'
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(85);                    // 'case'
    lookahead1W(255);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(76);                  // 'as'
    }
    lookahead1W(251);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  private void try_CaseClause()
  {
    consumeT(85);                   // 'case'
    lookahead1W(255);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(76);                 // 'as'
    }
    lookahead1W(251);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_SequenceTypeUnion();
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(131);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 270)                // '|'
      {
        break;
      }
      consume(270);                 // '|'
      lookahead1W(251);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  private void try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(131);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 270)                // '|'
      {
        break;
      }
      consumeT(270);                // '|'
      lookahead1W(251);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  private void parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(149);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(75);                // S^WS | '(:' | 'then'
    consume(237);                   // 'then'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    consume(119);                   // 'else'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  private void try_IfExpr()
  {
    consumeT(149);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(75);                // S^WS | '(:' | 'then'
    consumeT(237);                  // 'then'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
    consumeT(119);                  // 'else'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(180);             // S^WS | EOF | '(:' | ')' | ',' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '}'
      if (l1 != 88)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  private void try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(180);             // S^WS | EOF | '(:' | ')' | ',' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '}'
      if (l1 != 88)                 // 'catch'
      {
        break;
      }
    }
  }

  private void parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(242);                   // 'try'
    lookahead1W(84);                // S^WS | '(:' | '{'
    consume(268);                   // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_TryTargetExpr();
    consume(272);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  private void try_TryClause()
  {
    consumeT(242);                  // 'try'
    lookahead1W(84);                // S^WS | '(:' | '{'
    consumeT(268);                  // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_TryTargetExpr();
    consumeT(272);                  // '}'
  }

  private void parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  private void try_TryTargetExpr()
  {
    try_Expr();
  }

  private void parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(88);                    // 'catch'
    lookahead1W(247);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(268);                   // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(272);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  private void try_CatchClause()
  {
    consumeT(88);                   // 'catch'
    lookahead1W(247);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    consumeT(268);                  // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(272);                  // '}'
  }

  private void parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(133);             // S^WS | '(:' | '{' | '|'
      if (l1 != 270)                // '|'
      {
        break;
      }
      consume(270);                 // '|'
      lookahead1W(247);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  private void try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(133);             // S^WS | '(:' | '{' | '|'
      if (l1 != 270)                // '|'
      {
        break;
      }
      consumeT(270);                // '|'
      lookahead1W(247);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NameTest();
    }
  }

  private void parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 194)                // 'or'
      {
        break;
      }
      consume(194);                 // 'or'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  private void try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 194)                // 'or'
      {
        break;
      }
      consumeT(194);                // 'or'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_AndExpr();
    }
  }

  private void parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 74)                 // 'and'
      {
        break;
      }
      consume(74);                  // 'and'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  private void try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 74)                 // 'and'
      {
        break;
      }
      consumeT(74);                 // 'and'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_ComparisonExpr();
    }
  }

  private void parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 53                    // '<'
     || l1 == 56                    // '<<'
     || l1 == 57                    // '<='
     || l1 == 59                    // '='
     || l1 == 60                    // '>'
     || l1 == 61                    // '>='
     || l1 == 62                    // '>>'
     || l1 == 125                   // 'eq'
     || l1 == 143                   // 'ge'
     || l1 == 147                   // 'gt'
     || l1 == 161                   // 'is'
     || l1 == 167                   // 'le'
     || l1 == 173                   // 'lt'
     || l1 == 181)                  // 'ne'
    {
      switch (l1)
      {
      case 125:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 167:                     // 'le'
      case 173:                     // 'lt'
      case 181:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 56:                      // '<<'
      case 62:                      // '>>'
      case 161:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  private void try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 53                    // '<'
     || l1 == 56                    // '<<'
     || l1 == 57                    // '<='
     || l1 == 59                    // '='
     || l1 == 60                    // '>'
     || l1 == 61                    // '>='
     || l1 == 62                    // '>>'
     || l1 == 125                   // 'eq'
     || l1 == 143                   // 'ge'
     || l1 == 147                   // 'gt'
     || l1 == 161                   // 'is'
     || l1 == 167                   // 'le'
     || l1 == 173                   // 'lt'
     || l1 == 181)                  // 'ne'
    {
      switch (l1)
      {
      case 125:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 167:                     // 'le'
      case 173:                     // 'lt'
      case 181:                     // 'ne'
        try_ValueComp();
        break;
      case 56:                      // '<<'
      case 62:                      // '>>'
      case 161:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_FTContainsExpr();
    }
  }

  private void parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 96)                   // 'contains'
    {
      consume(96);                  // 'contains'
      lookahead1W(74);              // S^WS | '(:' | 'text'
      consume(236);                 // 'text'
      lookahead1W(159);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 263)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  private void try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 96)                   // 'contains'
    {
      consumeT(96);                 // 'contains'
      lookahead1W(74);              // S^WS | '(:' | 'text'
      consumeT(236);                // 'text'
      lookahead1W(159);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 263)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  private void parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 271)                // '||'
      {
        break;
      }
      consume(271);                 // '||'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  private void try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 271)                // '||'
      {
        break;
      }
      consumeT(271);                // '||'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_RangeExpr();
    }
  }

  private void parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 240)                  // 'to'
    {
      consume(240);                 // 'to'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  private void try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 240)                  // 'to'
    {
      consumeT(240);                // 'to'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_AdditiveExpr();
    }
  }

  private void parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consume(40);                // '+'
        break;
      default:
        consume(42);                // '-'
      }
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  private void try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consumeT(40);               // '+'
        break;
      default:
        consumeT(42);               // '-'
      }
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_MultiplicativeExpr();
    }
  }

  private void parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 115                 // 'div'
       && l1 != 148                 // 'idiv'
       && l1 != 175)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 115:                     // 'div'
        consume(115);               // 'div'
        break;
      case 148:                     // 'idiv'
        consume(148);               // 'idiv'
        break;
      default:
        consume(175);               // 'mod'
      }
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  private void try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 115                 // 'div'
       && l1 != 148                 // 'idiv'
       && l1 != 175)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 115:                     // 'div'
        consumeT(115);              // 'div'
        break;
      case 148:                     // 'idiv'
        consumeT(148);              // 'idiv'
        break;
      default:
        consumeT(175);              // 'mod'
      }
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_UnionExpr();
    }
  }

  private void parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 246                 // 'union'
       && l1 != 270)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 246:                     // 'union'
        consume(246);               // 'union'
        break;
      default:
        consume(270);               // '|'
      }
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  private void try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 246                 // 'union'
       && l1 != 270)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 246:                     // 'union'
        consumeT(246);              // 'union'
        break;
      default:
        consumeT(270);              // '|'
      }
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_IntersectExceptExpr();
    }
  }

  private void parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      if (l1 != 128                 // 'except'
       && l1 != 159)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 159:                     // 'intersect'
        consume(159);               // 'intersect'
        break;
      default:
        consume(128);               // 'except'
      }
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  private void try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      if (l1 != 128                 // 'except'
       && l1 != 159)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 159:                     // 'intersect'
        consumeT(159);              // 'intersect'
        break;
      default:
        consumeT(128);              // 'except'
      }
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_InstanceofExpr();
    }
  }

  private void parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
    if (l1 == 157)                  // 'instance'
    {
      consume(157);                 // 'instance'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      consume(190);                 // 'of'
      lookahead1W(251);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  private void try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
    if (l1 == 157)                  // 'instance'
    {
      consumeT(157);                // 'instance'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      consumeT(190);                // 'of'
      lookahead1W(251);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  private void parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}'
    if (l1 == 241)                  // 'treat'
    {
      consume(241);                 // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(76);                  // 'as'
      lookahead1W(251);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  private void try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}'
    if (l1 == 241)                  // 'treat'
    {
      consumeT(241);                // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(76);                 // 'as'
      lookahead1W(251);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  private void parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}'
    if (l1 == 87)                   // 'castable'
    {
      consume(87);                  // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(76);                  // 'as'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  private void try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}'
    if (l1 == 87)                   // 'castable'
    {
      consumeT(87);                 // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(76);                 // 'as'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  private void parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}'
    if (l1 == 86)                   // 'cast'
    {
      consume(86);                  // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(76);                  // 'as'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  private void try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '}'
    if (l1 == 86)                   // 'cast'
    {
      consumeT(86);                 // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(76);                 // 'as'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  private void parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consume(42);                // '-'
        break;
      default:
        consume(40);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  private void try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consumeT(42);               // '-'
        break;
      default:
        consumeT(40);               // '+'
      }
    }
    try_ValueExpr();
  }

  private void parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 252:                       // 'validate'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' | 'to' |
                                    // 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 85244:                     // 'validate' 'lax'
    case 119548:                    // 'validate' 'strict'
    case 125180:                    // 'validate' 'type'
    case 137468:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_PathExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  private void try_ValueExpr()
  {
    switch (l1)
    {
    case 252:                       // 'validate'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' | 'to' |
                                    // 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 85244:                     // 'validate' 'lax'
    case 119548:                    // 'validate' 'strict'
    case 125180:                    // 'validate' 'type'
    case 137468:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_PathExpr();
    }
  }

  private void parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 59:                        // '='
      consume(59);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 53:                        // '<'
      consume(53);                  // '<'
      break;
    case 57:                        // '<='
      consume(57);                  // '<='
      break;
    case 60:                        // '>'
      consume(60);                  // '>'
      break;
    default:
      consume(61);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  private void try_GeneralComp()
  {
    switch (l1)
    {
    case 59:                        // '='
      consumeT(59);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 53:                        // '<'
      consumeT(53);                 // '<'
      break;
    case 57:                        // '<='
      consumeT(57);                 // '<='
      break;
    case 60:                        // '>'
      consumeT(60);                 // '>'
      break;
    default:
      consumeT(61);                 // '>='
    }
  }

  private void parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 125:                       // 'eq'
      consume(125);                 // 'eq'
      break;
    case 181:                       // 'ne'
      consume(181);                 // 'ne'
      break;
    case 173:                       // 'lt'
      consume(173);                 // 'lt'
      break;
    case 167:                       // 'le'
      consume(167);                 // 'le'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    default:
      consume(143);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  private void try_ValueComp()
  {
    switch (l1)
    {
    case 125:                       // 'eq'
      consumeT(125);                // 'eq'
      break;
    case 181:                       // 'ne'
      consumeT(181);                // 'ne'
      break;
    case 173:                       // 'lt'
      consumeT(173);                // 'lt'
      break;
    case 167:                       // 'le'
      consumeT(167);                // 'le'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    default:
      consumeT(143);                // 'ge'
    }
  }

  private void parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 161:                       // 'is'
      consume(161);                 // 'is'
      break;
    case 56:                        // '<<'
      consume(56);                  // '<<'
      break;
    default:
      consume(62);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  private void try_NodeComp()
  {
    switch (l1)
    {
    case 161:                       // 'is'
      consumeT(161);                // 'is'
      break;
    case 56:                        // '<<'
      consumeT(56);                 // '<<'
      break;
    default:
      consumeT(62);                 // '>>'
    }
  }

  private void parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(252);                   // 'validate'
    lookahead1W(157);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 268)                  // '{'
    {
      switch (l1)
      {
      case 244:                     // 'type'
        consume(244);               // 'type'
        lookahead1W(245);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    consume(268);                   // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(272);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  private void try_ValidateExpr()
  {
    consumeT(252);                  // 'validate'
    lookahead1W(157);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 268)                  // '{'
    {
      switch (l1)
      {
      case 244:                     // 'type'
        consumeT(244);              // 'type'
        lookahead1W(245);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    consumeT(268);                  // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(272);                  // '}'
  }

  private void parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 166:                       // 'lax'
      consume(166);                 // 'lax'
      break;
    default:
      consume(233);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  private void try_ValidationMode()
  {
    switch (l1)
    {
    case 166:                       // 'lax'
      consumeT(166);                // 'lax'
      break;
    default:
      consumeT(233);                // 'strict'
    }
  }

  private void parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(97);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(268);                   // '{'
    lookahead1W(264);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
    if (l1 != 272)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(272);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  private void try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(97);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(268);                  // '{'
    lookahead1W(264);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
    if (l1 != 272)                  // '}'
    {
      try_Expr();
    }
    consumeT(272);                  // '}'
  }

  private void parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(244);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
      lookahead1(0);                // PragmaContents
      consume(1);                   // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  private void try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(244);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
      lookahead1(0);                // PragmaContents
      consumeT(1);                  // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consumeT(30);                   // '#)'
  }

  private void parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 46:                        // '/'
      consume(46);                  // '/'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '@' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 52:                      // ';'
      case 56:                      // '<<'
      case 57:                      // '<='
      case 59:                      // '='
      case 60:                      // '>'
      case 61:                      // '>='
      case 62:                      // '>>'
      case 68:                      // ']'
      case 84:                      // 'by'
      case 96:                      // 'contains'
      case 199:                     // 'paragraphs'
      case 225:                     // 'sentences'
      case 239:                     // 'times'
      case 265:                     // 'words'
      case 270:                     // '|'
      case 271:                     // '||'
      case 272:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consume(47);                  // '//'
      lookahead1W(258);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  private void try_PathExpr()
  {
    switch (l1)
    {
    case 46:                        // '/'
      consumeT(46);                 // '/'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '@' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 52:                      // ';'
      case 56:                      // '<<'
      case 57:                      // '<='
      case 59:                      // '='
      case 60:                      // '>'
      case 61:                      // '>='
      case 62:                      // '>>'
      case 68:                      // ']'
      case 84:                      // 'by'
      case 96:                      // 'contains'
      case 199:                     // 'paragraphs'
      case 225:                     // 'sentences'
      case 239:                     // 'times'
      case 265:                     // 'words'
      case 270:                     // '|'
      case 271:                     // '||'
      case 272:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consumeT(47);                 // '//'
      lookahead1W(258);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  private void parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      if (l1 != 26                  // '!'
       && l1 != 46                  // '/'
       && l1 != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consume(46);                // '/'
        break;
      case 47:                      // '//'
        consume(47);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(258);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  private void try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      if (l1 != 26                  // '!'
       && l1 != 46                  // '/'
       && l1 != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consumeT(46);               // '/'
        break;
      case 47:                      // '//'
        consumeT(47);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(258);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_StepExpr();
    }
  }

  private void parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 79:                        // 'attribute'
      lookahead2W(274);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 118:                       // 'element'
      lookahead2W(272);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 179:                       // 'namespace'
    case 209:                       // 'processing-instruction'
      lookahead2W(273);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 93:                        // 'comment'
    case 116:                       // 'document'
    case 196:                       // 'ordered'
    case 236:                       // 'text'
    case 248:                       // 'unordered'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}'
      break;
    case 121:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 162:                       // 'item'
    case 235:                       // 'switch'
    case 245:                       // 'typeswitch'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 90:                        // 'child'
    case 108:                       // 'descendant'
    case 109:                       // 'descendant-or-self'
    case 132:                       // 'following'
    case 133:                       // 'following-sibling'
    case 200:                       // 'parent'
    case 205:                       // 'preceding'
    case 206:                       // 'preceding-sibling'
    case 222:                       // 'self'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    case 6:                         // EQName^Token
    case 69:                        // 'after'
    case 71:                        // 'allowing'
    case 74:                        // 'and'
    case 76:                        // 'as'
    case 77:                        // 'ascending'
    case 78:                        // 'at'
    case 80:                        // 'base-uri'
    case 81:                        // 'before'
    case 82:                        // 'boundary-space'
    case 83:                        // 'break'
    case 85:                        // 'case'
    case 86:                        // 'cast'
    case 87:                        // 'castable'
    case 88:                        // 'catch'
    case 91:                        // 'collation'
    case 94:                        // 'constraint'
    case 95:                        // 'construction'
    case 98:                        // 'context'
    case 99:                        // 'continue'
    case 100:                       // 'copy'
    case 101:                       // 'copy-namespaces'
    case 102:                       // 'count'
    case 103:                       // 'decimal-format'
    case 105:                       // 'declare'
    case 106:                       // 'default'
    case 107:                       // 'delete'
    case 110:                       // 'descending'
    case 115:                       // 'div'
    case 117:                       // 'document-node'
    case 119:                       // 'else'
    case 120:                       // 'empty'
    case 122:                       // 'encoding'
    case 123:                       // 'end'
    case 125:                       // 'eq'
    case 126:                       // 'every'
    case 128:                       // 'except'
    case 129:                       // 'exit'
    case 130:                       // 'external'
    case 131:                       // 'first'
    case 134:                       // 'for'
    case 138:                       // 'ft-option'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 151:                       // 'in'
    case 152:                       // 'index'
    case 156:                       // 'insert'
    case 157:                       // 'instance'
    case 158:                       // 'integrity'
    case 159:                       // 'intersect'
    case 160:                       // 'into'
    case 161:                       // 'is'
    case 165:                       // 'last'
    case 166:                       // 'lax'
    case 167:                       // 'le'
    case 169:                       // 'let'
    case 171:                       // 'loop'
    case 173:                       // 'lt'
    case 175:                       // 'mod'
    case 176:                       // 'modify'
    case 177:                       // 'module'
    case 180:                       // 'namespace-node'
    case 181:                       // 'ne'
    case 186:                       // 'node'
    case 187:                       // 'nodes'
    case 192:                       // 'only'
    case 193:                       // 'option'
    case 194:                       // 'or'
    case 195:                       // 'order'
    case 197:                       // 'ordering'
    case 211:                       // 'rename'
    case 212:                       // 'replace'
    case 213:                       // 'return'
    case 214:                       // 'returning'
    case 215:                       // 'revalidation'
    case 217:                       // 'satisfies'
    case 218:                       // 'schema'
    case 219:                       // 'schema-attribute'
    case 220:                       // 'schema-element'
    case 221:                       // 'score'
    case 227:                       // 'sliding'
    case 228:                       // 'some'
    case 229:                       // 'stable'
    case 230:                       // 'start'
    case 233:                       // 'strict'
    case 240:                       // 'to'
    case 241:                       // 'treat'
    case 242:                       // 'try'
    case 243:                       // 'tumbling'
    case 244:                       // 'type'
    case 246:                       // 'union'
    case 249:                       // 'updating'
    case 252:                       // 'validate'
    case 253:                       // 'value'
    case 254:                       // 'variable'
    case 255:                       // 'version'
    case 258:                       // 'where'
    case 259:                       // 'while'
    case 262:                       // 'with'
    case 266:                       // 'xquery'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 35407                 // 'attribute' 'after'
     || lk == 35446                 // 'element' 'after'
     || lk == 35507                 // 'namespace' 'after'
     || lk == 35537                 // 'processing-instruction' 'after'
     || lk == 37967                 // 'attribute' 'and'
     || lk == 38006                 // 'element' 'and'
     || lk == 38067                 // 'namespace' 'and'
     || lk == 38097                 // 'processing-instruction' 'and'
     || lk == 38991                 // 'attribute' 'as'
     || lk == 39030                 // 'element' 'as'
     || lk == 39091                 // 'namespace' 'as'
     || lk == 39121                 // 'processing-instruction' 'as'
     || lk == 39503                 // 'attribute' 'ascending'
     || lk == 39542                 // 'element' 'ascending'
     || lk == 39603                 // 'namespace' 'ascending'
     || lk == 39633                 // 'processing-instruction' 'ascending'
     || lk == 41551                 // 'attribute' 'before'
     || lk == 41590                 // 'element' 'before'
     || lk == 41651                 // 'namespace' 'before'
     || lk == 41681                 // 'processing-instruction' 'before'
     || lk == 43599                 // 'attribute' 'case'
     || lk == 43638                 // 'element' 'case'
     || lk == 43699                 // 'namespace' 'case'
     || lk == 43729                 // 'processing-instruction' 'case'
     || lk == 44111                 // 'attribute' 'cast'
     || lk == 44150                 // 'element' 'cast'
     || lk == 44211                 // 'namespace' 'cast'
     || lk == 44241                 // 'processing-instruction' 'cast'
     || lk == 44623                 // 'attribute' 'castable'
     || lk == 44662                 // 'element' 'castable'
     || lk == 44723                 // 'namespace' 'castable'
     || lk == 44753                 // 'processing-instruction' 'castable'
     || lk == 46671                 // 'attribute' 'collation'
     || lk == 46710                 // 'element' 'collation'
     || lk == 46771                 // 'namespace' 'collation'
     || lk == 46801                 // 'processing-instruction' 'collation'
     || lk == 52303                 // 'attribute' 'count'
     || lk == 52342                 // 'element' 'count'
     || lk == 52403                 // 'namespace' 'count'
     || lk == 52433                 // 'processing-instruction' 'count'
     || lk == 54351                 // 'attribute' 'default'
     || lk == 54390                 // 'element' 'default'
     || lk == 54451                 // 'namespace' 'default'
     || lk == 54481                 // 'processing-instruction' 'default'
     || lk == 56399                 // 'attribute' 'descending'
     || lk == 56438                 // 'element' 'descending'
     || lk == 56499                 // 'namespace' 'descending'
     || lk == 56529                 // 'processing-instruction' 'descending'
     || lk == 58959                 // 'attribute' 'div'
     || lk == 58998                 // 'element' 'div'
     || lk == 59059                 // 'namespace' 'div'
     || lk == 59089                 // 'processing-instruction' 'div'
     || lk == 61007                 // 'attribute' 'else'
     || lk == 61046                 // 'element' 'else'
     || lk == 61107                 // 'namespace' 'else'
     || lk == 61137                 // 'processing-instruction' 'else'
     || lk == 61519                 // 'attribute' 'empty'
     || lk == 61558                 // 'element' 'empty'
     || lk == 61619                 // 'namespace' 'empty'
     || lk == 61649                 // 'processing-instruction' 'empty'
     || lk == 63055                 // 'attribute' 'end'
     || lk == 63094                 // 'element' 'end'
     || lk == 63155                 // 'namespace' 'end'
     || lk == 63185                 // 'processing-instruction' 'end'
     || lk == 64079                 // 'attribute' 'eq'
     || lk == 64118                 // 'element' 'eq'
     || lk == 64179                 // 'namespace' 'eq'
     || lk == 64209                 // 'processing-instruction' 'eq'
     || lk == 65615                 // 'attribute' 'except'
     || lk == 65654                 // 'element' 'except'
     || lk == 65715                 // 'namespace' 'except'
     || lk == 65745                 // 'processing-instruction' 'except'
     || lk == 68687                 // 'attribute' 'for'
     || lk == 68726                 // 'element' 'for'
     || lk == 68787                 // 'namespace' 'for'
     || lk == 68817                 // 'processing-instruction' 'for'
     || lk == 73295                 // 'attribute' 'ge'
     || lk == 73334                 // 'element' 'ge'
     || lk == 73395                 // 'namespace' 'ge'
     || lk == 73425                 // 'processing-instruction' 'ge'
     || lk == 74319                 // 'attribute' 'group'
     || lk == 74358                 // 'element' 'group'
     || lk == 74419                 // 'namespace' 'group'
     || lk == 74449                 // 'processing-instruction' 'group'
     || lk == 75343                 // 'attribute' 'gt'
     || lk == 75382                 // 'element' 'gt'
     || lk == 75443                 // 'namespace' 'gt'
     || lk == 75473                 // 'processing-instruction' 'gt'
     || lk == 75855                 // 'attribute' 'idiv'
     || lk == 75894                 // 'element' 'idiv'
     || lk == 75955                 // 'namespace' 'idiv'
     || lk == 75985                 // 'processing-instruction' 'idiv'
     || lk == 80463                 // 'attribute' 'instance'
     || lk == 80502                 // 'element' 'instance'
     || lk == 80563                 // 'namespace' 'instance'
     || lk == 80593                 // 'processing-instruction' 'instance'
     || lk == 81487                 // 'attribute' 'intersect'
     || lk == 81526                 // 'element' 'intersect'
     || lk == 81587                 // 'namespace' 'intersect'
     || lk == 81617                 // 'processing-instruction' 'intersect'
     || lk == 81999                 // 'attribute' 'into'
     || lk == 82038                 // 'element' 'into'
     || lk == 82099                 // 'namespace' 'into'
     || lk == 82129                 // 'processing-instruction' 'into'
     || lk == 82511                 // 'attribute' 'is'
     || lk == 82550                 // 'element' 'is'
     || lk == 82611                 // 'namespace' 'is'
     || lk == 82641                 // 'processing-instruction' 'is'
     || lk == 85583                 // 'attribute' 'le'
     || lk == 85622                 // 'element' 'le'
     || lk == 85683                 // 'namespace' 'le'
     || lk == 85713                 // 'processing-instruction' 'le'
     || lk == 86607                 // 'attribute' 'let'
     || lk == 86646                 // 'element' 'let'
     || lk == 86707                 // 'namespace' 'let'
     || lk == 86737                 // 'processing-instruction' 'let'
     || lk == 88655                 // 'attribute' 'lt'
     || lk == 88694                 // 'element' 'lt'
     || lk == 88755                 // 'namespace' 'lt'
     || lk == 88785                 // 'processing-instruction' 'lt'
     || lk == 89679                 // 'attribute' 'mod'
     || lk == 89718                 // 'element' 'mod'
     || lk == 89779                 // 'namespace' 'mod'
     || lk == 89809                 // 'processing-instruction' 'mod'
     || lk == 90191                 // 'attribute' 'modify'
     || lk == 90230                 // 'element' 'modify'
     || lk == 90291                 // 'namespace' 'modify'
     || lk == 90321                 // 'processing-instruction' 'modify'
     || lk == 92751                 // 'attribute' 'ne'
     || lk == 92790                 // 'element' 'ne'
     || lk == 92851                 // 'namespace' 'ne'
     || lk == 92881                 // 'processing-instruction' 'ne'
     || lk == 98383                 // 'attribute' 'only'
     || lk == 98422                 // 'element' 'only'
     || lk == 98483                 // 'namespace' 'only'
     || lk == 98513                 // 'processing-instruction' 'only'
     || lk == 99407                 // 'attribute' 'or'
     || lk == 99446                 // 'element' 'or'
     || lk == 99507                 // 'namespace' 'or'
     || lk == 99537                 // 'processing-instruction' 'or'
     || lk == 99919                 // 'attribute' 'order'
     || lk == 99958                 // 'element' 'order'
     || lk == 100019                // 'namespace' 'order'
     || lk == 100049                // 'processing-instruction' 'order'
     || lk == 109135                // 'attribute' 'return'
     || lk == 109174                // 'element' 'return'
     || lk == 109235                // 'namespace' 'return'
     || lk == 109265                // 'processing-instruction' 'return'
     || lk == 111183                // 'attribute' 'satisfies'
     || lk == 111222                // 'element' 'satisfies'
     || lk == 111283                // 'namespace' 'satisfies'
     || lk == 111313                // 'processing-instruction' 'satisfies'
     || lk == 117327                // 'attribute' 'stable'
     || lk == 117366                // 'element' 'stable'
     || lk == 117427                // 'namespace' 'stable'
     || lk == 117457                // 'processing-instruction' 'stable'
     || lk == 117839                // 'attribute' 'start'
     || lk == 117878                // 'element' 'start'
     || lk == 117939                // 'namespace' 'start'
     || lk == 117969                // 'processing-instruction' 'start'
     || lk == 122959                // 'attribute' 'to'
     || lk == 122998                // 'element' 'to'
     || lk == 123059                // 'namespace' 'to'
     || lk == 123089                // 'processing-instruction' 'to'
     || lk == 123471                // 'attribute' 'treat'
     || lk == 123510                // 'element' 'treat'
     || lk == 123571                // 'namespace' 'treat'
     || lk == 123601                // 'processing-instruction' 'treat'
     || lk == 126031                // 'attribute' 'union'
     || lk == 126070                // 'element' 'union'
     || lk == 126131                // 'namespace' 'union'
     || lk == 126161                // 'processing-instruction' 'union'
     || lk == 132175                // 'attribute' 'where'
     || lk == 132214                // 'element' 'where'
     || lk == 132275                // 'namespace' 'where'
     || lk == 132305                // 'processing-instruction' 'where'
     || lk == 134223                // 'attribute' 'with'
     || lk == 134262                // 'element' 'with'
     || lk == 134323                // 'namespace' 'with'
     || lk == 134353)               // 'processing-instruction' 'with'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 58:                        // '<?'
    case 268:                       // '{'
    case 3151:                      // 'attribute' EQName^Token
    case 3190:                      // 'element' EQName^Token
    case 9907:                      // 'namespace' NCName^Token
    case 9937:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14917:                     // 'after' '#'
    case 14919:                     // 'allowing' '#'
    case 14920:                     // 'ancestor' '#'
    case 14921:                     // 'ancestor-or-self' '#'
    case 14922:                     // 'and' '#'
    case 14924:                     // 'as' '#'
    case 14925:                     // 'ascending' '#'
    case 14926:                     // 'at' '#'
    case 14927:                     // 'attribute' '#'
    case 14928:                     // 'base-uri' '#'
    case 14929:                     // 'before' '#'
    case 14930:                     // 'boundary-space' '#'
    case 14931:                     // 'break' '#'
    case 14933:                     // 'case' '#'
    case 14934:                     // 'cast' '#'
    case 14935:                     // 'castable' '#'
    case 14936:                     // 'catch' '#'
    case 14938:                     // 'child' '#'
    case 14939:                     // 'collation' '#'
    case 14941:                     // 'comment' '#'
    case 14942:                     // 'constraint' '#'
    case 14943:                     // 'construction' '#'
    case 14946:                     // 'context' '#'
    case 14947:                     // 'continue' '#'
    case 14948:                     // 'copy' '#'
    case 14949:                     // 'copy-namespaces' '#'
    case 14950:                     // 'count' '#'
    case 14951:                     // 'decimal-format' '#'
    case 14953:                     // 'declare' '#'
    case 14954:                     // 'default' '#'
    case 14955:                     // 'delete' '#'
    case 14956:                     // 'descendant' '#'
    case 14957:                     // 'descendant-or-self' '#'
    case 14958:                     // 'descending' '#'
    case 14963:                     // 'div' '#'
    case 14964:                     // 'document' '#'
    case 14965:                     // 'document-node' '#'
    case 14966:                     // 'element' '#'
    case 14967:                     // 'else' '#'
    case 14968:                     // 'empty' '#'
    case 14969:                     // 'empty-sequence' '#'
    case 14970:                     // 'encoding' '#'
    case 14971:                     // 'end' '#'
    case 14973:                     // 'eq' '#'
    case 14974:                     // 'every' '#'
    case 14976:                     // 'except' '#'
    case 14977:                     // 'exit' '#'
    case 14978:                     // 'external' '#'
    case 14979:                     // 'first' '#'
    case 14980:                     // 'following' '#'
    case 14981:                     // 'following-sibling' '#'
    case 14982:                     // 'for' '#'
    case 14986:                     // 'ft-option' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 14999:                     // 'in' '#'
    case 15000:                     // 'index' '#'
    case 15004:                     // 'insert' '#'
    case 15005:                     // 'instance' '#'
    case 15006:                     // 'integrity' '#'
    case 15007:                     // 'intersect' '#'
    case 15008:                     // 'into' '#'
    case 15009:                     // 'is' '#'
    case 15010:                     // 'item' '#'
    case 15013:                     // 'last' '#'
    case 15014:                     // 'lax' '#'
    case 15015:                     // 'le' '#'
    case 15017:                     // 'let' '#'
    case 15019:                     // 'loop' '#'
    case 15021:                     // 'lt' '#'
    case 15023:                     // 'mod' '#'
    case 15024:                     // 'modify' '#'
    case 15025:                     // 'module' '#'
    case 15027:                     // 'namespace' '#'
    case 15028:                     // 'namespace-node' '#'
    case 15029:                     // 'ne' '#'
    case 15034:                     // 'node' '#'
    case 15035:                     // 'nodes' '#'
    case 15040:                     // 'only' '#'
    case 15041:                     // 'option' '#'
    case 15042:                     // 'or' '#'
    case 15043:                     // 'order' '#'
    case 15044:                     // 'ordered' '#'
    case 15045:                     // 'ordering' '#'
    case 15048:                     // 'parent' '#'
    case 15053:                     // 'preceding' '#'
    case 15054:                     // 'preceding-sibling' '#'
    case 15057:                     // 'processing-instruction' '#'
    case 15059:                     // 'rename' '#'
    case 15060:                     // 'replace' '#'
    case 15061:                     // 'return' '#'
    case 15062:                     // 'returning' '#'
    case 15063:                     // 'revalidation' '#'
    case 15065:                     // 'satisfies' '#'
    case 15066:                     // 'schema' '#'
    case 15067:                     // 'schema-attribute' '#'
    case 15068:                     // 'schema-element' '#'
    case 15069:                     // 'score' '#'
    case 15070:                     // 'self' '#'
    case 15075:                     // 'sliding' '#'
    case 15076:                     // 'some' '#'
    case 15077:                     // 'stable' '#'
    case 15078:                     // 'start' '#'
    case 15081:                     // 'strict' '#'
    case 15083:                     // 'switch' '#'
    case 15084:                     // 'text' '#'
    case 15088:                     // 'to' '#'
    case 15089:                     // 'treat' '#'
    case 15090:                     // 'try' '#'
    case 15091:                     // 'tumbling' '#'
    case 15092:                     // 'type' '#'
    case 15093:                     // 'typeswitch' '#'
    case 15094:                     // 'union' '#'
    case 15096:                     // 'unordered' '#'
    case 15097:                     // 'updating' '#'
    case 15100:                     // 'validate' '#'
    case 15101:                     // 'value' '#'
    case 15102:                     // 'variable' '#'
    case 15103:                     // 'version' '#'
    case 15106:                     // 'where' '#'
    case 15107:                     // 'while' '#'
    case 15110:                     // 'with' '#'
    case 15114:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17477:                     // 'after' '('
    case 17479:                     // 'allowing' '('
    case 17480:                     // 'ancestor' '('
    case 17481:                     // 'ancestor-or-self' '('
    case 17482:                     // 'and' '('
    case 17484:                     // 'as' '('
    case 17485:                     // 'ascending' '('
    case 17486:                     // 'at' '('
    case 17488:                     // 'base-uri' '('
    case 17489:                     // 'before' '('
    case 17490:                     // 'boundary-space' '('
    case 17491:                     // 'break' '('
    case 17493:                     // 'case' '('
    case 17494:                     // 'cast' '('
    case 17495:                     // 'castable' '('
    case 17496:                     // 'catch' '('
    case 17498:                     // 'child' '('
    case 17499:                     // 'collation' '('
    case 17502:                     // 'constraint' '('
    case 17503:                     // 'construction' '('
    case 17506:                     // 'context' '('
    case 17507:                     // 'continue' '('
    case 17508:                     // 'copy' '('
    case 17509:                     // 'copy-namespaces' '('
    case 17510:                     // 'count' '('
    case 17511:                     // 'decimal-format' '('
    case 17513:                     // 'declare' '('
    case 17514:                     // 'default' '('
    case 17515:                     // 'delete' '('
    case 17516:                     // 'descendant' '('
    case 17517:                     // 'descendant-or-self' '('
    case 17518:                     // 'descending' '('
    case 17523:                     // 'div' '('
    case 17524:                     // 'document' '('
    case 17527:                     // 'else' '('
    case 17528:                     // 'empty' '('
    case 17530:                     // 'encoding' '('
    case 17531:                     // 'end' '('
    case 17533:                     // 'eq' '('
    case 17534:                     // 'every' '('
    case 17536:                     // 'except' '('
    case 17537:                     // 'exit' '('
    case 17538:                     // 'external' '('
    case 17539:                     // 'first' '('
    case 17540:                     // 'following' '('
    case 17541:                     // 'following-sibling' '('
    case 17542:                     // 'for' '('
    case 17546:                     // 'ft-option' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17559:                     // 'in' '('
    case 17560:                     // 'index' '('
    case 17564:                     // 'insert' '('
    case 17565:                     // 'instance' '('
    case 17566:                     // 'integrity' '('
    case 17567:                     // 'intersect' '('
    case 17568:                     // 'into' '('
    case 17569:                     // 'is' '('
    case 17573:                     // 'last' '('
    case 17574:                     // 'lax' '('
    case 17575:                     // 'le' '('
    case 17577:                     // 'let' '('
    case 17579:                     // 'loop' '('
    case 17581:                     // 'lt' '('
    case 17583:                     // 'mod' '('
    case 17584:                     // 'modify' '('
    case 17585:                     // 'module' '('
    case 17587:                     // 'namespace' '('
    case 17589:                     // 'ne' '('
    case 17595:                     // 'nodes' '('
    case 17600:                     // 'only' '('
    case 17601:                     // 'option' '('
    case 17602:                     // 'or' '('
    case 17603:                     // 'order' '('
    case 17604:                     // 'ordered' '('
    case 17605:                     // 'ordering' '('
    case 17608:                     // 'parent' '('
    case 17613:                     // 'preceding' '('
    case 17614:                     // 'preceding-sibling' '('
    case 17619:                     // 'rename' '('
    case 17620:                     // 'replace' '('
    case 17621:                     // 'return' '('
    case 17622:                     // 'returning' '('
    case 17623:                     // 'revalidation' '('
    case 17625:                     // 'satisfies' '('
    case 17626:                     // 'schema' '('
    case 17629:                     // 'score' '('
    case 17630:                     // 'self' '('
    case 17635:                     // 'sliding' '('
    case 17636:                     // 'some' '('
    case 17637:                     // 'stable' '('
    case 17638:                     // 'start' '('
    case 17641:                     // 'strict' '('
    case 17648:                     // 'to' '('
    case 17649:                     // 'treat' '('
    case 17650:                     // 'try' '('
    case 17651:                     // 'tumbling' '('
    case 17652:                     // 'type' '('
    case 17654:                     // 'union' '('
    case 17656:                     // 'unordered' '('
    case 17657:                     // 'updating' '('
    case 17660:                     // 'validate' '('
    case 17661:                     // 'value' '('
    case 17662:                     // 'variable' '('
    case 17663:                     // 'version' '('
    case 17666:                     // 'where' '('
    case 17667:                     // 'while' '('
    case 17670:                     // 'with' '('
    case 17674:                     // 'xquery' '('
    case 36431:                     // 'attribute' 'allowing'
    case 36470:                     // 'element' 'allowing'
    case 36531:                     // 'namespace' 'allowing'
    case 36561:                     // 'processing-instruction' 'allowing'
    case 36943:                     // 'attribute' 'ancestor'
    case 36982:                     // 'element' 'ancestor'
    case 37043:                     // 'namespace' 'ancestor'
    case 37073:                     // 'processing-instruction' 'ancestor'
    case 37455:                     // 'attribute' 'ancestor-or-self'
    case 37494:                     // 'element' 'ancestor-or-self'
    case 37555:                     // 'namespace' 'ancestor-or-self'
    case 37585:                     // 'processing-instruction' 'ancestor-or-self'
    case 40015:                     // 'attribute' 'at'
    case 40054:                     // 'element' 'at'
    case 40115:                     // 'namespace' 'at'
    case 40145:                     // 'processing-instruction' 'at'
    case 40527:                     // 'attribute' 'attribute'
    case 40566:                     // 'element' 'attribute'
    case 40627:                     // 'namespace' 'attribute'
    case 40657:                     // 'processing-instruction' 'attribute'
    case 41039:                     // 'attribute' 'base-uri'
    case 41078:                     // 'element' 'base-uri'
    case 41139:                     // 'namespace' 'base-uri'
    case 41169:                     // 'processing-instruction' 'base-uri'
    case 42063:                     // 'attribute' 'boundary-space'
    case 42102:                     // 'element' 'boundary-space'
    case 42163:                     // 'namespace' 'boundary-space'
    case 42193:                     // 'processing-instruction' 'boundary-space'
    case 42575:                     // 'attribute' 'break'
    case 42614:                     // 'element' 'break'
    case 42675:                     // 'namespace' 'break'
    case 42705:                     // 'processing-instruction' 'break'
    case 45135:                     // 'attribute' 'catch'
    case 45174:                     // 'element' 'catch'
    case 45235:                     // 'namespace' 'catch'
    case 45265:                     // 'processing-instruction' 'catch'
    case 46159:                     // 'attribute' 'child'
    case 46198:                     // 'element' 'child'
    case 46259:                     // 'namespace' 'child'
    case 46289:                     // 'processing-instruction' 'child'
    case 47695:                     // 'attribute' 'comment'
    case 47734:                     // 'element' 'comment'
    case 47795:                     // 'namespace' 'comment'
    case 47825:                     // 'processing-instruction' 'comment'
    case 48207:                     // 'attribute' 'constraint'
    case 48246:                     // 'element' 'constraint'
    case 48307:                     // 'namespace' 'constraint'
    case 48337:                     // 'processing-instruction' 'constraint'
    case 48719:                     // 'attribute' 'construction'
    case 48758:                     // 'element' 'construction'
    case 48819:                     // 'namespace' 'construction'
    case 48849:                     // 'processing-instruction' 'construction'
    case 50255:                     // 'attribute' 'context'
    case 50294:                     // 'element' 'context'
    case 50355:                     // 'namespace' 'context'
    case 50385:                     // 'processing-instruction' 'context'
    case 50767:                     // 'attribute' 'continue'
    case 50806:                     // 'element' 'continue'
    case 50867:                     // 'namespace' 'continue'
    case 50897:                     // 'processing-instruction' 'continue'
    case 51279:                     // 'attribute' 'copy'
    case 51318:                     // 'element' 'copy'
    case 51379:                     // 'namespace' 'copy'
    case 51409:                     // 'processing-instruction' 'copy'
    case 51791:                     // 'attribute' 'copy-namespaces'
    case 51830:                     // 'element' 'copy-namespaces'
    case 51891:                     // 'namespace' 'copy-namespaces'
    case 51921:                     // 'processing-instruction' 'copy-namespaces'
    case 52815:                     // 'attribute' 'decimal-format'
    case 52854:                     // 'element' 'decimal-format'
    case 52915:                     // 'namespace' 'decimal-format'
    case 52945:                     // 'processing-instruction' 'decimal-format'
    case 53839:                     // 'attribute' 'declare'
    case 53878:                     // 'element' 'declare'
    case 53939:                     // 'namespace' 'declare'
    case 53969:                     // 'processing-instruction' 'declare'
    case 54863:                     // 'attribute' 'delete'
    case 54902:                     // 'element' 'delete'
    case 54963:                     // 'namespace' 'delete'
    case 54993:                     // 'processing-instruction' 'delete'
    case 55375:                     // 'attribute' 'descendant'
    case 55414:                     // 'element' 'descendant'
    case 55475:                     // 'namespace' 'descendant'
    case 55505:                     // 'processing-instruction' 'descendant'
    case 55887:                     // 'attribute' 'descendant-or-self'
    case 55926:                     // 'element' 'descendant-or-self'
    case 55987:                     // 'namespace' 'descendant-or-self'
    case 56017:                     // 'processing-instruction' 'descendant-or-self'
    case 59471:                     // 'attribute' 'document'
    case 59510:                     // 'element' 'document'
    case 59571:                     // 'namespace' 'document'
    case 59601:                     // 'processing-instruction' 'document'
    case 59983:                     // 'attribute' 'document-node'
    case 60022:                     // 'element' 'document-node'
    case 60083:                     // 'namespace' 'document-node'
    case 60113:                     // 'processing-instruction' 'document-node'
    case 60495:                     // 'attribute' 'element'
    case 60534:                     // 'element' 'element'
    case 60595:                     // 'namespace' 'element'
    case 60625:                     // 'processing-instruction' 'element'
    case 62031:                     // 'attribute' 'empty-sequence'
    case 62070:                     // 'element' 'empty-sequence'
    case 62131:                     // 'namespace' 'empty-sequence'
    case 62161:                     // 'processing-instruction' 'empty-sequence'
    case 62543:                     // 'attribute' 'encoding'
    case 62582:                     // 'element' 'encoding'
    case 62643:                     // 'namespace' 'encoding'
    case 62673:                     // 'processing-instruction' 'encoding'
    case 64591:                     // 'attribute' 'every'
    case 64630:                     // 'element' 'every'
    case 64691:                     // 'namespace' 'every'
    case 64721:                     // 'processing-instruction' 'every'
    case 66127:                     // 'attribute' 'exit'
    case 66166:                     // 'element' 'exit'
    case 66227:                     // 'namespace' 'exit'
    case 66257:                     // 'processing-instruction' 'exit'
    case 66639:                     // 'attribute' 'external'
    case 66678:                     // 'element' 'external'
    case 66739:                     // 'namespace' 'external'
    case 66769:                     // 'processing-instruction' 'external'
    case 67151:                     // 'attribute' 'first'
    case 67190:                     // 'element' 'first'
    case 67251:                     // 'namespace' 'first'
    case 67281:                     // 'processing-instruction' 'first'
    case 67663:                     // 'attribute' 'following'
    case 67702:                     // 'element' 'following'
    case 67763:                     // 'namespace' 'following'
    case 67793:                     // 'processing-instruction' 'following'
    case 68175:                     // 'attribute' 'following-sibling'
    case 68214:                     // 'element' 'following-sibling'
    case 68275:                     // 'namespace' 'following-sibling'
    case 68305:                     // 'processing-instruction' 'following-sibling'
    case 70735:                     // 'attribute' 'ft-option'
    case 70774:                     // 'element' 'ft-option'
    case 70835:                     // 'namespace' 'ft-option'
    case 70865:                     // 'processing-instruction' 'ft-option'
    case 72783:                     // 'attribute' 'function'
    case 72822:                     // 'element' 'function'
    case 72883:                     // 'namespace' 'function'
    case 72913:                     // 'processing-instruction' 'function'
    case 76367:                     // 'attribute' 'if'
    case 76406:                     // 'element' 'if'
    case 76467:                     // 'namespace' 'if'
    case 76497:                     // 'processing-instruction' 'if'
    case 76879:                     // 'attribute' 'import'
    case 76918:                     // 'element' 'import'
    case 76979:                     // 'namespace' 'import'
    case 77009:                     // 'processing-instruction' 'import'
    case 77391:                     // 'attribute' 'in'
    case 77430:                     // 'element' 'in'
    case 77491:                     // 'namespace' 'in'
    case 77521:                     // 'processing-instruction' 'in'
    case 77903:                     // 'attribute' 'index'
    case 77942:                     // 'element' 'index'
    case 78003:                     // 'namespace' 'index'
    case 78033:                     // 'processing-instruction' 'index'
    case 79951:                     // 'attribute' 'insert'
    case 79990:                     // 'element' 'insert'
    case 80051:                     // 'namespace' 'insert'
    case 80081:                     // 'processing-instruction' 'insert'
    case 80975:                     // 'attribute' 'integrity'
    case 81014:                     // 'element' 'integrity'
    case 81075:                     // 'namespace' 'integrity'
    case 81105:                     // 'processing-instruction' 'integrity'
    case 83023:                     // 'attribute' 'item'
    case 83062:                     // 'element' 'item'
    case 83123:                     // 'namespace' 'item'
    case 83153:                     // 'processing-instruction' 'item'
    case 84559:                     // 'attribute' 'last'
    case 84598:                     // 'element' 'last'
    case 84659:                     // 'namespace' 'last'
    case 84689:                     // 'processing-instruction' 'last'
    case 85071:                     // 'attribute' 'lax'
    case 85110:                     // 'element' 'lax'
    case 85171:                     // 'namespace' 'lax'
    case 85201:                     // 'processing-instruction' 'lax'
    case 87631:                     // 'attribute' 'loop'
    case 87670:                     // 'element' 'loop'
    case 87731:                     // 'namespace' 'loop'
    case 87761:                     // 'processing-instruction' 'loop'
    case 90703:                     // 'attribute' 'module'
    case 90742:                     // 'element' 'module'
    case 90803:                     // 'namespace' 'module'
    case 90833:                     // 'processing-instruction' 'module'
    case 91727:                     // 'attribute' 'namespace'
    case 91766:                     // 'element' 'namespace'
    case 91827:                     // 'namespace' 'namespace'
    case 91857:                     // 'processing-instruction' 'namespace'
    case 92239:                     // 'attribute' 'namespace-node'
    case 92278:                     // 'element' 'namespace-node'
    case 92339:                     // 'namespace' 'namespace-node'
    case 92369:                     // 'processing-instruction' 'namespace-node'
    case 95311:                     // 'attribute' 'node'
    case 95350:                     // 'element' 'node'
    case 95411:                     // 'namespace' 'node'
    case 95441:                     // 'processing-instruction' 'node'
    case 95823:                     // 'attribute' 'nodes'
    case 95862:                     // 'element' 'nodes'
    case 95923:                     // 'namespace' 'nodes'
    case 95953:                     // 'processing-instruction' 'nodes'
    case 98895:                     // 'attribute' 'option'
    case 98934:                     // 'element' 'option'
    case 98995:                     // 'namespace' 'option'
    case 99025:                     // 'processing-instruction' 'option'
    case 100431:                    // 'attribute' 'ordered'
    case 100470:                    // 'element' 'ordered'
    case 100531:                    // 'namespace' 'ordered'
    case 100561:                    // 'processing-instruction' 'ordered'
    case 100943:                    // 'attribute' 'ordering'
    case 100982:                    // 'element' 'ordering'
    case 101043:                    // 'namespace' 'ordering'
    case 101073:                    // 'processing-instruction' 'ordering'
    case 102479:                    // 'attribute' 'parent'
    case 102518:                    // 'element' 'parent'
    case 102579:                    // 'namespace' 'parent'
    case 102609:                    // 'processing-instruction' 'parent'
    case 105039:                    // 'attribute' 'preceding'
    case 105078:                    // 'element' 'preceding'
    case 105139:                    // 'namespace' 'preceding'
    case 105169:                    // 'processing-instruction' 'preceding'
    case 105551:                    // 'attribute' 'preceding-sibling'
    case 105590:                    // 'element' 'preceding-sibling'
    case 105651:                    // 'namespace' 'preceding-sibling'
    case 105681:                    // 'processing-instruction' 'preceding-sibling'
    case 107087:                    // 'attribute' 'processing-instruction'
    case 107126:                    // 'element' 'processing-instruction'
    case 107187:                    // 'namespace' 'processing-instruction'
    case 107217:                    // 'processing-instruction' 'processing-instruction'
    case 108111:                    // 'attribute' 'rename'
    case 108150:                    // 'element' 'rename'
    case 108211:                    // 'namespace' 'rename'
    case 108241:                    // 'processing-instruction' 'rename'
    case 108623:                    // 'attribute' 'replace'
    case 108662:                    // 'element' 'replace'
    case 108723:                    // 'namespace' 'replace'
    case 108753:                    // 'processing-instruction' 'replace'
    case 109647:                    // 'attribute' 'returning'
    case 109686:                    // 'element' 'returning'
    case 109747:                    // 'namespace' 'returning'
    case 109777:                    // 'processing-instruction' 'returning'
    case 110159:                    // 'attribute' 'revalidation'
    case 110198:                    // 'element' 'revalidation'
    case 110259:                    // 'namespace' 'revalidation'
    case 110289:                    // 'processing-instruction' 'revalidation'
    case 111695:                    // 'attribute' 'schema'
    case 111734:                    // 'element' 'schema'
    case 111795:                    // 'namespace' 'schema'
    case 111825:                    // 'processing-instruction' 'schema'
    case 112207:                    // 'attribute' 'schema-attribute'
    case 112246:                    // 'element' 'schema-attribute'
    case 112307:                    // 'namespace' 'schema-attribute'
    case 112337:                    // 'processing-instruction' 'schema-attribute'
    case 112719:                    // 'attribute' 'schema-element'
    case 112758:                    // 'element' 'schema-element'
    case 112819:                    // 'namespace' 'schema-element'
    case 112849:                    // 'processing-instruction' 'schema-element'
    case 113231:                    // 'attribute' 'score'
    case 113270:                    // 'element' 'score'
    case 113331:                    // 'namespace' 'score'
    case 113361:                    // 'processing-instruction' 'score'
    case 113743:                    // 'attribute' 'self'
    case 113782:                    // 'element' 'self'
    case 113843:                    // 'namespace' 'self'
    case 113873:                    // 'processing-instruction' 'self'
    case 116303:                    // 'attribute' 'sliding'
    case 116342:                    // 'element' 'sliding'
    case 116403:                    // 'namespace' 'sliding'
    case 116433:                    // 'processing-instruction' 'sliding'
    case 116815:                    // 'attribute' 'some'
    case 116854:                    // 'element' 'some'
    case 116915:                    // 'namespace' 'some'
    case 116945:                    // 'processing-instruction' 'some'
    case 119375:                    // 'attribute' 'strict'
    case 119414:                    // 'element' 'strict'
    case 119475:                    // 'namespace' 'strict'
    case 119505:                    // 'processing-instruction' 'strict'
    case 120399:                    // 'attribute' 'switch'
    case 120438:                    // 'element' 'switch'
    case 120499:                    // 'namespace' 'switch'
    case 120529:                    // 'processing-instruction' 'switch'
    case 120911:                    // 'attribute' 'text'
    case 120950:                    // 'element' 'text'
    case 121011:                    // 'namespace' 'text'
    case 121041:                    // 'processing-instruction' 'text'
    case 123983:                    // 'attribute' 'try'
    case 124022:                    // 'element' 'try'
    case 124083:                    // 'namespace' 'try'
    case 124113:                    // 'processing-instruction' 'try'
    case 124495:                    // 'attribute' 'tumbling'
    case 124534:                    // 'element' 'tumbling'
    case 124595:                    // 'namespace' 'tumbling'
    case 124625:                    // 'processing-instruction' 'tumbling'
    case 125007:                    // 'attribute' 'type'
    case 125046:                    // 'element' 'type'
    case 125107:                    // 'namespace' 'type'
    case 125137:                    // 'processing-instruction' 'type'
    case 125519:                    // 'attribute' 'typeswitch'
    case 125558:                    // 'element' 'typeswitch'
    case 125619:                    // 'namespace' 'typeswitch'
    case 125649:                    // 'processing-instruction' 'typeswitch'
    case 127055:                    // 'attribute' 'unordered'
    case 127094:                    // 'element' 'unordered'
    case 127155:                    // 'namespace' 'unordered'
    case 127185:                    // 'processing-instruction' 'unordered'
    case 127567:                    // 'attribute' 'updating'
    case 127606:                    // 'element' 'updating'
    case 127667:                    // 'namespace' 'updating'
    case 127697:                    // 'processing-instruction' 'updating'
    case 129103:                    // 'attribute' 'validate'
    case 129142:                    // 'element' 'validate'
    case 129203:                    // 'namespace' 'validate'
    case 129233:                    // 'processing-instruction' 'validate'
    case 129615:                    // 'attribute' 'value'
    case 129654:                    // 'element' 'value'
    case 129715:                    // 'namespace' 'value'
    case 129745:                    // 'processing-instruction' 'value'
    case 130127:                    // 'attribute' 'variable'
    case 130166:                    // 'element' 'variable'
    case 130227:                    // 'namespace' 'variable'
    case 130257:                    // 'processing-instruction' 'variable'
    case 130639:                    // 'attribute' 'version'
    case 130678:                    // 'element' 'version'
    case 130739:                    // 'namespace' 'version'
    case 130769:                    // 'processing-instruction' 'version'
    case 132687:                    // 'attribute' 'while'
    case 132726:                    // 'element' 'while'
    case 132787:                    // 'namespace' 'while'
    case 132817:                    // 'processing-instruction' 'while'
    case 136271:                    // 'attribute' 'xquery'
    case 136310:                    // 'element' 'xquery'
    case 136371:                    // 'namespace' 'xquery'
    case 136401:                    // 'processing-instruction' 'xquery'
    case 137295:                    // 'attribute' '{'
    case 137309:                    // 'comment' '{'
    case 137332:                    // 'document' '{'
    case 137334:                    // 'element' '{'
    case 137395:                    // 'namespace' '{'
    case 137412:                    // 'ordered' '{'
    case 137425:                    // 'processing-instruction' '{'
    case 137452:                    // 'text' '{'
    case 137464:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  private void try_StepExpr()
  {
    switch (l1)
    {
    case 79:                        // 'attribute'
      lookahead2W(274);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 118:                       // 'element'
      lookahead2W(272);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 179:                       // 'namespace'
    case 209:                       // 'processing-instruction'
      lookahead2W(273);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 93:                        // 'comment'
    case 116:                       // 'document'
    case 196:                       // 'ordered'
    case 236:                       // 'text'
    case 248:                       // 'unordered'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}'
      break;
    case 121:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 162:                       // 'item'
    case 235:                       // 'switch'
    case 245:                       // 'typeswitch'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 90:                        // 'child'
    case 108:                       // 'descendant'
    case 109:                       // 'descendant-or-self'
    case 132:                       // 'following'
    case 133:                       // 'following-sibling'
    case 200:                       // 'parent'
    case 205:                       // 'preceding'
    case 206:                       // 'preceding-sibling'
    case 222:                       // 'self'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    case 6:                         // EQName^Token
    case 69:                        // 'after'
    case 71:                        // 'allowing'
    case 74:                        // 'and'
    case 76:                        // 'as'
    case 77:                        // 'ascending'
    case 78:                        // 'at'
    case 80:                        // 'base-uri'
    case 81:                        // 'before'
    case 82:                        // 'boundary-space'
    case 83:                        // 'break'
    case 85:                        // 'case'
    case 86:                        // 'cast'
    case 87:                        // 'castable'
    case 88:                        // 'catch'
    case 91:                        // 'collation'
    case 94:                        // 'constraint'
    case 95:                        // 'construction'
    case 98:                        // 'context'
    case 99:                        // 'continue'
    case 100:                       // 'copy'
    case 101:                       // 'copy-namespaces'
    case 102:                       // 'count'
    case 103:                       // 'decimal-format'
    case 105:                       // 'declare'
    case 106:                       // 'default'
    case 107:                       // 'delete'
    case 110:                       // 'descending'
    case 115:                       // 'div'
    case 117:                       // 'document-node'
    case 119:                       // 'else'
    case 120:                       // 'empty'
    case 122:                       // 'encoding'
    case 123:                       // 'end'
    case 125:                       // 'eq'
    case 126:                       // 'every'
    case 128:                       // 'except'
    case 129:                       // 'exit'
    case 130:                       // 'external'
    case 131:                       // 'first'
    case 134:                       // 'for'
    case 138:                       // 'ft-option'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 151:                       // 'in'
    case 152:                       // 'index'
    case 156:                       // 'insert'
    case 157:                       // 'instance'
    case 158:                       // 'integrity'
    case 159:                       // 'intersect'
    case 160:                       // 'into'
    case 161:                       // 'is'
    case 165:                       // 'last'
    case 166:                       // 'lax'
    case 167:                       // 'le'
    case 169:                       // 'let'
    case 171:                       // 'loop'
    case 173:                       // 'lt'
    case 175:                       // 'mod'
    case 176:                       // 'modify'
    case 177:                       // 'module'
    case 180:                       // 'namespace-node'
    case 181:                       // 'ne'
    case 186:                       // 'node'
    case 187:                       // 'nodes'
    case 192:                       // 'only'
    case 193:                       // 'option'
    case 194:                       // 'or'
    case 195:                       // 'order'
    case 197:                       // 'ordering'
    case 211:                       // 'rename'
    case 212:                       // 'replace'
    case 213:                       // 'return'
    case 214:                       // 'returning'
    case 215:                       // 'revalidation'
    case 217:                       // 'satisfies'
    case 218:                       // 'schema'
    case 219:                       // 'schema-attribute'
    case 220:                       // 'schema-element'
    case 221:                       // 'score'
    case 227:                       // 'sliding'
    case 228:                       // 'some'
    case 229:                       // 'stable'
    case 230:                       // 'start'
    case 233:                       // 'strict'
    case 240:                       // 'to'
    case 241:                       // 'treat'
    case 242:                       // 'try'
    case 243:                       // 'tumbling'
    case 244:                       // 'type'
    case 246:                       // 'union'
    case 249:                       // 'updating'
    case 252:                       // 'validate'
    case 253:                       // 'value'
    case 254:                       // 'variable'
    case 255:                       // 'version'
    case 258:                       // 'where'
    case 259:                       // 'while'
    case 262:                       // 'with'
    case 266:                       // 'xquery'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 35407                 // 'attribute' 'after'
     || lk == 35446                 // 'element' 'after'
     || lk == 35507                 // 'namespace' 'after'
     || lk == 35537                 // 'processing-instruction' 'after'
     || lk == 37967                 // 'attribute' 'and'
     || lk == 38006                 // 'element' 'and'
     || lk == 38067                 // 'namespace' 'and'
     || lk == 38097                 // 'processing-instruction' 'and'
     || lk == 38991                 // 'attribute' 'as'
     || lk == 39030                 // 'element' 'as'
     || lk == 39091                 // 'namespace' 'as'
     || lk == 39121                 // 'processing-instruction' 'as'
     || lk == 39503                 // 'attribute' 'ascending'
     || lk == 39542                 // 'element' 'ascending'
     || lk == 39603                 // 'namespace' 'ascending'
     || lk == 39633                 // 'processing-instruction' 'ascending'
     || lk == 41551                 // 'attribute' 'before'
     || lk == 41590                 // 'element' 'before'
     || lk == 41651                 // 'namespace' 'before'
     || lk == 41681                 // 'processing-instruction' 'before'
     || lk == 43599                 // 'attribute' 'case'
     || lk == 43638                 // 'element' 'case'
     || lk == 43699                 // 'namespace' 'case'
     || lk == 43729                 // 'processing-instruction' 'case'
     || lk == 44111                 // 'attribute' 'cast'
     || lk == 44150                 // 'element' 'cast'
     || lk == 44211                 // 'namespace' 'cast'
     || lk == 44241                 // 'processing-instruction' 'cast'
     || lk == 44623                 // 'attribute' 'castable'
     || lk == 44662                 // 'element' 'castable'
     || lk == 44723                 // 'namespace' 'castable'
     || lk == 44753                 // 'processing-instruction' 'castable'
     || lk == 46671                 // 'attribute' 'collation'
     || lk == 46710                 // 'element' 'collation'
     || lk == 46771                 // 'namespace' 'collation'
     || lk == 46801                 // 'processing-instruction' 'collation'
     || lk == 52303                 // 'attribute' 'count'
     || lk == 52342                 // 'element' 'count'
     || lk == 52403                 // 'namespace' 'count'
     || lk == 52433                 // 'processing-instruction' 'count'
     || lk == 54351                 // 'attribute' 'default'
     || lk == 54390                 // 'element' 'default'
     || lk == 54451                 // 'namespace' 'default'
     || lk == 54481                 // 'processing-instruction' 'default'
     || lk == 56399                 // 'attribute' 'descending'
     || lk == 56438                 // 'element' 'descending'
     || lk == 56499                 // 'namespace' 'descending'
     || lk == 56529                 // 'processing-instruction' 'descending'
     || lk == 58959                 // 'attribute' 'div'
     || lk == 58998                 // 'element' 'div'
     || lk == 59059                 // 'namespace' 'div'
     || lk == 59089                 // 'processing-instruction' 'div'
     || lk == 61007                 // 'attribute' 'else'
     || lk == 61046                 // 'element' 'else'
     || lk == 61107                 // 'namespace' 'else'
     || lk == 61137                 // 'processing-instruction' 'else'
     || lk == 61519                 // 'attribute' 'empty'
     || lk == 61558                 // 'element' 'empty'
     || lk == 61619                 // 'namespace' 'empty'
     || lk == 61649                 // 'processing-instruction' 'empty'
     || lk == 63055                 // 'attribute' 'end'
     || lk == 63094                 // 'element' 'end'
     || lk == 63155                 // 'namespace' 'end'
     || lk == 63185                 // 'processing-instruction' 'end'
     || lk == 64079                 // 'attribute' 'eq'
     || lk == 64118                 // 'element' 'eq'
     || lk == 64179                 // 'namespace' 'eq'
     || lk == 64209                 // 'processing-instruction' 'eq'
     || lk == 65615                 // 'attribute' 'except'
     || lk == 65654                 // 'element' 'except'
     || lk == 65715                 // 'namespace' 'except'
     || lk == 65745                 // 'processing-instruction' 'except'
     || lk == 68687                 // 'attribute' 'for'
     || lk == 68726                 // 'element' 'for'
     || lk == 68787                 // 'namespace' 'for'
     || lk == 68817                 // 'processing-instruction' 'for'
     || lk == 73295                 // 'attribute' 'ge'
     || lk == 73334                 // 'element' 'ge'
     || lk == 73395                 // 'namespace' 'ge'
     || lk == 73425                 // 'processing-instruction' 'ge'
     || lk == 74319                 // 'attribute' 'group'
     || lk == 74358                 // 'element' 'group'
     || lk == 74419                 // 'namespace' 'group'
     || lk == 74449                 // 'processing-instruction' 'group'
     || lk == 75343                 // 'attribute' 'gt'
     || lk == 75382                 // 'element' 'gt'
     || lk == 75443                 // 'namespace' 'gt'
     || lk == 75473                 // 'processing-instruction' 'gt'
     || lk == 75855                 // 'attribute' 'idiv'
     || lk == 75894                 // 'element' 'idiv'
     || lk == 75955                 // 'namespace' 'idiv'
     || lk == 75985                 // 'processing-instruction' 'idiv'
     || lk == 80463                 // 'attribute' 'instance'
     || lk == 80502                 // 'element' 'instance'
     || lk == 80563                 // 'namespace' 'instance'
     || lk == 80593                 // 'processing-instruction' 'instance'
     || lk == 81487                 // 'attribute' 'intersect'
     || lk == 81526                 // 'element' 'intersect'
     || lk == 81587                 // 'namespace' 'intersect'
     || lk == 81617                 // 'processing-instruction' 'intersect'
     || lk == 81999                 // 'attribute' 'into'
     || lk == 82038                 // 'element' 'into'
     || lk == 82099                 // 'namespace' 'into'
     || lk == 82129                 // 'processing-instruction' 'into'
     || lk == 82511                 // 'attribute' 'is'
     || lk == 82550                 // 'element' 'is'
     || lk == 82611                 // 'namespace' 'is'
     || lk == 82641                 // 'processing-instruction' 'is'
     || lk == 85583                 // 'attribute' 'le'
     || lk == 85622                 // 'element' 'le'
     || lk == 85683                 // 'namespace' 'le'
     || lk == 85713                 // 'processing-instruction' 'le'
     || lk == 86607                 // 'attribute' 'let'
     || lk == 86646                 // 'element' 'let'
     || lk == 86707                 // 'namespace' 'let'
     || lk == 86737                 // 'processing-instruction' 'let'
     || lk == 88655                 // 'attribute' 'lt'
     || lk == 88694                 // 'element' 'lt'
     || lk == 88755                 // 'namespace' 'lt'
     || lk == 88785                 // 'processing-instruction' 'lt'
     || lk == 89679                 // 'attribute' 'mod'
     || lk == 89718                 // 'element' 'mod'
     || lk == 89779                 // 'namespace' 'mod'
     || lk == 89809                 // 'processing-instruction' 'mod'
     || lk == 90191                 // 'attribute' 'modify'
     || lk == 90230                 // 'element' 'modify'
     || lk == 90291                 // 'namespace' 'modify'
     || lk == 90321                 // 'processing-instruction' 'modify'
     || lk == 92751                 // 'attribute' 'ne'
     || lk == 92790                 // 'element' 'ne'
     || lk == 92851                 // 'namespace' 'ne'
     || lk == 92881                 // 'processing-instruction' 'ne'
     || lk == 98383                 // 'attribute' 'only'
     || lk == 98422                 // 'element' 'only'
     || lk == 98483                 // 'namespace' 'only'
     || lk == 98513                 // 'processing-instruction' 'only'
     || lk == 99407                 // 'attribute' 'or'
     || lk == 99446                 // 'element' 'or'
     || lk == 99507                 // 'namespace' 'or'
     || lk == 99537                 // 'processing-instruction' 'or'
     || lk == 99919                 // 'attribute' 'order'
     || lk == 99958                 // 'element' 'order'
     || lk == 100019                // 'namespace' 'order'
     || lk == 100049                // 'processing-instruction' 'order'
     || lk == 109135                // 'attribute' 'return'
     || lk == 109174                // 'element' 'return'
     || lk == 109235                // 'namespace' 'return'
     || lk == 109265                // 'processing-instruction' 'return'
     || lk == 111183                // 'attribute' 'satisfies'
     || lk == 111222                // 'element' 'satisfies'
     || lk == 111283                // 'namespace' 'satisfies'
     || lk == 111313                // 'processing-instruction' 'satisfies'
     || lk == 117327                // 'attribute' 'stable'
     || lk == 117366                // 'element' 'stable'
     || lk == 117427                // 'namespace' 'stable'
     || lk == 117457                // 'processing-instruction' 'stable'
     || lk == 117839                // 'attribute' 'start'
     || lk == 117878                // 'element' 'start'
     || lk == 117939                // 'namespace' 'start'
     || lk == 117969                // 'processing-instruction' 'start'
     || lk == 122959                // 'attribute' 'to'
     || lk == 122998                // 'element' 'to'
     || lk == 123059                // 'namespace' 'to'
     || lk == 123089                // 'processing-instruction' 'to'
     || lk == 123471                // 'attribute' 'treat'
     || lk == 123510                // 'element' 'treat'
     || lk == 123571                // 'namespace' 'treat'
     || lk == 123601                // 'processing-instruction' 'treat'
     || lk == 126031                // 'attribute' 'union'
     || lk == 126070                // 'element' 'union'
     || lk == 126131                // 'namespace' 'union'
     || lk == 126161                // 'processing-instruction' 'union'
     || lk == 132175                // 'attribute' 'where'
     || lk == 132214                // 'element' 'where'
     || lk == 132275                // 'namespace' 'where'
     || lk == 132305                // 'processing-instruction' 'where'
     || lk == 134223                // 'attribute' 'with'
     || lk == 134262                // 'element' 'with'
     || lk == 134323                // 'namespace' 'with'
     || lk == 134353)               // 'processing-instruction' 'with'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (ParseException p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 58:                        // '<?'
    case 268:                       // '{'
    case 3151:                      // 'attribute' EQName^Token
    case 3190:                      // 'element' EQName^Token
    case 9907:                      // 'namespace' NCName^Token
    case 9937:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14917:                     // 'after' '#'
    case 14919:                     // 'allowing' '#'
    case 14920:                     // 'ancestor' '#'
    case 14921:                     // 'ancestor-or-self' '#'
    case 14922:                     // 'and' '#'
    case 14924:                     // 'as' '#'
    case 14925:                     // 'ascending' '#'
    case 14926:                     // 'at' '#'
    case 14927:                     // 'attribute' '#'
    case 14928:                     // 'base-uri' '#'
    case 14929:                     // 'before' '#'
    case 14930:                     // 'boundary-space' '#'
    case 14931:                     // 'break' '#'
    case 14933:                     // 'case' '#'
    case 14934:                     // 'cast' '#'
    case 14935:                     // 'castable' '#'
    case 14936:                     // 'catch' '#'
    case 14938:                     // 'child' '#'
    case 14939:                     // 'collation' '#'
    case 14941:                     // 'comment' '#'
    case 14942:                     // 'constraint' '#'
    case 14943:                     // 'construction' '#'
    case 14946:                     // 'context' '#'
    case 14947:                     // 'continue' '#'
    case 14948:                     // 'copy' '#'
    case 14949:                     // 'copy-namespaces' '#'
    case 14950:                     // 'count' '#'
    case 14951:                     // 'decimal-format' '#'
    case 14953:                     // 'declare' '#'
    case 14954:                     // 'default' '#'
    case 14955:                     // 'delete' '#'
    case 14956:                     // 'descendant' '#'
    case 14957:                     // 'descendant-or-self' '#'
    case 14958:                     // 'descending' '#'
    case 14963:                     // 'div' '#'
    case 14964:                     // 'document' '#'
    case 14965:                     // 'document-node' '#'
    case 14966:                     // 'element' '#'
    case 14967:                     // 'else' '#'
    case 14968:                     // 'empty' '#'
    case 14969:                     // 'empty-sequence' '#'
    case 14970:                     // 'encoding' '#'
    case 14971:                     // 'end' '#'
    case 14973:                     // 'eq' '#'
    case 14974:                     // 'every' '#'
    case 14976:                     // 'except' '#'
    case 14977:                     // 'exit' '#'
    case 14978:                     // 'external' '#'
    case 14979:                     // 'first' '#'
    case 14980:                     // 'following' '#'
    case 14981:                     // 'following-sibling' '#'
    case 14982:                     // 'for' '#'
    case 14986:                     // 'ft-option' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 14999:                     // 'in' '#'
    case 15000:                     // 'index' '#'
    case 15004:                     // 'insert' '#'
    case 15005:                     // 'instance' '#'
    case 15006:                     // 'integrity' '#'
    case 15007:                     // 'intersect' '#'
    case 15008:                     // 'into' '#'
    case 15009:                     // 'is' '#'
    case 15010:                     // 'item' '#'
    case 15013:                     // 'last' '#'
    case 15014:                     // 'lax' '#'
    case 15015:                     // 'le' '#'
    case 15017:                     // 'let' '#'
    case 15019:                     // 'loop' '#'
    case 15021:                     // 'lt' '#'
    case 15023:                     // 'mod' '#'
    case 15024:                     // 'modify' '#'
    case 15025:                     // 'module' '#'
    case 15027:                     // 'namespace' '#'
    case 15028:                     // 'namespace-node' '#'
    case 15029:                     // 'ne' '#'
    case 15034:                     // 'node' '#'
    case 15035:                     // 'nodes' '#'
    case 15040:                     // 'only' '#'
    case 15041:                     // 'option' '#'
    case 15042:                     // 'or' '#'
    case 15043:                     // 'order' '#'
    case 15044:                     // 'ordered' '#'
    case 15045:                     // 'ordering' '#'
    case 15048:                     // 'parent' '#'
    case 15053:                     // 'preceding' '#'
    case 15054:                     // 'preceding-sibling' '#'
    case 15057:                     // 'processing-instruction' '#'
    case 15059:                     // 'rename' '#'
    case 15060:                     // 'replace' '#'
    case 15061:                     // 'return' '#'
    case 15062:                     // 'returning' '#'
    case 15063:                     // 'revalidation' '#'
    case 15065:                     // 'satisfies' '#'
    case 15066:                     // 'schema' '#'
    case 15067:                     // 'schema-attribute' '#'
    case 15068:                     // 'schema-element' '#'
    case 15069:                     // 'score' '#'
    case 15070:                     // 'self' '#'
    case 15075:                     // 'sliding' '#'
    case 15076:                     // 'some' '#'
    case 15077:                     // 'stable' '#'
    case 15078:                     // 'start' '#'
    case 15081:                     // 'strict' '#'
    case 15083:                     // 'switch' '#'
    case 15084:                     // 'text' '#'
    case 15088:                     // 'to' '#'
    case 15089:                     // 'treat' '#'
    case 15090:                     // 'try' '#'
    case 15091:                     // 'tumbling' '#'
    case 15092:                     // 'type' '#'
    case 15093:                     // 'typeswitch' '#'
    case 15094:                     // 'union' '#'
    case 15096:                     // 'unordered' '#'
    case 15097:                     // 'updating' '#'
    case 15100:                     // 'validate' '#'
    case 15101:                     // 'value' '#'
    case 15102:                     // 'variable' '#'
    case 15103:                     // 'version' '#'
    case 15106:                     // 'where' '#'
    case 15107:                     // 'while' '#'
    case 15110:                     // 'with' '#'
    case 15114:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17477:                     // 'after' '('
    case 17479:                     // 'allowing' '('
    case 17480:                     // 'ancestor' '('
    case 17481:                     // 'ancestor-or-self' '('
    case 17482:                     // 'and' '('
    case 17484:                     // 'as' '('
    case 17485:                     // 'ascending' '('
    case 17486:                     // 'at' '('
    case 17488:                     // 'base-uri' '('
    case 17489:                     // 'before' '('
    case 17490:                     // 'boundary-space' '('
    case 17491:                     // 'break' '('
    case 17493:                     // 'case' '('
    case 17494:                     // 'cast' '('
    case 17495:                     // 'castable' '('
    case 17496:                     // 'catch' '('
    case 17498:                     // 'child' '('
    case 17499:                     // 'collation' '('
    case 17502:                     // 'constraint' '('
    case 17503:                     // 'construction' '('
    case 17506:                     // 'context' '('
    case 17507:                     // 'continue' '('
    case 17508:                     // 'copy' '('
    case 17509:                     // 'copy-namespaces' '('
    case 17510:                     // 'count' '('
    case 17511:                     // 'decimal-format' '('
    case 17513:                     // 'declare' '('
    case 17514:                     // 'default' '('
    case 17515:                     // 'delete' '('
    case 17516:                     // 'descendant' '('
    case 17517:                     // 'descendant-or-self' '('
    case 17518:                     // 'descending' '('
    case 17523:                     // 'div' '('
    case 17524:                     // 'document' '('
    case 17527:                     // 'else' '('
    case 17528:                     // 'empty' '('
    case 17530:                     // 'encoding' '('
    case 17531:                     // 'end' '('
    case 17533:                     // 'eq' '('
    case 17534:                     // 'every' '('
    case 17536:                     // 'except' '('
    case 17537:                     // 'exit' '('
    case 17538:                     // 'external' '('
    case 17539:                     // 'first' '('
    case 17540:                     // 'following' '('
    case 17541:                     // 'following-sibling' '('
    case 17542:                     // 'for' '('
    case 17546:                     // 'ft-option' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17559:                     // 'in' '('
    case 17560:                     // 'index' '('
    case 17564:                     // 'insert' '('
    case 17565:                     // 'instance' '('
    case 17566:                     // 'integrity' '('
    case 17567:                     // 'intersect' '('
    case 17568:                     // 'into' '('
    case 17569:                     // 'is' '('
    case 17573:                     // 'last' '('
    case 17574:                     // 'lax' '('
    case 17575:                     // 'le' '('
    case 17577:                     // 'let' '('
    case 17579:                     // 'loop' '('
    case 17581:                     // 'lt' '('
    case 17583:                     // 'mod' '('
    case 17584:                     // 'modify' '('
    case 17585:                     // 'module' '('
    case 17587:                     // 'namespace' '('
    case 17589:                     // 'ne' '('
    case 17595:                     // 'nodes' '('
    case 17600:                     // 'only' '('
    case 17601:                     // 'option' '('
    case 17602:                     // 'or' '('
    case 17603:                     // 'order' '('
    case 17604:                     // 'ordered' '('
    case 17605:                     // 'ordering' '('
    case 17608:                     // 'parent' '('
    case 17613:                     // 'preceding' '('
    case 17614:                     // 'preceding-sibling' '('
    case 17619:                     // 'rename' '('
    case 17620:                     // 'replace' '('
    case 17621:                     // 'return' '('
    case 17622:                     // 'returning' '('
    case 17623:                     // 'revalidation' '('
    case 17625:                     // 'satisfies' '('
    case 17626:                     // 'schema' '('
    case 17629:                     // 'score' '('
    case 17630:                     // 'self' '('
    case 17635:                     // 'sliding' '('
    case 17636:                     // 'some' '('
    case 17637:                     // 'stable' '('
    case 17638:                     // 'start' '('
    case 17641:                     // 'strict' '('
    case 17648:                     // 'to' '('
    case 17649:                     // 'treat' '('
    case 17650:                     // 'try' '('
    case 17651:                     // 'tumbling' '('
    case 17652:                     // 'type' '('
    case 17654:                     // 'union' '('
    case 17656:                     // 'unordered' '('
    case 17657:                     // 'updating' '('
    case 17660:                     // 'validate' '('
    case 17661:                     // 'value' '('
    case 17662:                     // 'variable' '('
    case 17663:                     // 'version' '('
    case 17666:                     // 'where' '('
    case 17667:                     // 'while' '('
    case 17670:                     // 'with' '('
    case 17674:                     // 'xquery' '('
    case 36431:                     // 'attribute' 'allowing'
    case 36470:                     // 'element' 'allowing'
    case 36531:                     // 'namespace' 'allowing'
    case 36561:                     // 'processing-instruction' 'allowing'
    case 36943:                     // 'attribute' 'ancestor'
    case 36982:                     // 'element' 'ancestor'
    case 37043:                     // 'namespace' 'ancestor'
    case 37073:                     // 'processing-instruction' 'ancestor'
    case 37455:                     // 'attribute' 'ancestor-or-self'
    case 37494:                     // 'element' 'ancestor-or-self'
    case 37555:                     // 'namespace' 'ancestor-or-self'
    case 37585:                     // 'processing-instruction' 'ancestor-or-self'
    case 40015:                     // 'attribute' 'at'
    case 40054:                     // 'element' 'at'
    case 40115:                     // 'namespace' 'at'
    case 40145:                     // 'processing-instruction' 'at'
    case 40527:                     // 'attribute' 'attribute'
    case 40566:                     // 'element' 'attribute'
    case 40627:                     // 'namespace' 'attribute'
    case 40657:                     // 'processing-instruction' 'attribute'
    case 41039:                     // 'attribute' 'base-uri'
    case 41078:                     // 'element' 'base-uri'
    case 41139:                     // 'namespace' 'base-uri'
    case 41169:                     // 'processing-instruction' 'base-uri'
    case 42063:                     // 'attribute' 'boundary-space'
    case 42102:                     // 'element' 'boundary-space'
    case 42163:                     // 'namespace' 'boundary-space'
    case 42193:                     // 'processing-instruction' 'boundary-space'
    case 42575:                     // 'attribute' 'break'
    case 42614:                     // 'element' 'break'
    case 42675:                     // 'namespace' 'break'
    case 42705:                     // 'processing-instruction' 'break'
    case 45135:                     // 'attribute' 'catch'
    case 45174:                     // 'element' 'catch'
    case 45235:                     // 'namespace' 'catch'
    case 45265:                     // 'processing-instruction' 'catch'
    case 46159:                     // 'attribute' 'child'
    case 46198:                     // 'element' 'child'
    case 46259:                     // 'namespace' 'child'
    case 46289:                     // 'processing-instruction' 'child'
    case 47695:                     // 'attribute' 'comment'
    case 47734:                     // 'element' 'comment'
    case 47795:                     // 'namespace' 'comment'
    case 47825:                     // 'processing-instruction' 'comment'
    case 48207:                     // 'attribute' 'constraint'
    case 48246:                     // 'element' 'constraint'
    case 48307:                     // 'namespace' 'constraint'
    case 48337:                     // 'processing-instruction' 'constraint'
    case 48719:                     // 'attribute' 'construction'
    case 48758:                     // 'element' 'construction'
    case 48819:                     // 'namespace' 'construction'
    case 48849:                     // 'processing-instruction' 'construction'
    case 50255:                     // 'attribute' 'context'
    case 50294:                     // 'element' 'context'
    case 50355:                     // 'namespace' 'context'
    case 50385:                     // 'processing-instruction' 'context'
    case 50767:                     // 'attribute' 'continue'
    case 50806:                     // 'element' 'continue'
    case 50867:                     // 'namespace' 'continue'
    case 50897:                     // 'processing-instruction' 'continue'
    case 51279:                     // 'attribute' 'copy'
    case 51318:                     // 'element' 'copy'
    case 51379:                     // 'namespace' 'copy'
    case 51409:                     // 'processing-instruction' 'copy'
    case 51791:                     // 'attribute' 'copy-namespaces'
    case 51830:                     // 'element' 'copy-namespaces'
    case 51891:                     // 'namespace' 'copy-namespaces'
    case 51921:                     // 'processing-instruction' 'copy-namespaces'
    case 52815:                     // 'attribute' 'decimal-format'
    case 52854:                     // 'element' 'decimal-format'
    case 52915:                     // 'namespace' 'decimal-format'
    case 52945:                     // 'processing-instruction' 'decimal-format'
    case 53839:                     // 'attribute' 'declare'
    case 53878:                     // 'element' 'declare'
    case 53939:                     // 'namespace' 'declare'
    case 53969:                     // 'processing-instruction' 'declare'
    case 54863:                     // 'attribute' 'delete'
    case 54902:                     // 'element' 'delete'
    case 54963:                     // 'namespace' 'delete'
    case 54993:                     // 'processing-instruction' 'delete'
    case 55375:                     // 'attribute' 'descendant'
    case 55414:                     // 'element' 'descendant'
    case 55475:                     // 'namespace' 'descendant'
    case 55505:                     // 'processing-instruction' 'descendant'
    case 55887:                     // 'attribute' 'descendant-or-self'
    case 55926:                     // 'element' 'descendant-or-self'
    case 55987:                     // 'namespace' 'descendant-or-self'
    case 56017:                     // 'processing-instruction' 'descendant-or-self'
    case 59471:                     // 'attribute' 'document'
    case 59510:                     // 'element' 'document'
    case 59571:                     // 'namespace' 'document'
    case 59601:                     // 'processing-instruction' 'document'
    case 59983:                     // 'attribute' 'document-node'
    case 60022:                     // 'element' 'document-node'
    case 60083:                     // 'namespace' 'document-node'
    case 60113:                     // 'processing-instruction' 'document-node'
    case 60495:                     // 'attribute' 'element'
    case 60534:                     // 'element' 'element'
    case 60595:                     // 'namespace' 'element'
    case 60625:                     // 'processing-instruction' 'element'
    case 62031:                     // 'attribute' 'empty-sequence'
    case 62070:                     // 'element' 'empty-sequence'
    case 62131:                     // 'namespace' 'empty-sequence'
    case 62161:                     // 'processing-instruction' 'empty-sequence'
    case 62543:                     // 'attribute' 'encoding'
    case 62582:                     // 'element' 'encoding'
    case 62643:                     // 'namespace' 'encoding'
    case 62673:                     // 'processing-instruction' 'encoding'
    case 64591:                     // 'attribute' 'every'
    case 64630:                     // 'element' 'every'
    case 64691:                     // 'namespace' 'every'
    case 64721:                     // 'processing-instruction' 'every'
    case 66127:                     // 'attribute' 'exit'
    case 66166:                     // 'element' 'exit'
    case 66227:                     // 'namespace' 'exit'
    case 66257:                     // 'processing-instruction' 'exit'
    case 66639:                     // 'attribute' 'external'
    case 66678:                     // 'element' 'external'
    case 66739:                     // 'namespace' 'external'
    case 66769:                     // 'processing-instruction' 'external'
    case 67151:                     // 'attribute' 'first'
    case 67190:                     // 'element' 'first'
    case 67251:                     // 'namespace' 'first'
    case 67281:                     // 'processing-instruction' 'first'
    case 67663:                     // 'attribute' 'following'
    case 67702:                     // 'element' 'following'
    case 67763:                     // 'namespace' 'following'
    case 67793:                     // 'processing-instruction' 'following'
    case 68175:                     // 'attribute' 'following-sibling'
    case 68214:                     // 'element' 'following-sibling'
    case 68275:                     // 'namespace' 'following-sibling'
    case 68305:                     // 'processing-instruction' 'following-sibling'
    case 70735:                     // 'attribute' 'ft-option'
    case 70774:                     // 'element' 'ft-option'
    case 70835:                     // 'namespace' 'ft-option'
    case 70865:                     // 'processing-instruction' 'ft-option'
    case 72783:                     // 'attribute' 'function'
    case 72822:                     // 'element' 'function'
    case 72883:                     // 'namespace' 'function'
    case 72913:                     // 'processing-instruction' 'function'
    case 76367:                     // 'attribute' 'if'
    case 76406:                     // 'element' 'if'
    case 76467:                     // 'namespace' 'if'
    case 76497:                     // 'processing-instruction' 'if'
    case 76879:                     // 'attribute' 'import'
    case 76918:                     // 'element' 'import'
    case 76979:                     // 'namespace' 'import'
    case 77009:                     // 'processing-instruction' 'import'
    case 77391:                     // 'attribute' 'in'
    case 77430:                     // 'element' 'in'
    case 77491:                     // 'namespace' 'in'
    case 77521:                     // 'processing-instruction' 'in'
    case 77903:                     // 'attribute' 'index'
    case 77942:                     // 'element' 'index'
    case 78003:                     // 'namespace' 'index'
    case 78033:                     // 'processing-instruction' 'index'
    case 79951:                     // 'attribute' 'insert'
    case 79990:                     // 'element' 'insert'
    case 80051:                     // 'namespace' 'insert'
    case 80081:                     // 'processing-instruction' 'insert'
    case 80975:                     // 'attribute' 'integrity'
    case 81014:                     // 'element' 'integrity'
    case 81075:                     // 'namespace' 'integrity'
    case 81105:                     // 'processing-instruction' 'integrity'
    case 83023:                     // 'attribute' 'item'
    case 83062:                     // 'element' 'item'
    case 83123:                     // 'namespace' 'item'
    case 83153:                     // 'processing-instruction' 'item'
    case 84559:                     // 'attribute' 'last'
    case 84598:                     // 'element' 'last'
    case 84659:                     // 'namespace' 'last'
    case 84689:                     // 'processing-instruction' 'last'
    case 85071:                     // 'attribute' 'lax'
    case 85110:                     // 'element' 'lax'
    case 85171:                     // 'namespace' 'lax'
    case 85201:                     // 'processing-instruction' 'lax'
    case 87631:                     // 'attribute' 'loop'
    case 87670:                     // 'element' 'loop'
    case 87731:                     // 'namespace' 'loop'
    case 87761:                     // 'processing-instruction' 'loop'
    case 90703:                     // 'attribute' 'module'
    case 90742:                     // 'element' 'module'
    case 90803:                     // 'namespace' 'module'
    case 90833:                     // 'processing-instruction' 'module'
    case 91727:                     // 'attribute' 'namespace'
    case 91766:                     // 'element' 'namespace'
    case 91827:                     // 'namespace' 'namespace'
    case 91857:                     // 'processing-instruction' 'namespace'
    case 92239:                     // 'attribute' 'namespace-node'
    case 92278:                     // 'element' 'namespace-node'
    case 92339:                     // 'namespace' 'namespace-node'
    case 92369:                     // 'processing-instruction' 'namespace-node'
    case 95311:                     // 'attribute' 'node'
    case 95350:                     // 'element' 'node'
    case 95411:                     // 'namespace' 'node'
    case 95441:                     // 'processing-instruction' 'node'
    case 95823:                     // 'attribute' 'nodes'
    case 95862:                     // 'element' 'nodes'
    case 95923:                     // 'namespace' 'nodes'
    case 95953:                     // 'processing-instruction' 'nodes'
    case 98895:                     // 'attribute' 'option'
    case 98934:                     // 'element' 'option'
    case 98995:                     // 'namespace' 'option'
    case 99025:                     // 'processing-instruction' 'option'
    case 100431:                    // 'attribute' 'ordered'
    case 100470:                    // 'element' 'ordered'
    case 100531:                    // 'namespace' 'ordered'
    case 100561:                    // 'processing-instruction' 'ordered'
    case 100943:                    // 'attribute' 'ordering'
    case 100982:                    // 'element' 'ordering'
    case 101043:                    // 'namespace' 'ordering'
    case 101073:                    // 'processing-instruction' 'ordering'
    case 102479:                    // 'attribute' 'parent'
    case 102518:                    // 'element' 'parent'
    case 102579:                    // 'namespace' 'parent'
    case 102609:                    // 'processing-instruction' 'parent'
    case 105039:                    // 'attribute' 'preceding'
    case 105078:                    // 'element' 'preceding'
    case 105139:                    // 'namespace' 'preceding'
    case 105169:                    // 'processing-instruction' 'preceding'
    case 105551:                    // 'attribute' 'preceding-sibling'
    case 105590:                    // 'element' 'preceding-sibling'
    case 105651:                    // 'namespace' 'preceding-sibling'
    case 105681:                    // 'processing-instruction' 'preceding-sibling'
    case 107087:                    // 'attribute' 'processing-instruction'
    case 107126:                    // 'element' 'processing-instruction'
    case 107187:                    // 'namespace' 'processing-instruction'
    case 107217:                    // 'processing-instruction' 'processing-instruction'
    case 108111:                    // 'attribute' 'rename'
    case 108150:                    // 'element' 'rename'
    case 108211:                    // 'namespace' 'rename'
    case 108241:                    // 'processing-instruction' 'rename'
    case 108623:                    // 'attribute' 'replace'
    case 108662:                    // 'element' 'replace'
    case 108723:                    // 'namespace' 'replace'
    case 108753:                    // 'processing-instruction' 'replace'
    case 109647:                    // 'attribute' 'returning'
    case 109686:                    // 'element' 'returning'
    case 109747:                    // 'namespace' 'returning'
    case 109777:                    // 'processing-instruction' 'returning'
    case 110159:                    // 'attribute' 'revalidation'
    case 110198:                    // 'element' 'revalidation'
    case 110259:                    // 'namespace' 'revalidation'
    case 110289:                    // 'processing-instruction' 'revalidation'
    case 111695:                    // 'attribute' 'schema'
    case 111734:                    // 'element' 'schema'
    case 111795:                    // 'namespace' 'schema'
    case 111825:                    // 'processing-instruction' 'schema'
    case 112207:                    // 'attribute' 'schema-attribute'
    case 112246:                    // 'element' 'schema-attribute'
    case 112307:                    // 'namespace' 'schema-attribute'
    case 112337:                    // 'processing-instruction' 'schema-attribute'
    case 112719:                    // 'attribute' 'schema-element'
    case 112758:                    // 'element' 'schema-element'
    case 112819:                    // 'namespace' 'schema-element'
    case 112849:                    // 'processing-instruction' 'schema-element'
    case 113231:                    // 'attribute' 'score'
    case 113270:                    // 'element' 'score'
    case 113331:                    // 'namespace' 'score'
    case 113361:                    // 'processing-instruction' 'score'
    case 113743:                    // 'attribute' 'self'
    case 113782:                    // 'element' 'self'
    case 113843:                    // 'namespace' 'self'
    case 113873:                    // 'processing-instruction' 'self'
    case 116303:                    // 'attribute' 'sliding'
    case 116342:                    // 'element' 'sliding'
    case 116403:                    // 'namespace' 'sliding'
    case 116433:                    // 'processing-instruction' 'sliding'
    case 116815:                    // 'attribute' 'some'
    case 116854:                    // 'element' 'some'
    case 116915:                    // 'namespace' 'some'
    case 116945:                    // 'processing-instruction' 'some'
    case 119375:                    // 'attribute' 'strict'
    case 119414:                    // 'element' 'strict'
    case 119475:                    // 'namespace' 'strict'
    case 119505:                    // 'processing-instruction' 'strict'
    case 120399:                    // 'attribute' 'switch'
    case 120438:                    // 'element' 'switch'
    case 120499:                    // 'namespace' 'switch'
    case 120529:                    // 'processing-instruction' 'switch'
    case 120911:                    // 'attribute' 'text'
    case 120950:                    // 'element' 'text'
    case 121011:                    // 'namespace' 'text'
    case 121041:                    // 'processing-instruction' 'text'
    case 123983:                    // 'attribute' 'try'
    case 124022:                    // 'element' 'try'
    case 124083:                    // 'namespace' 'try'
    case 124113:                    // 'processing-instruction' 'try'
    case 124495:                    // 'attribute' 'tumbling'
    case 124534:                    // 'element' 'tumbling'
    case 124595:                    // 'namespace' 'tumbling'
    case 124625:                    // 'processing-instruction' 'tumbling'
    case 125007:                    // 'attribute' 'type'
    case 125046:                    // 'element' 'type'
    case 125107:                    // 'namespace' 'type'
    case 125137:                    // 'processing-instruction' 'type'
    case 125519:                    // 'attribute' 'typeswitch'
    case 125558:                    // 'element' 'typeswitch'
    case 125619:                    // 'namespace' 'typeswitch'
    case 125649:                    // 'processing-instruction' 'typeswitch'
    case 127055:                    // 'attribute' 'unordered'
    case 127094:                    // 'element' 'unordered'
    case 127155:                    // 'namespace' 'unordered'
    case 127185:                    // 'processing-instruction' 'unordered'
    case 127567:                    // 'attribute' 'updating'
    case 127606:                    // 'element' 'updating'
    case 127667:                    // 'namespace' 'updating'
    case 127697:                    // 'processing-instruction' 'updating'
    case 129103:                    // 'attribute' 'validate'
    case 129142:                    // 'element' 'validate'
    case 129203:                    // 'namespace' 'validate'
    case 129233:                    // 'processing-instruction' 'validate'
    case 129615:                    // 'attribute' 'value'
    case 129654:                    // 'element' 'value'
    case 129715:                    // 'namespace' 'value'
    case 129745:                    // 'processing-instruction' 'value'
    case 130127:                    // 'attribute' 'variable'
    case 130166:                    // 'element' 'variable'
    case 130227:                    // 'namespace' 'variable'
    case 130257:                    // 'processing-instruction' 'variable'
    case 130639:                    // 'attribute' 'version'
    case 130678:                    // 'element' 'version'
    case 130739:                    // 'namespace' 'version'
    case 130769:                    // 'processing-instruction' 'version'
    case 132687:                    // 'attribute' 'while'
    case 132726:                    // 'element' 'while'
    case 132787:                    // 'namespace' 'while'
    case 132817:                    // 'processing-instruction' 'while'
    case 136271:                    // 'attribute' 'xquery'
    case 136310:                    // 'element' 'xquery'
    case 136371:                    // 'namespace' 'xquery'
    case 136401:                    // 'processing-instruction' 'xquery'
    case 137295:                    // 'attribute' '{'
    case 137309:                    // 'comment' '{'
    case 137332:                    // 'document' '{'
    case 137334:                    // 'element' '{'
    case 137395:                    // 'namespace' '{'
    case 137412:                    // 'ordered' '{'
    case 137425:                    // 'processing-instruction' '{'
    case 137452:                    // 'text' '{'
    case 137464:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  private void parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 200:                       // 'parent'
    case 205:                       // 'preceding'
    case 206:                       // 'preceding-sibling'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 25672:                     // 'ancestor' '::'
    case 25673:                     // 'ancestor-or-self' '::'
    case 25800:                     // 'parent' '::'
    case 25805:                     // 'preceding' '::'
    case 25806:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(232);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  private void try_AxisStep()
  {
    switch (l1)
    {
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 200:                       // 'parent'
    case 205:                       // 'preceding'
    case 206:                       // 'preceding-sibling'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 25672:                     // 'ancestor' '::'
    case 25673:                     // 'ancestor-or-self' '::'
    case 25800:                     // 'parent' '::'
    case 25805:                     // 'preceding' '::'
    case 25806:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(232);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
    try_PredicateList();
  }

  private void parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 79:                        // 'attribute'
      lookahead2W(238);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    case 90:                        // 'child'
    case 108:                       // 'descendant'
    case 109:                       // 'descendant-or-self'
    case 132:                       // 'following'
    case 133:                       // 'following-sibling'
    case 222:                       // 'self'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25679:                     // 'attribute' '::'
    case 25690:                     // 'child' '::'
    case 25708:                     // 'descendant' '::'
    case 25709:                     // 'descendant-or-self' '::'
    case 25732:                     // 'following' '::'
    case 25733:                     // 'following-sibling' '::'
    case 25822:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(247);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  private void try_ForwardStep()
  {
    switch (l1)
    {
    case 79:                        // 'attribute'
      lookahead2W(238);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    case 90:                        // 'child'
    case 108:                       // 'descendant'
    case 109:                       // 'descendant-or-self'
    case 132:                       // 'following'
    case 133:                       // 'following-sibling'
    case 222:                       // 'self'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25679:                     // 'attribute' '::'
    case 25690:                     // 'child' '::'
    case 25708:                     // 'descendant' '::'
    case 25709:                     // 'descendant-or-self' '::'
    case 25732:                     // 'following' '::'
    case 25733:                     // 'following-sibling' '::'
    case 25822:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(247);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  private void parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 90:                        // 'child'
      consume(90);                  // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 108:                       // 'descendant'
      consume(108);                 // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 79:                        // 'attribute'
      consume(79);                  // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 222:                       // 'self'
      consume(222);                 // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 109:                       // 'descendant-or-self'
      consume(109);                 // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 133:                       // 'following-sibling'
      consume(133);                 // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(132);                 // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  private void try_ForwardAxis()
  {
    switch (l1)
    {
    case 90:                        // 'child'
      consumeT(90);                 // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 108:                       // 'descendant'
      consumeT(108);                // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 79:                        // 'attribute'
      consumeT(79);                 // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 222:                       // 'self'
      consumeT(222);                // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 109:                       // 'descendant-or-self'
      consumeT(109);                // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 133:                       // 'following-sibling'
      consumeT(133);                // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(132);                // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  private void parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 65)                   // '@'
    {
      consume(65);                  // '@'
    }
    lookahead1W(247);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  private void try_AbbrevForwardStep()
  {
    if (l1 == 65)                   // '@'
    {
      consumeT(65);                 // '@'
    }
    lookahead1W(247);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_NodeTest();
  }

  private void parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 45:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(247);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  private void try_ReverseStep()
  {
    switch (l1)
    {
    case 45:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(247);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NodeTest();
    }
  }

  private void parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 200:                       // 'parent'
      consume(200);                 // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 72:                        // 'ancestor'
      consume(72);                  // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 206:                       // 'preceding-sibling'
      consume(206);                 // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 205:                       // 'preceding'
      consume(205);                 // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(73);                  // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  private void try_ReverseAxis()
  {
    switch (l1)
    {
    case 200:                       // 'parent'
      consumeT(200);                // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 72:                        // 'ancestor'
      consumeT(72);                 // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 206:                       // 'preceding-sibling'
      consumeT(206);                // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 205:                       // 'preceding'
      consumeT(205);                // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(73);                 // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  private void parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(45);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  private void try_AbbrevReverseStep()
  {
    consumeT(45);                   // '..'
  }

  private void parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 79:                        // 'attribute'
    case 93:                        // 'comment'
    case 117:                       // 'document-node'
    case 118:                       // 'element'
    case 180:                       // 'namespace-node'
    case 186:                       // 'node'
    case 209:                       // 'processing-instruction'
    case 219:                       // 'schema-attribute'
    case 220:                       // 'schema-element'
    case 236:                       // 'text'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17487:                     // 'attribute' '('
    case 17501:                     // 'comment' '('
    case 17525:                     // 'document-node' '('
    case 17526:                     // 'element' '('
    case 17588:                     // 'namespace-node' '('
    case 17594:                     // 'node' '('
    case 17617:                     // 'processing-instruction' '('
    case 17627:                     // 'schema-attribute' '('
    case 17628:                     // 'schema-element' '('
    case 17644:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  private void try_NodeTest()
  {
    switch (l1)
    {
    case 79:                        // 'attribute'
    case 93:                        // 'comment'
    case 117:                       // 'document-node'
    case 118:                       // 'element'
    case 180:                       // 'namespace-node'
    case 186:                       // 'node'
    case 209:                       // 'processing-instruction'
    case 219:                       // 'schema-attribute'
    case 220:                       // 'schema-element'
    case 236:                       // 'text'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17487:                     // 'attribute' '('
    case 17501:                     // 'comment' '('
    case 17525:                     // 'document-node' '('
    case 17526:                     // 'element' '('
    case 17588:                     // 'namespace-node' '('
    case 17594:                     // 'node' '('
    case 17617:                     // 'processing-instruction' '('
    case 17627:                     // 'schema-attribute' '('
    case 17628:                     // 'schema-element' '('
    case 17644:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  private void parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      consume(5);                   // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  private void try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      consumeT(5);                  // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  private void parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(234);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      if (l1 != 34                  // '('
       && l1 != 67)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 67:                      // '['
        whitespace();
        parse_Predicate();
        break;
      default:
        whitespace();
        parse_ArgumentList();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  private void try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(234);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      if (l1 != 34                  // '('
       && l1 != 67)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 67:                      // '['
        try_Predicate();
        break;
      default:
        try_ArgumentList();
      }
    }
  }

  private void parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(98);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(263);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  private void try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(98);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(263);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  private void parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(232);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      if (l1 != 67)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  private void try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(232);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '}'
      if (l1 != 67)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  private void parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(67);                    // '['
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(68);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  private void try_Predicate()
  {
    consumeT(67);                   // '['
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(68);                   // ']'
  }

  private void parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  private void try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  private void parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consume(9);                   // DecimalLiteral
      break;
    default:
      consume(10);                  // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  private void try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consumeT(9);                  // DecimalLiteral
      break;
    default:
      consumeT(10);                 // DoubleLiteral
    }
  }

  private void parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  private void try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  private void parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  private void try_VarName()
  {
    try_EQName();
  }

  private void parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(262);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  private void try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(262);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  private void parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(44);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  private void try_ContextItemExpr()
  {
    consumeT(44);                   // '.'
  }

  private void parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(196);                   // 'ordered'
    lookahead1W(84);                // S^WS | '(:' | '{'
    consume(268);                   // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(272);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  private void try_OrderedExpr()
  {
    consumeT(196);                  // 'ordered'
    lookahead1W(84);                // S^WS | '(:' | '{'
    consumeT(268);                  // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(272);                  // '}'
  }

  private void parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(248);                   // 'unordered'
    lookahead1W(84);                // S^WS | '(:' | '{'
    consume(268);                   // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(272);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  private void try_UnorderedExpr()
  {
    consumeT(248);                  // 'unordered'
    lookahead1W(84);                // S^WS | '(:' | '{'
    consumeT(268);                  // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(272);                  // '}'
  }

  private void parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  private void try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  private void parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 63:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  private void try_Argument()
  {
    switch (l1)
    {
    case 63:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  private void parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(63);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  private void try_ArgumentPlaceholder()
  {
    consumeT(63);                   // '?'
  }

  private void parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 58:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  private void try_Constructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 58:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  private void parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
      parse_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  private void try_DirectConstructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
      try_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  private void parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(53);                    // '<'
    lookahead1(4);                  // QName
    consume(20);                    // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consume(48);                  // '/>'
      break;
    default:
      consume(60);                  // '>'
      for (;;)
      {
        lookahead1(170);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 55)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(55);                  // '</'
      lookahead1(4);                // QName
      consume(20);                  // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        consume(21);                // S
      }
      lookahead1(8);                // '>'
      consume(60);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  private void try_DirElemConstructor()
  {
    consumeT(53);                   // '<'
    lookahead1(4);                  // QName
    consumeT(20);                   // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consumeT(48);                 // '/>'
      break;
    default:
      consumeT(60);                 // '>'
      for (;;)
      {
        lookahead1(170);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 55)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(55);                 // '</'
      lookahead1(4);                // QName
      consumeT(20);                 // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        consumeT(21);               // S
      }
      lookahead1(8);                // '>'
      consumeT(60);                 // '>'
    }
  }

  private void parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      consume(21);                  // S
      lookahead1(88);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consume(20);                // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          consume(21);              // S
        }
        lookahead1(7);              // '='
        consume(59);                // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          consume(21);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  private void try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      consumeT(21);                 // S
      lookahead1(88);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consumeT(20);               // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          consumeT(21);             // S
        }
        lookahead1(7);              // '='
        consumeT(59);               // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          consumeT(21);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  private void parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(163);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consume(13);              // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consume(14);              // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  private void try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(163);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consumeT(13);             // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consumeT(14);             // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  private void parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consume(16);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  private void try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consumeT(16);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consume(17);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  private void try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consumeT(17);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 58:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consume(4);                   // CDataSection
      break;
    case 15:                        // ElementContentChar
      consume(15);                  // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  private void try_DirElemContent()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 58:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consumeT(4);                  // CDataSection
      break;
    case 15:                        // ElementContentChar
      consumeT(15);                 // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(54);                    // '<!--'
    lookahead1(1);                  // DirCommentContents
    consume(2);                     // DirCommentContents
    lookahead1(6);                  // '-->'
    consume(43);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  private void try_DirCommentConstructor()
  {
    consumeT(54);                   // '<!--'
    lookahead1(1);                  // DirCommentContents
    consumeT(2);                    // DirCommentContents
    lookahead1(6);                  // '-->'
    consumeT(43);                   // '-->'
  }

  private void parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(58);                    // '<?'
    lookahead1(3);                  // PITarget
    consume(18);                    // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
      lookahead1(2);                // DirPIContents
      consume(3);                   // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consume(64);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  private void try_DirPIConstructor()
  {
    consumeT(58);                   // '<?'
    lookahead1(3);                  // PITarget
    consumeT(18);                   // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
      lookahead1(2);                // DirPIContents
      consumeT(3);                  // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consumeT(64);                   // '?>'
  }

  private void parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 116:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 118:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 79:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 179:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 236:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 93:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  private void try_ComputedConstructor()
  {
    switch (l1)
    {
    case 116:                       // 'document'
      try_CompDocConstructor();
      break;
    case 118:                       // 'element'
      try_CompElemConstructor();
      break;
    case 79:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 179:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 236:                       // 'text'
      try_CompTextConstructor();
      break;
    case 93:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  private void parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(118);                   // 'element'
    lookahead1W(248);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      consume(268);                 // '{'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_Expr();
      consume(272);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    consume(268);                   // '{'
    lookahead1W(264);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
    if (l1 != 272)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(272);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  private void try_CompElemConstructor()
  {
    consumeT(118);                  // 'element'
    lookahead1W(248);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      consumeT(268);                // '{'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_Expr();
      consumeT(272);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    consumeT(268);                  // '{'
    lookahead1W(264);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
    if (l1 != 272)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(272);                  // '}'
  }

  private void parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(179);                   // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      consume(268);                 // '{'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_PrefixExpr();
      consume(272);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    consume(268);                   // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_URIExpr();
    consume(272);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  private void try_CompNamespaceConstructor()
  {
    consumeT(179);                  // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      consumeT(268);                // '{'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_PrefixExpr();
      consumeT(272);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    consumeT(268);                  // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_URIExpr();
    consumeT(272);                  // '}'
  }

  private void parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  private void try_Prefix()
  {
    try_NCName();
  }

  private void parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  private void try_PrefixExpr()
  {
    try_Expr();
  }

  private void parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  private void try_URIExpr()
  {
    try_Expr();
  }

  private void parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(89);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  private void try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(89);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  private void parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consume(8);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  private void try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consumeT(8);                    // IntegerLiteral
  }

  private void parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(94);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(142);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(91);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(108);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 76)                   // 'as'
    {
      consume(76);                  // 'as'
      lookahead1W(251);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  private void try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(94);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(142);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(91);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(108);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 76)                   // 'as'
    {
      consumeT(76);                 // 'as'
      lookahead1W(251);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  private void parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(222);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}'
    if (l1 == 63)                   // '?'
    {
      consume(63);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  private void try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(222);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}'
    if (l1 == 63)                   // '?'
    {
      consumeT(63);                 // '?'
    }
  }

  private void parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(76);                    // 'as'
    lookahead1W(251);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  private void try_TypeDeclaration()
  {
    consumeT(76);                   // 'as'
    lookahead1W(251);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_SequenceType();
  }

  private void parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 121:                       // 'empty-sequence'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17529:                     // 'empty-sequence' '('
      consume(121);                 // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(236);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 63:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  private void try_SequenceType()
  {
    switch (l1)
    {
    case 121:                       // 'empty-sequence'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17529:                     // 'empty-sequence' '('
      consumeT(121);                // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(236);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 63:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  private void parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 63:                        // '?'
      consume(63);                  // '?'
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      consume(40);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  private void try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 63:                        // '?'
      consumeT(63);                 // '?'
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      consumeT(40);                 // '+'
    }
  }

  private void parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 79:                        // 'attribute'
    case 93:                        // 'comment'
    case 117:                       // 'document-node'
    case 118:                       // 'element'
    case 142:                       // 'function'
    case 162:                       // 'item'
    case 180:                       // 'namespace-node'
    case 186:                       // 'node'
    case 209:                       // 'processing-instruction'
    case 219:                       // 'schema-attribute'
    case 220:                       // 'schema-element'
    case 236:                       // 'text'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17487:                     // 'attribute' '('
    case 17501:                     // 'comment' '('
    case 17525:                     // 'document-node' '('
    case 17526:                     // 'element' '('
    case 17588:                     // 'namespace-node' '('
    case 17594:                     // 'node' '('
    case 17617:                     // 'processing-instruction' '('
    case 17627:                     // 'schema-attribute' '('
    case 17628:                     // 'schema-element' '('
    case 17644:                     // 'text' '('
      parse_KindTest();
      break;
    case 17570:                     // 'item' '('
      consume(162);                 // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  private void try_ItemType()
  {
    switch (l1)
    {
    case 79:                        // 'attribute'
    case 93:                        // 'comment'
    case 117:                       // 'document-node'
    case 118:                       // 'element'
    case 142:                       // 'function'
    case 162:                       // 'item'
    case 180:                       // 'namespace-node'
    case 186:                       // 'node'
    case 209:                       // 'processing-instruction'
    case 219:                       // 'schema-attribute'
    case 220:                       // 'schema-element'
    case 236:                       // 'text'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17487:                     // 'attribute' '('
    case 17501:                     // 'comment' '('
    case 17525:                     // 'document-node' '('
    case 17526:                     // 'element' '('
    case 17588:                     // 'namespace-node' '('
    case 17594:                     // 'node' '('
    case 17617:                     // 'processing-instruction' '('
    case 17627:                     // 'schema-attribute' '('
    case 17628:                     // 'schema-element' '('
    case 17644:                     // 'text' '('
      try_KindTest();
      break;
    case 17570:                     // 'item' '('
      consumeT(162);                // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_FunctionTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  private void parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  private void try_AtomicOrUnionType()
  {
    try_EQName();
  }

  private void parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 117:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 118:                       // 'element'
      parse_ElementTest();
      break;
    case 79:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 220:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 219:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 209:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 93:                        // 'comment'
      parse_CommentTest();
      break;
    case 236:                       // 'text'
      parse_TextTest();
      break;
    case 180:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  private void try_KindTest()
  {
    switch (l1)
    {
    case 117:                       // 'document-node'
      try_DocumentTest();
      break;
    case 118:                       // 'element'
      try_ElementTest();
      break;
    case 79:                        // 'attribute'
      try_AttributeTest();
      break;
    case 220:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 219:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 209:                       // 'processing-instruction'
      try_PITest();
      break;
    case 93:                        // 'comment'
      try_CommentTest();
      break;
    case 236:                       // 'text'
      try_TextTest();
      break;
    case 180:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  private void parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(186);                   // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  private void try_AnyKindTest()
  {
    consumeT(186);                  // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(117);                   // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(141);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 118:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  private void try_DocumentTest()
  {
    consumeT(117);                  // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(141);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 118:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(236);                   // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  private void try_TextTest()
  {
    consumeT(236);                  // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(93);                    // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  private void try_CommentTest()
  {
    consumeT(93);                   // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(180);                   // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  private void try_NamespaceNodeTest()
  {
    consumeT(180);                  // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(209);                   // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consume(11);                // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  private void try_PITest()
  {
    consumeT(209);                  // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consumeT(11);               // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(79);                    // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(98);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(245);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  private void try_AttributeTest()
  {
    consumeT(79);                   // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(98);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(245);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  private void try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  private void parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(219);                   // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  private void try_SchemaAttributeTest()
  {
    consumeT(219);                  // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  private void try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  private void parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(118);                   // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(98);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(245);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(99);            // S^WS | '(:' | ')' | '?'
        if (l1 == 63)               // '?'
        {
          consume(63);              // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  private void try_ElementTest()
  {
    consumeT(118);                  // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(252);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(98);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(245);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        lookahead1W(99);            // S^WS | '(:' | ')' | '?'
        if (l1 == 63)               // '?'
        {
          consumeT(63);             // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  private void try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  private void parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(220);                   // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  private void try_SchemaElementTest()
  {
    consumeT(220);                  // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  private void try_ElementDeclaration()
  {
    try_ElementName();
  }

  private void parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  private void try_AttributeName()
  {
    try_EQName();
  }

  private void parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  private void try_ElementName()
  {
    try_EQName();
  }

  private void parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  private void try_SimpleTypeName()
  {
    try_TypeName();
  }

  private void parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  private void try_TypeName()
  {
    try_EQName();
  }

  private void parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(94);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(3, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (ParseException p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(3, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  private void try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(94);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(3, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(3, e0A, -1);
        lk = -3;
      }
      catch (ParseException p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  private void parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  private void try_AnyFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(256);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(98);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(251);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consume(76);                    // 'as'
    lookahead1W(251);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  private void try_TypedFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(256);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(98);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(251);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consumeT(76);                   // 'as'
    lookahead1W(251);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_SequenceType();
  }

  private void parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(251);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  private void try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(251);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(105);                   // 'declare'
    lookahead1W(70);                // S^WS | '(:' | 'revalidation'
    consume(215);                   // 'revalidation'
    lookahead1W(148);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 233:                       // 'strict'
      consume(233);                 // 'strict'
      break;
    case 166:                       // 'lax'
      consume(166);                 // 'lax'
      break;
    default:
      consume(226);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  private void parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 69:                        // 'after'
      consume(69);                  // 'after'
      break;
    case 81:                        // 'before'
      consume(81);                  // 'before'
      break;
    default:
      if (l1 == 76)                 // 'as'
      {
        consume(76);                // 'as'
        lookahead1W(116);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 131:                   // 'first'
          consume(131);             // 'first'
          break;
        default:
          consume(165);             // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consume(160);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  private void try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 69:                        // 'after'
      consumeT(69);                 // 'after'
      break;
    case 81:                        // 'before'
      consumeT(81);                 // 'before'
      break;
    default:
      if (l1 == 76)                 // 'as'
      {
        consumeT(76);               // 'as'
        lookahead1W(116);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 131:                   // 'first'
          consumeT(131);            // 'first'
          break;
        default:
          consumeT(165);            // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consumeT(160);                // 'into'
    }
  }

  private void parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(156);                   // 'insert'
    lookahead1W(126);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 186:                       // 'node'
      consume(186);                 // 'node'
      break;
    default:
      consume(187);                 // 'nodes'
    }
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  private void try_InsertExpr()
  {
    consumeT(156);                  // 'insert'
    lookahead1W(126);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 186:                       // 'node'
      consumeT(186);                // 'node'
      break;
    default:
      consumeT(187);                // 'nodes'
    }
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_TargetExpr();
  }

  private void parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(107);                   // 'delete'
    lookahead1W(126);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 186:                       // 'node'
      consume(186);                 // 'node'
      break;
    default:
      consume(187);                 // 'nodes'
    }
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  private void try_DeleteExpr()
  {
    consumeT(107);                  // 'delete'
    lookahead1W(126);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 186:                       // 'node'
      consumeT(186);                // 'node'
      break;
    default:
      consumeT(187);                // 'nodes'
    }
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_TargetExpr();
  }

  private void parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(212);                   // 'replace'
    lookahead1W(127);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 253)                  // 'value'
    {
      consume(253);                 // 'value'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      consume(190);                 // 'of'
    }
    lookahead1W(61);                // S^WS | '(:' | 'node'
    consume(186);                   // 'node'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_TargetExpr();
    consume(262);                   // 'with'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  private void try_ReplaceExpr()
  {
    consumeT(212);                  // 'replace'
    lookahead1W(127);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 253)                  // 'value'
    {
      consumeT(253);                // 'value'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      consumeT(190);                // 'of'
    }
    lookahead1W(61);                // S^WS | '(:' | 'node'
    consumeT(186);                  // 'node'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_TargetExpr();
    consumeT(262);                  // 'with'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(211);                   // 'rename'
    lookahead1W(61);                // S^WS | '(:' | 'node'
    consume(186);                   // 'node'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_TargetExpr();
    consume(76);                    // 'as'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  private void try_RenameExpr()
  {
    consumeT(211);                  // 'rename'
    lookahead1W(61);                // S^WS | '(:' | 'node'
    consumeT(186);                  // 'node'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_TargetExpr();
    consumeT(76);                   // 'as'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_NewNameExpr();
  }

  private void parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  private void try_SourceExpr()
  {
    try_ExprSingle();
  }

  private void parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  private void try_TargetExpr()
  {
    try_ExprSingle();
  }

  private void parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  private void try_NewNameExpr()
  {
    try_ExprSingle();
  }

  private void parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    consume(100);                   // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(27);              // S^WS | '(:' | ':='
      consume(51);                  // ':='
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_ExprSingle();
    }
    consume(176);                   // 'modify'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  private void try_TransformExpr()
  {
    consumeT(100);                  // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(27);              // S^WS | '(:' | ':='
      consumeT(51);                 // ':='
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_ExprSingle();
    }
    consumeT(176);                  // 'modify'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
  }

  private void parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(207);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'where' | 'window' | 'with' | 'without' | '}'
      if (l1 != 78                  // 'at'
       && l1 != 112                 // 'different'
       && l1 != 114                 // 'distance'
       && l1 != 124                 // 'entire'
       && l1 != 196                 // 'ordered'
       && l1 != 216                 // 'same'
       && l1 != 261)                // 'window'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  private void try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(207);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'where' | 'window' | 'with' | 'without' | '}'
      if (l1 != 78                  // 'at'
       && l1 != 112                 // 'different'
       && l1 != 114                 // 'distance'
       && l1 != 124                 // 'entire'
       && l1 != 196                 // 'ordered'
       && l1 != 216                 // 'same'
       && l1 != 261)                // 'window'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  private void parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(256);                   // 'weight'
    lookahead1W(84);                // S^WS | '(:' | '{'
    consume(268);                   // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(272);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  private void try_FTWeight()
  {
    consumeT(256);                  // 'weight'
    lookahead1W(84);                // S^WS | '(:' | '{'
    consumeT(268);                  // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(272);                  // '}'
  }

  private void parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consume(141);                 // 'ftor'
      lookahead1W(159);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  private void try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consumeT(141);                // 'ftor'
      lookahead1W(159);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  private void parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consume(139);                 // 'ftand'
      lookahead1W(159);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  private void try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consumeT(139);                // 'ftand'
      lookahead1W(159);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  private void parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(208);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                    // 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '}'
      if (l1 != 188)                // 'not'
      {
        break;
      }
      consume(188);                 // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(151);                 // 'in'
      lookahead1W(159);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  private void try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(208);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                    // 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '}'
      if (l1 != 188)                // 'not'
      {
        break;
      }
      consumeT(188);                // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(151);                // 'in'
      lookahead1W(159);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  private void parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 140)                  // 'ftnot'
    {
      consume(140);                 // 'ftnot'
    }
    lookahead1W(151);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  private void try_FTUnaryNot()
  {
    if (l1 == 140)                  // 'ftnot'
    {
      consumeT(140);                // 'ftnot'
    }
    lookahead1W(151);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  private void parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(209);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                    // 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | '}'
    if (l1 == 251)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 256)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  private void try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(209);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                    // 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | '}'
    if (l1 == 251)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 256)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  private void parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(159);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '}'
      if (l1 == 189)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  private void try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(159);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '}'
      if (l1 == 189)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  private void parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(218);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}'
    if (l1 == 70                    // 'all'
     || l1 == 75                    // 'any'
     || l1 == 204)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  private void try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(218);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}'
    if (l1 == 70                    // 'all'
     || l1 == 75                    // 'any'
     || l1 == 204)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  private void parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      consume(268);                 // '{'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_Expr();
      consume(272);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  private void try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      consumeT(268);                // '{'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_Expr();
      consumeT(272);                // '}'
    }
  }

  private void parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(97);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(268);                   // '{'
    lookahead1W(162);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 272)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(272);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  private void try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(97);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(268);                  // '{'
    lookahead1W(162);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 272)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(272);                  // '}'
  }

  private void parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 75:                        // 'any'
      consume(75);                  // 'any'
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | 'word' | '}'
      if (l1 == 264)                // 'word'
      {
        consume(264);               // 'word'
      }
      break;
    case 70:                        // 'all'
      consume(70);                  // 'all'
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '}'
      if (l1 == 265)                // 'words'
      {
        consume(265);               // 'words'
      }
      break;
    default:
      consume(204);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  private void try_FTAnyallOption()
  {
    switch (l1)
    {
    case 75:                        // 'any'
      consumeT(75);                 // 'any'
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | 'word' | '}'
      if (l1 == 264)                // 'word'
      {
        consumeT(264);              // 'word'
      }
      break;
    case 70:                        // 'all'
      consumeT(70);                 // 'all'
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '}'
      if (l1 == 265)                // 'words'
      {
        consumeT(265);              // 'words'
      }
      break;
    default:
      consumeT(204);                // 'phrase'
    }
  }

  private void parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(189);                   // 'occurs'
    lookahead1W(146);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(239);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  private void try_FTTimes()
  {
    consumeT(189);                  // 'occurs'
    lookahead1W(146);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(239);                  // 'times'
  }

  private void parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 127:                       // 'exactly'
      consume(127);                 // 'exactly'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 78:                        // 'at'
      consume(78);                  // 'at'
      lookahead1W(122);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 168:                     // 'least'
        consume(168);               // 'least'
        lookahead1W(260);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(178);               // 'most'
        lookahead1W(260);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_AdditiveExpr();
      consume(240);                 // 'to'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  private void try_FTRange()
  {
    switch (l1)
    {
    case 127:                       // 'exactly'
      consumeT(127);                // 'exactly'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_AdditiveExpr();
      break;
    case 78:                        // 'at'
      consumeT(78);                 // 'at'
      lookahead1W(122);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 168:                     // 'least'
        consumeT(168);              // 'least'
        lookahead1W(260);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        try_AdditiveExpr();
        break;
      default:
        consumeT(178);              // 'most'
        lookahead1W(260);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_AdditiveExpr();
      consumeT(240);                // 'to'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_AdditiveExpr();
    }
  }

  private void parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 196:                       // 'ordered'
      parse_FTOrder();
      break;
    case 261:                       // 'window'
      parse_FTWindow();
      break;
    case 114:                       // 'distance'
      parse_FTDistance();
      break;
    case 112:                       // 'different'
    case 216:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  private void try_FTPosFilter()
  {
    switch (l1)
    {
    case 196:                       // 'ordered'
      try_FTOrder();
      break;
    case 261:                       // 'window'
      try_FTWindow();
      break;
    case 114:                       // 'distance'
      try_FTDistance();
      break;
    case 112:                       // 'different'
    case 216:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  private void parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(196);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  private void try_FTOrder()
  {
    consumeT(196);                  // 'ordered'
  }

  private void parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(261);                   // 'window'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  private void try_FTWindow()
  {
    consumeT(261);                  // 'window'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_AdditiveExpr();
    try_FTUnit();
  }

  private void parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(114);                   // 'distance'
    lookahead1W(146);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  private void try_FTDistance()
  {
    consumeT(114);                  // 'distance'
    lookahead1W(146);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  private void parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 265:                       // 'words'
      consume(265);                 // 'words'
      break;
    case 225:                       // 'sentences'
      consume(225);                 // 'sentences'
      break;
    default:
      consume(199);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  private void try_FTUnit()
  {
    switch (l1)
    {
    case 265:                       // 'words'
      consumeT(265);                // 'words'
      break;
    case 225:                       // 'sentences'
      consumeT(225);                // 'sentences'
      break;
    default:
      consumeT(199);                // 'paragraphs'
    }
  }

  private void parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 216:                       // 'same'
      consume(216);                 // 'same'
      break;
    default:
      consume(112);                 // 'different'
    }
    lookahead1W(129);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  private void try_FTScope()
  {
    switch (l1)
    {
    case 216:                       // 'same'
      consumeT(216);                // 'same'
      break;
    default:
      consumeT(112);                // 'different'
    }
    lookahead1W(129);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  private void parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 224:                       // 'sentence'
      consume(224);                 // 'sentence'
      break;
    default:
      consume(198);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  private void try_FTBigUnit()
  {
    switch (l1)
    {
    case 224:                       // 'sentence'
      consumeT(224);                // 'sentence'
      break;
    default:
      consumeT(198);                // 'paragraph'
    }
  }

  private void parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 78:                        // 'at'
      consume(78);                  // 'at'
      lookahead1W(114);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 230:                     // 'start'
        consume(230);               // 'start'
        break;
      default:
        consume(123);               // 'end'
      }
      break;
    default:
      consume(124);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(97);                  // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  private void try_FTContent()
  {
    switch (l1)
    {
    case 78:                        // 'at'
      consumeT(78);                 // 'at'
      lookahead1W(114);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 230:                     // 'start'
        consumeT(230);              // 'start'
        break;
      default:
        consumeT(123);              // 'end'
      }
      break;
    default:
      consumeT(124);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(97);                 // 'content'
    }
  }

  private void parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(251);                 // 'using'
      lookahead1W(178);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(209);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                    // 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | '}'
      if (l1 != 251)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  private void try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(251);                // 'using'
      lookahead1W(178);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(209);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                    // 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | '}'
      if (l1 != 251)                // 'using'
      {
        break;
      }
    }
  }

  private void parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 183:                       // 'no'
      lookahead2W(158);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 164:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 260:                       // 'wildcards'
    case 133303:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 238:                       // 'thesaurus'
    case 122039:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 231:                       // 'stemming'
    case 118455:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 111:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 232:                       // 'stop'
    case 118967:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 193:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  private void try_FTMatchOption()
  {
    switch (l1)
    {
    case 183:                       // 'no'
      lookahead2W(158);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 164:                       // 'language'
      try_FTLanguageOption();
      break;
    case 260:                       // 'wildcards'
    case 133303:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 238:                       // 'thesaurus'
    case 122039:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 231:                       // 'stemming'
    case 118455:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 111:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 232:                       // 'stop'
    case 118967:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 193:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  private void parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 85:                        // 'case'
      consume(85);                  // 'case'
      lookahead1W(121);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 155:                     // 'insensitive'
        consume(155);               // 'insensitive'
        break;
      default:
        consume(223);               // 'sensitive'
      }
      break;
    case 172:                       // 'lowercase'
      consume(172);                 // 'lowercase'
      break;
    default:
      consume(250);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  private void try_FTCaseOption()
  {
    switch (l1)
    {
    case 85:                        // 'case'
      consumeT(85);                 // 'case'
      lookahead1W(121);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 155:                     // 'insensitive'
        consumeT(155);              // 'insensitive'
        break;
      default:
        consumeT(223);              // 'sensitive'
      }
      break;
    case 172:                       // 'lowercase'
      consumeT(172);                // 'lowercase'
      break;
    default:
      consumeT(250);                // 'uppercase'
    }
  }

  private void parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(111);                   // 'diacritics'
    lookahead1W(121);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 155:                       // 'insensitive'
      consume(155);                 // 'insensitive'
      break;
    default:
      consume(223);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  private void try_FTDiacriticsOption()
  {
    consumeT(111);                  // 'diacritics'
    lookahead1W(121);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 155:                       // 'insensitive'
      consumeT(155);                // 'insensitive'
      break;
    default:
      consumeT(223);                // 'sensitive'
    }
  }

  private void parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 231:                       // 'stemming'
      consume(231);                 // 'stemming'
      break;
    default:
      consume(183);                 // 'no'
      lookahead1W(72);              // S^WS | '(:' | 'stemming'
      consume(231);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  private void try_FTStemOption()
  {
    switch (l1)
    {
    case 231:                       // 'stemming'
      consumeT(231);                // 'stemming'
      break;
    default:
      consumeT(183);                // 'no'
      lookahead1W(72);              // S^WS | '(:' | 'stemming'
      consumeT(231);                // 'stemming'
    }
  }

  private void parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 238:                       // 'thesaurus'
      consume(238);                 // 'thesaurus'
      lookahead1W(139);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 78:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 106:                     // 'default'
        consume(106);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(109);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 78:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(106);             // 'default'
        }
        for (;;)
        {
          lookahead1W(98);          // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          consume(41);              // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(183);                 // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'thesaurus'
      consume(238);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  private void try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 238:                       // 'thesaurus'
      consumeT(238);                // 'thesaurus'
      lookahead1W(139);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 78:                      // 'at'
        try_FTThesaurusID();
        break;
      case 106:                     // 'default'
        consumeT(106);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(109);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 78:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(106);            // 'default'
        }
        for (;;)
        {
          lookahead1W(98);          // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          consumeT(41);             // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(183);                // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'thesaurus'
      consumeT(238);                // 'thesaurus'
    }
  }

  private void parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(78);                    // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}'
    if (l1 == 210)                  // 'relationship'
    {
      consume(210);                 // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    lookahead1W(212);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '}'
    switch (l1)
    {
    case 78:                        // 'at'
      lookahead2W(156);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 127                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 86094                 // 'at' 'least'
     || lk == 91214)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(57);              // S^WS | '(:' | 'levels'
      consume(170);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  private void try_FTThesaurusID()
  {
    consumeT(78);                   // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '}'
    if (l1 == 210)                  // 'relationship'
    {
      consumeT(210);                // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
    }
    lookahead1W(212);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '}'
    switch (l1)
    {
    case 78:                        // 'at'
      lookahead2W(156);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 127                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 86094                 // 'at' 'least'
     || lk == 91214)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(57);              // S^WS | '(:' | 'levels'
      consumeT(170);                // 'levels'
    }
  }

  private void parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 127:                       // 'exactly'
      consume(127);                 // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      break;
    case 78:                        // 'at'
      consume(78);                  // 'at'
      lookahead1W(122);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 168:                     // 'least'
        consume(168);               // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
        break;
      default:
        consume(178);               // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      lookahead1W(77);              // S^WS | '(:' | 'to'
      consume(240);                 // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  private void try_FTLiteralRange()
  {
    switch (l1)
    {
    case 127:                       // 'exactly'
      consumeT(127);                // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      break;
    case 78:                        // 'at'
      consumeT(78);                 // 'at'
      lookahead1W(122);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 168:                     // 'least'
        consumeT(168);              // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
        break;
      default:
        consumeT(178);              // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      lookahead1W(77);              // S^WS | '(:' | 'to'
      consumeT(240);                // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
    }
  }

  private void parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 232:                       // 'stop'
      consume(232);                 // 'stop'
      lookahead1W(83);              // S^WS | '(:' | 'words'
      consume(265);                 // 'words'
      lookahead1W(139);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 106:                     // 'default'
        consume(106);               // 'default'
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'union' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '}'
          if (l1 != 128             // 'except'
           && l1 != 246)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'union' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '}'
          if (l1 != 128             // 'except'
           && l1 != 246)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(183);                 // 'no'
      lookahead1W(73);              // S^WS | '(:' | 'stop'
      consume(232);                 // 'stop'
      lookahead1W(83);              // S^WS | '(:' | 'words'
      consume(265);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  private void try_FTStopWordOption()
  {
    switch (l1)
    {
    case 232:                       // 'stop'
      consumeT(232);                // 'stop'
      lookahead1W(83);              // S^WS | '(:' | 'words'
      consumeT(265);                // 'words'
      lookahead1W(139);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 106:                     // 'default'
        consumeT(106);              // 'default'
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'union' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '}'
          if (l1 != 128             // 'except'
           && l1 != 246)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                    // 'case' | 'collation' | 'count' | 'default' | 'descending' | 'different' |
                                    // 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'union' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '}'
          if (l1 != 128             // 'except'
           && l1 != 246)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(183);                // 'no'
      lookahead1W(73);              // S^WS | '(:' | 'stop'
      consumeT(232);                // 'stop'
      lookahead1W(83);              // S^WS | '(:' | 'words'
      consumeT(265);                // 'words'
    }
  }

  private void parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 78:                        // 'at'
      consume(78);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      break;
    default:
      consume(34);                  // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      for (;;)
      {
        lookahead1W(98);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  private void try_FTStopWords()
  {
    switch (l1)
    {
    case 78:                        // 'at'
      consumeT(78);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
      for (;;)
      {
        lookahead1W(98);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consumeT(11);               // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  private void parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 246:                       // 'union'
      consume(246);                 // 'union'
      break;
    default:
      consume(128);                 // 'except'
    }
    lookahead1W(96);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  private void try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 246:                       // 'union'
      consumeT(246);                // 'union'
      break;
    default:
      consumeT(128);                // 'except'
    }
    lookahead1W(96);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  private void parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(164);                   // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  private void try_FTLanguageOption()
  {
    consumeT(164);                  // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  private void parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 260:                       // 'wildcards'
      consume(260);                 // 'wildcards'
      break;
    default:
      consume(183);                 // 'no'
      lookahead1W(81);              // S^WS | '(:' | 'wildcards'
      consume(260);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  private void try_FTWildCardOption()
  {
    switch (l1)
    {
    case 260:                       // 'wildcards'
      consumeT(260);                // 'wildcards'
      break;
    default:
      consumeT(183);                // 'no'
      lookahead1W(81);              // S^WS | '(:' | 'wildcards'
      consumeT(260);                // 'wildcards'
    }
  }

  private void parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(193);                   // 'option'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  private void try_FTExtensionOption()
  {
    consumeT(193);                  // 'option'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  private void parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(263);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(97);                    // 'content'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  private void try_FTIgnoreOption()
  {
    consumeT(263);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(97);                   // 'content'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_UnionExpr();
  }

  private void parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    consume(92);                    // 'collection'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(104);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  private void parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    consume(76);                    // 'as'
    lookahead1W(174);               // S^WS | '(:' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'namespace-node' | 'node' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'text'
    whitespace();
    parse_KindTest();
    lookahead1W(152);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 52)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  private void parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  private void parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  private void parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(143);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 91)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  private void parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  private void parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    consume(76);                    // 'as'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(165);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 39                    // '*'
     || l1 == 40                    // '+'
     || l1 == 63)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  private void parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  private void parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    consume(91);                    // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  private void parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    consume(152);                   // 'index'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(64);                // S^WS | '(:' | 'on'
    consume(191);                   // 'on'
    lookahead1W(62);                // S^WS | '(:' | 'nodes'
    consume(187);                   // 'nodes'
    lookahead1W(259);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_IndexDomainExpr();
    consume(84);                    // 'by'
    lookahead1W(259);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(100);             // S^WS | '(:' | ',' | ';'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(259);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  private void parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    consume(158);                   // 'integrity'
    lookahead1W(40);                // S^WS | '(:' | 'constraint'
    consume(94);                    // 'constraint'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(117);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 191:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  private void parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    consume(191);                   // 'on'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    consume(92);                    // 'collection'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(137);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 186:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  private void parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(89);                    // 'check'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  private void parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    consume(186);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(89);                    // 'check'
    lookahead1W(78);                // S^WS | '(:' | 'unique'
    consume(247);                   // 'unique'
    lookahead1W(56);                // S^WS | '(:' | 'key'
    consume(163);                   // 'key'
    lookahead1W(259);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  private void parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    consume(135);                   // 'foreach'
    lookahead1W(61);                // S^WS | '(:' | 'node'
    consume(186);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(89);                    // 'check'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  private void parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    consume(136);                   // 'foreign'
    lookahead1W(56);                // S^WS | '(:' | 'key'
    consume(163);                   // 'key'
    lookahead1W(51);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  private void parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    consume(137);                   // 'from'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  private void parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    consume(240);                   // 'to'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  private void parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    consume(92);                    // 'collection'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(61);                // S^WS | '(:' | 'node'
    consume(186);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(56);                // S^WS | '(:' | 'key'
    consume(163);                   // 'key'
    lookahead1W(259);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  private void try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(86);               // CommentContents | '(:' | ':)'
      if (l1 == 49)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        consumeT(24);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(49);                   // ':)'
  }

  private void try_Whitespace()
  {
    switch (l1)
    {
    case 22:                        // S^WS
      consumeT(22);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  private void parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(243);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 79:                        // 'attribute'
      consume(79);                  // 'attribute'
      break;
    case 93:                        // 'comment'
      consume(93);                  // 'comment'
      break;
    case 117:                       // 'document-node'
      consume(117);                 // 'document-node'
      break;
    case 118:                       // 'element'
      consume(118);                 // 'element'
      break;
    case 121:                       // 'empty-sequence'
      consume(121);                 // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consume(142);                 // 'function'
      break;
    case 149:                       // 'if'
      consume(149);                 // 'if'
      break;
    case 162:                       // 'item'
      consume(162);                 // 'item'
      break;
    case 180:                       // 'namespace-node'
      consume(180);                 // 'namespace-node'
      break;
    case 186:                       // 'node'
      consume(186);                 // 'node'
      break;
    case 209:                       // 'processing-instruction'
      consume(209);                 // 'processing-instruction'
      break;
    case 219:                       // 'schema-attribute'
      consume(219);                 // 'schema-attribute'
      break;
    case 220:                       // 'schema-element'
      consume(220);                 // 'schema-element'
      break;
    case 235:                       // 'switch'
      consume(235);                 // 'switch'
      break;
    case 236:                       // 'text'
      consume(236);                 // 'text'
      break;
    case 245:                       // 'typeswitch'
      consume(245);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  private void try_EQName()
  {
    lookahead1(243);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 79:                        // 'attribute'
      consumeT(79);                 // 'attribute'
      break;
    case 93:                        // 'comment'
      consumeT(93);                 // 'comment'
      break;
    case 117:                       // 'document-node'
      consumeT(117);                // 'document-node'
      break;
    case 118:                       // 'element'
      consumeT(118);                // 'element'
      break;
    case 121:                       // 'empty-sequence'
      consumeT(121);                // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consumeT(142);                // 'function'
      break;
    case 149:                       // 'if'
      consumeT(149);                // 'if'
      break;
    case 162:                       // 'item'
      consumeT(162);                // 'item'
      break;
    case 180:                       // 'namespace-node'
      consumeT(180);                // 'namespace-node'
      break;
    case 186:                       // 'node'
      consumeT(186);                // 'node'
      break;
    case 209:                       // 'processing-instruction'
      consumeT(209);                // 'processing-instruction'
      break;
    case 219:                       // 'schema-attribute'
      consumeT(219);                // 'schema-attribute'
      break;
    case 220:                       // 'schema-element'
      consumeT(220);                // 'schema-element'
      break;
    case 235:                       // 'switch'
      consumeT(235);                // 'switch'
      break;
    case 236:                       // 'text'
      consumeT(236);                // 'text'
      break;
    case 245:                       // 'typeswitch'
      consumeT(245);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  private void parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      consume(6);                   // EQName^Token
      break;
    case 69:                        // 'after'
      consume(69);                  // 'after'
      break;
    case 72:                        // 'ancestor'
      consume(72);                  // 'ancestor'
      break;
    case 73:                        // 'ancestor-or-self'
      consume(73);                  // 'ancestor-or-self'
      break;
    case 74:                        // 'and'
      consume(74);                  // 'and'
      break;
    case 76:                        // 'as'
      consume(76);                  // 'as'
      break;
    case 77:                        // 'ascending'
      consume(77);                  // 'ascending'
      break;
    case 81:                        // 'before'
      consume(81);                  // 'before'
      break;
    case 85:                        // 'case'
      consume(85);                  // 'case'
      break;
    case 86:                        // 'cast'
      consume(86);                  // 'cast'
      break;
    case 87:                        // 'castable'
      consume(87);                  // 'castable'
      break;
    case 90:                        // 'child'
      consume(90);                  // 'child'
      break;
    case 91:                        // 'collation'
      consume(91);                  // 'collation'
      break;
    case 100:                       // 'copy'
      consume(100);                 // 'copy'
      break;
    case 102:                       // 'count'
      consume(102);                 // 'count'
      break;
    case 105:                       // 'declare'
      consume(105);                 // 'declare'
      break;
    case 106:                       // 'default'
      consume(106);                 // 'default'
      break;
    case 107:                       // 'delete'
      consume(107);                 // 'delete'
      break;
    case 108:                       // 'descendant'
      consume(108);                 // 'descendant'
      break;
    case 109:                       // 'descendant-or-self'
      consume(109);                 // 'descendant-or-self'
      break;
    case 110:                       // 'descending'
      consume(110);                 // 'descending'
      break;
    case 115:                       // 'div'
      consume(115);                 // 'div'
      break;
    case 116:                       // 'document'
      consume(116);                 // 'document'
      break;
    case 119:                       // 'else'
      consume(119);                 // 'else'
      break;
    case 120:                       // 'empty'
      consume(120);                 // 'empty'
      break;
    case 123:                       // 'end'
      consume(123);                 // 'end'
      break;
    case 125:                       // 'eq'
      consume(125);                 // 'eq'
      break;
    case 126:                       // 'every'
      consume(126);                 // 'every'
      break;
    case 128:                       // 'except'
      consume(128);                 // 'except'
      break;
    case 131:                       // 'first'
      consume(131);                 // 'first'
      break;
    case 132:                       // 'following'
      consume(132);                 // 'following'
      break;
    case 133:                       // 'following-sibling'
      consume(133);                 // 'following-sibling'
      break;
    case 134:                       // 'for'
      consume(134);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 150:                       // 'import'
      consume(150);                 // 'import'
      break;
    case 156:                       // 'insert'
      consume(156);                 // 'insert'
      break;
    case 157:                       // 'instance'
      consume(157);                 // 'instance'
      break;
    case 159:                       // 'intersect'
      consume(159);                 // 'intersect'
      break;
    case 160:                       // 'into'
      consume(160);                 // 'into'
      break;
    case 161:                       // 'is'
      consume(161);                 // 'is'
      break;
    case 165:                       // 'last'
      consume(165);                 // 'last'
      break;
    case 167:                       // 'le'
      consume(167);                 // 'le'
      break;
    case 169:                       // 'let'
      consume(169);                 // 'let'
      break;
    case 173:                       // 'lt'
      consume(173);                 // 'lt'
      break;
    case 175:                       // 'mod'
      consume(175);                 // 'mod'
      break;
    case 176:                       // 'modify'
      consume(176);                 // 'modify'
      break;
    case 177:                       // 'module'
      consume(177);                 // 'module'
      break;
    case 179:                       // 'namespace'
      consume(179);                 // 'namespace'
      break;
    case 181:                       // 'ne'
      consume(181);                 // 'ne'
      break;
    case 192:                       // 'only'
      consume(192);                 // 'only'
      break;
    case 194:                       // 'or'
      consume(194);                 // 'or'
      break;
    case 195:                       // 'order'
      consume(195);                 // 'order'
      break;
    case 196:                       // 'ordered'
      consume(196);                 // 'ordered'
      break;
    case 200:                       // 'parent'
      consume(200);                 // 'parent'
      break;
    case 205:                       // 'preceding'
      consume(205);                 // 'preceding'
      break;
    case 206:                       // 'preceding-sibling'
      consume(206);                 // 'preceding-sibling'
      break;
    case 211:                       // 'rename'
      consume(211);                 // 'rename'
      break;
    case 212:                       // 'replace'
      consume(212);                 // 'replace'
      break;
    case 213:                       // 'return'
      consume(213);                 // 'return'
      break;
    case 217:                       // 'satisfies'
      consume(217);                 // 'satisfies'
      break;
    case 222:                       // 'self'
      consume(222);                 // 'self'
      break;
    case 228:                       // 'some'
      consume(228);                 // 'some'
      break;
    case 229:                       // 'stable'
      consume(229);                 // 'stable'
      break;
    case 230:                       // 'start'
      consume(230);                 // 'start'
      break;
    case 240:                       // 'to'
      consume(240);                 // 'to'
      break;
    case 241:                       // 'treat'
      consume(241);                 // 'treat'
      break;
    case 242:                       // 'try'
      consume(242);                 // 'try'
      break;
    case 246:                       // 'union'
      consume(246);                 // 'union'
      break;
    case 248:                       // 'unordered'
      consume(248);                 // 'unordered'
      break;
    case 252:                       // 'validate'
      consume(252);                 // 'validate'
      break;
    case 258:                       // 'where'
      consume(258);                 // 'where'
      break;
    case 262:                       // 'with'
      consume(262);                 // 'with'
      break;
    case 266:                       // 'xquery'
      consume(266);                 // 'xquery'
      break;
    case 71:                        // 'allowing'
      consume(71);                  // 'allowing'
      break;
    case 78:                        // 'at'
      consume(78);                  // 'at'
      break;
    case 80:                        // 'base-uri'
      consume(80);                  // 'base-uri'
      break;
    case 82:                        // 'boundary-space'
      consume(82);                  // 'boundary-space'
      break;
    case 83:                        // 'break'
      consume(83);                  // 'break'
      break;
    case 88:                        // 'catch'
      consume(88);                  // 'catch'
      break;
    case 95:                        // 'construction'
      consume(95);                  // 'construction'
      break;
    case 98:                        // 'context'
      consume(98);                  // 'context'
      break;
    case 99:                        // 'continue'
      consume(99);                  // 'continue'
      break;
    case 101:                       // 'copy-namespaces'
      consume(101);                 // 'copy-namespaces'
      break;
    case 103:                       // 'decimal-format'
      consume(103);                 // 'decimal-format'
      break;
    case 122:                       // 'encoding'
      consume(122);                 // 'encoding'
      break;
    case 129:                       // 'exit'
      consume(129);                 // 'exit'
      break;
    case 130:                       // 'external'
      consume(130);                 // 'external'
      break;
    case 138:                       // 'ft-option'
      consume(138);                 // 'ft-option'
      break;
    case 151:                       // 'in'
      consume(151);                 // 'in'
      break;
    case 152:                       // 'index'
      consume(152);                 // 'index'
      break;
    case 158:                       // 'integrity'
      consume(158);                 // 'integrity'
      break;
    case 166:                       // 'lax'
      consume(166);                 // 'lax'
      break;
    case 187:                       // 'nodes'
      consume(187);                 // 'nodes'
      break;
    case 193:                       // 'option'
      consume(193);                 // 'option'
      break;
    case 197:                       // 'ordering'
      consume(197);                 // 'ordering'
      break;
    case 215:                       // 'revalidation'
      consume(215);                 // 'revalidation'
      break;
    case 218:                       // 'schema'
      consume(218);                 // 'schema'
      break;
    case 221:                       // 'score'
      consume(221);                 // 'score'
      break;
    case 227:                       // 'sliding'
      consume(227);                 // 'sliding'
      break;
    case 233:                       // 'strict'
      consume(233);                 // 'strict'
      break;
    case 243:                       // 'tumbling'
      consume(243);                 // 'tumbling'
      break;
    case 244:                       // 'type'
      consume(244);                 // 'type'
      break;
    case 249:                       // 'updating'
      consume(249);                 // 'updating'
      break;
    case 253:                       // 'value'
      consume(253);                 // 'value'
      break;
    case 254:                       // 'variable'
      consume(254);                 // 'variable'
      break;
    case 255:                       // 'version'
      consume(255);                 // 'version'
      break;
    case 259:                       // 'while'
      consume(259);                 // 'while'
      break;
    case 94:                        // 'constraint'
      consume(94);                  // 'constraint'
      break;
    case 171:                       // 'loop'
      consume(171);                 // 'loop'
      break;
    default:
      consume(214);                 // 'returning'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  private void try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      consumeT(6);                  // EQName^Token
      break;
    case 69:                        // 'after'
      consumeT(69);                 // 'after'
      break;
    case 72:                        // 'ancestor'
      consumeT(72);                 // 'ancestor'
      break;
    case 73:                        // 'ancestor-or-self'
      consumeT(73);                 // 'ancestor-or-self'
      break;
    case 74:                        // 'and'
      consumeT(74);                 // 'and'
      break;
    case 76:                        // 'as'
      consumeT(76);                 // 'as'
      break;
    case 77:                        // 'ascending'
      consumeT(77);                 // 'ascending'
      break;
    case 81:                        // 'before'
      consumeT(81);                 // 'before'
      break;
    case 85:                        // 'case'
      consumeT(85);                 // 'case'
      break;
    case 86:                        // 'cast'
      consumeT(86);                 // 'cast'
      break;
    case 87:                        // 'castable'
      consumeT(87);                 // 'castable'
      break;
    case 90:                        // 'child'
      consumeT(90);                 // 'child'
      break;
    case 91:                        // 'collation'
      consumeT(91);                 // 'collation'
      break;
    case 100:                       // 'copy'
      consumeT(100);                // 'copy'
      break;
    case 102:                       // 'count'
      consumeT(102);                // 'count'
      break;
    case 105:                       // 'declare'
      consumeT(105);                // 'declare'
      break;
    case 106:                       // 'default'
      consumeT(106);                // 'default'
      break;
    case 107:                       // 'delete'
      consumeT(107);                // 'delete'
      break;
    case 108:                       // 'descendant'
      consumeT(108);                // 'descendant'
      break;
    case 109:                       // 'descendant-or-self'
      consumeT(109);                // 'descendant-or-self'
      break;
    case 110:                       // 'descending'
      consumeT(110);                // 'descending'
      break;
    case 115:                       // 'div'
      consumeT(115);                // 'div'
      break;
    case 116:                       // 'document'
      consumeT(116);                // 'document'
      break;
    case 119:                       // 'else'
      consumeT(119);                // 'else'
      break;
    case 120:                       // 'empty'
      consumeT(120);                // 'empty'
      break;
    case 123:                       // 'end'
      consumeT(123);                // 'end'
      break;
    case 125:                       // 'eq'
      consumeT(125);                // 'eq'
      break;
    case 126:                       // 'every'
      consumeT(126);                // 'every'
      break;
    case 128:                       // 'except'
      consumeT(128);                // 'except'
      break;
    case 131:                       // 'first'
      consumeT(131);                // 'first'
      break;
    case 132:                       // 'following'
      consumeT(132);                // 'following'
      break;
    case 133:                       // 'following-sibling'
      consumeT(133);                // 'following-sibling'
      break;
    case 134:                       // 'for'
      consumeT(134);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 150:                       // 'import'
      consumeT(150);                // 'import'
      break;
    case 156:                       // 'insert'
      consumeT(156);                // 'insert'
      break;
    case 157:                       // 'instance'
      consumeT(157);                // 'instance'
      break;
    case 159:                       // 'intersect'
      consumeT(159);                // 'intersect'
      break;
    case 160:                       // 'into'
      consumeT(160);                // 'into'
      break;
    case 161:                       // 'is'
      consumeT(161);                // 'is'
      break;
    case 165:                       // 'last'
      consumeT(165);                // 'last'
      break;
    case 167:                       // 'le'
      consumeT(167);                // 'le'
      break;
    case 169:                       // 'let'
      consumeT(169);                // 'let'
      break;
    case 173:                       // 'lt'
      consumeT(173);                // 'lt'
      break;
    case 175:                       // 'mod'
      consumeT(175);                // 'mod'
      break;
    case 176:                       // 'modify'
      consumeT(176);                // 'modify'
      break;
    case 177:                       // 'module'
      consumeT(177);                // 'module'
      break;
    case 179:                       // 'namespace'
      consumeT(179);                // 'namespace'
      break;
    case 181:                       // 'ne'
      consumeT(181);                // 'ne'
      break;
    case 192:                       // 'only'
      consumeT(192);                // 'only'
      break;
    case 194:                       // 'or'
      consumeT(194);                // 'or'
      break;
    case 195:                       // 'order'
      consumeT(195);                // 'order'
      break;
    case 196:                       // 'ordered'
      consumeT(196);                // 'ordered'
      break;
    case 200:                       // 'parent'
      consumeT(200);                // 'parent'
      break;
    case 205:                       // 'preceding'
      consumeT(205);                // 'preceding'
      break;
    case 206:                       // 'preceding-sibling'
      consumeT(206);                // 'preceding-sibling'
      break;
    case 211:                       // 'rename'
      consumeT(211);                // 'rename'
      break;
    case 212:                       // 'replace'
      consumeT(212);                // 'replace'
      break;
    case 213:                       // 'return'
      consumeT(213);                // 'return'
      break;
    case 217:                       // 'satisfies'
      consumeT(217);                // 'satisfies'
      break;
    case 222:                       // 'self'
      consumeT(222);                // 'self'
      break;
    case 228:                       // 'some'
      consumeT(228);                // 'some'
      break;
    case 229:                       // 'stable'
      consumeT(229);                // 'stable'
      break;
    case 230:                       // 'start'
      consumeT(230);                // 'start'
      break;
    case 240:                       // 'to'
      consumeT(240);                // 'to'
      break;
    case 241:                       // 'treat'
      consumeT(241);                // 'treat'
      break;
    case 242:                       // 'try'
      consumeT(242);                // 'try'
      break;
    case 246:                       // 'union'
      consumeT(246);                // 'union'
      break;
    case 248:                       // 'unordered'
      consumeT(248);                // 'unordered'
      break;
    case 252:                       // 'validate'
      consumeT(252);                // 'validate'
      break;
    case 258:                       // 'where'
      consumeT(258);                // 'where'
      break;
    case 262:                       // 'with'
      consumeT(262);                // 'with'
      break;
    case 266:                       // 'xquery'
      consumeT(266);                // 'xquery'
      break;
    case 71:                        // 'allowing'
      consumeT(71);                 // 'allowing'
      break;
    case 78:                        // 'at'
      consumeT(78);                 // 'at'
      break;
    case 80:                        // 'base-uri'
      consumeT(80);                 // 'base-uri'
      break;
    case 82:                        // 'boundary-space'
      consumeT(82);                 // 'boundary-space'
      break;
    case 83:                        // 'break'
      consumeT(83);                 // 'break'
      break;
    case 88:                        // 'catch'
      consumeT(88);                 // 'catch'
      break;
    case 95:                        // 'construction'
      consumeT(95);                 // 'construction'
      break;
    case 98:                        // 'context'
      consumeT(98);                 // 'context'
      break;
    case 99:                        // 'continue'
      consumeT(99);                 // 'continue'
      break;
    case 101:                       // 'copy-namespaces'
      consumeT(101);                // 'copy-namespaces'
      break;
    case 103:                       // 'decimal-format'
      consumeT(103);                // 'decimal-format'
      break;
    case 122:                       // 'encoding'
      consumeT(122);                // 'encoding'
      break;
    case 129:                       // 'exit'
      consumeT(129);                // 'exit'
      break;
    case 130:                       // 'external'
      consumeT(130);                // 'external'
      break;
    case 138:                       // 'ft-option'
      consumeT(138);                // 'ft-option'
      break;
    case 151:                       // 'in'
      consumeT(151);                // 'in'
      break;
    case 152:                       // 'index'
      consumeT(152);                // 'index'
      break;
    case 158:                       // 'integrity'
      consumeT(158);                // 'integrity'
      break;
    case 166:                       // 'lax'
      consumeT(166);                // 'lax'
      break;
    case 187:                       // 'nodes'
      consumeT(187);                // 'nodes'
      break;
    case 193:                       // 'option'
      consumeT(193);                // 'option'
      break;
    case 197:                       // 'ordering'
      consumeT(197);                // 'ordering'
      break;
    case 215:                       // 'revalidation'
      consumeT(215);                // 'revalidation'
      break;
    case 218:                       // 'schema'
      consumeT(218);                // 'schema'
      break;
    case 221:                       // 'score'
      consumeT(221);                // 'score'
      break;
    case 227:                       // 'sliding'
      consumeT(227);                // 'sliding'
      break;
    case 233:                       // 'strict'
      consumeT(233);                // 'strict'
      break;
    case 243:                       // 'tumbling'
      consumeT(243);                // 'tumbling'
      break;
    case 244:                       // 'type'
      consumeT(244);                // 'type'
      break;
    case 249:                       // 'updating'
      consumeT(249);                // 'updating'
      break;
    case 253:                       // 'value'
      consumeT(253);                // 'value'
      break;
    case 254:                       // 'variable'
      consumeT(254);                // 'variable'
      break;
    case 255:                       // 'version'
      consumeT(255);                // 'version'
      break;
    case 259:                       // 'while'
      consumeT(259);                // 'while'
      break;
    case 94:                        // 'constraint'
      consumeT(94);                 // 'constraint'
      break;
    case 171:                       // 'loop'
      consumeT(171);                // 'loop'
      break;
    default:
      consumeT(214);                // 'returning'
    }
  }

  private void parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      consume(19);                  // NCName^Token
      break;
    case 69:                        // 'after'
      consume(69);                  // 'after'
      break;
    case 74:                        // 'and'
      consume(74);                  // 'and'
      break;
    case 76:                        // 'as'
      consume(76);                  // 'as'
      break;
    case 77:                        // 'ascending'
      consume(77);                  // 'ascending'
      break;
    case 81:                        // 'before'
      consume(81);                  // 'before'
      break;
    case 85:                        // 'case'
      consume(85);                  // 'case'
      break;
    case 86:                        // 'cast'
      consume(86);                  // 'cast'
      break;
    case 87:                        // 'castable'
      consume(87);                  // 'castable'
      break;
    case 91:                        // 'collation'
      consume(91);                  // 'collation'
      break;
    case 102:                       // 'count'
      consume(102);                 // 'count'
      break;
    case 106:                       // 'default'
      consume(106);                 // 'default'
      break;
    case 110:                       // 'descending'
      consume(110);                 // 'descending'
      break;
    case 115:                       // 'div'
      consume(115);                 // 'div'
      break;
    case 119:                       // 'else'
      consume(119);                 // 'else'
      break;
    case 120:                       // 'empty'
      consume(120);                 // 'empty'
      break;
    case 123:                       // 'end'
      consume(123);                 // 'end'
      break;
    case 125:                       // 'eq'
      consume(125);                 // 'eq'
      break;
    case 128:                       // 'except'
      consume(128);                 // 'except'
      break;
    case 134:                       // 'for'
      consume(134);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 157:                       // 'instance'
      consume(157);                 // 'instance'
      break;
    case 159:                       // 'intersect'
      consume(159);                 // 'intersect'
      break;
    case 160:                       // 'into'
      consume(160);                 // 'into'
      break;
    case 161:                       // 'is'
      consume(161);                 // 'is'
      break;
    case 167:                       // 'le'
      consume(167);                 // 'le'
      break;
    case 169:                       // 'let'
      consume(169);                 // 'let'
      break;
    case 173:                       // 'lt'
      consume(173);                 // 'lt'
      break;
    case 175:                       // 'mod'
      consume(175);                 // 'mod'
      break;
    case 176:                       // 'modify'
      consume(176);                 // 'modify'
      break;
    case 181:                       // 'ne'
      consume(181);                 // 'ne'
      break;
    case 192:                       // 'only'
      consume(192);                 // 'only'
      break;
    case 194:                       // 'or'
      consume(194);                 // 'or'
      break;
    case 195:                       // 'order'
      consume(195);                 // 'order'
      break;
    case 213:                       // 'return'
      consume(213);                 // 'return'
      break;
    case 217:                       // 'satisfies'
      consume(217);                 // 'satisfies'
      break;
    case 229:                       // 'stable'
      consume(229);                 // 'stable'
      break;
    case 230:                       // 'start'
      consume(230);                 // 'start'
      break;
    case 240:                       // 'to'
      consume(240);                 // 'to'
      break;
    case 241:                       // 'treat'
      consume(241);                 // 'treat'
      break;
    case 246:                       // 'union'
      consume(246);                 // 'union'
      break;
    case 258:                       // 'where'
      consume(258);                 // 'where'
      break;
    case 262:                       // 'with'
      consume(262);                 // 'with'
      break;
    case 72:                        // 'ancestor'
      consume(72);                  // 'ancestor'
      break;
    case 73:                        // 'ancestor-or-self'
      consume(73);                  // 'ancestor-or-self'
      break;
    case 79:                        // 'attribute'
      consume(79);                  // 'attribute'
      break;
    case 90:                        // 'child'
      consume(90);                  // 'child'
      break;
    case 93:                        // 'comment'
      consume(93);                  // 'comment'
      break;
    case 100:                       // 'copy'
      consume(100);                 // 'copy'
      break;
    case 105:                       // 'declare'
      consume(105);                 // 'declare'
      break;
    case 107:                       // 'delete'
      consume(107);                 // 'delete'
      break;
    case 108:                       // 'descendant'
      consume(108);                 // 'descendant'
      break;
    case 109:                       // 'descendant-or-self'
      consume(109);                 // 'descendant-or-self'
      break;
    case 116:                       // 'document'
      consume(116);                 // 'document'
      break;
    case 117:                       // 'document-node'
      consume(117);                 // 'document-node'
      break;
    case 118:                       // 'element'
      consume(118);                 // 'element'
      break;
    case 121:                       // 'empty-sequence'
      consume(121);                 // 'empty-sequence'
      break;
    case 126:                       // 'every'
      consume(126);                 // 'every'
      break;
    case 131:                       // 'first'
      consume(131);                 // 'first'
      break;
    case 132:                       // 'following'
      consume(132);                 // 'following'
      break;
    case 133:                       // 'following-sibling'
      consume(133);                 // 'following-sibling'
      break;
    case 142:                       // 'function'
      consume(142);                 // 'function'
      break;
    case 149:                       // 'if'
      consume(149);                 // 'if'
      break;
    case 150:                       // 'import'
      consume(150);                 // 'import'
      break;
    case 156:                       // 'insert'
      consume(156);                 // 'insert'
      break;
    case 162:                       // 'item'
      consume(162);                 // 'item'
      break;
    case 165:                       // 'last'
      consume(165);                 // 'last'
      break;
    case 177:                       // 'module'
      consume(177);                 // 'module'
      break;
    case 179:                       // 'namespace'
      consume(179);                 // 'namespace'
      break;
    case 180:                       // 'namespace-node'
      consume(180);                 // 'namespace-node'
      break;
    case 186:                       // 'node'
      consume(186);                 // 'node'
      break;
    case 196:                       // 'ordered'
      consume(196);                 // 'ordered'
      break;
    case 200:                       // 'parent'
      consume(200);                 // 'parent'
      break;
    case 205:                       // 'preceding'
      consume(205);                 // 'preceding'
      break;
    case 206:                       // 'preceding-sibling'
      consume(206);                 // 'preceding-sibling'
      break;
    case 209:                       // 'processing-instruction'
      consume(209);                 // 'processing-instruction'
      break;
    case 211:                       // 'rename'
      consume(211);                 // 'rename'
      break;
    case 212:                       // 'replace'
      consume(212);                 // 'replace'
      break;
    case 219:                       // 'schema-attribute'
      consume(219);                 // 'schema-attribute'
      break;
    case 220:                       // 'schema-element'
      consume(220);                 // 'schema-element'
      break;
    case 222:                       // 'self'
      consume(222);                 // 'self'
      break;
    case 228:                       // 'some'
      consume(228);                 // 'some'
      break;
    case 235:                       // 'switch'
      consume(235);                 // 'switch'
      break;
    case 236:                       // 'text'
      consume(236);                 // 'text'
      break;
    case 242:                       // 'try'
      consume(242);                 // 'try'
      break;
    case 245:                       // 'typeswitch'
      consume(245);                 // 'typeswitch'
      break;
    case 248:                       // 'unordered'
      consume(248);                 // 'unordered'
      break;
    case 252:                       // 'validate'
      consume(252);                 // 'validate'
      break;
    case 254:                       // 'variable'
      consume(254);                 // 'variable'
      break;
    case 266:                       // 'xquery'
      consume(266);                 // 'xquery'
      break;
    case 71:                        // 'allowing'
      consume(71);                  // 'allowing'
      break;
    case 78:                        // 'at'
      consume(78);                  // 'at'
      break;
    case 80:                        // 'base-uri'
      consume(80);                  // 'base-uri'
      break;
    case 82:                        // 'boundary-space'
      consume(82);                  // 'boundary-space'
      break;
    case 83:                        // 'break'
      consume(83);                  // 'break'
      break;
    case 88:                        // 'catch'
      consume(88);                  // 'catch'
      break;
    case 95:                        // 'construction'
      consume(95);                  // 'construction'
      break;
    case 98:                        // 'context'
      consume(98);                  // 'context'
      break;
    case 99:                        // 'continue'
      consume(99);                  // 'continue'
      break;
    case 101:                       // 'copy-namespaces'
      consume(101);                 // 'copy-namespaces'
      break;
    case 103:                       // 'decimal-format'
      consume(103);                 // 'decimal-format'
      break;
    case 122:                       // 'encoding'
      consume(122);                 // 'encoding'
      break;
    case 129:                       // 'exit'
      consume(129);                 // 'exit'
      break;
    case 130:                       // 'external'
      consume(130);                 // 'external'
      break;
    case 138:                       // 'ft-option'
      consume(138);                 // 'ft-option'
      break;
    case 151:                       // 'in'
      consume(151);                 // 'in'
      break;
    case 152:                       // 'index'
      consume(152);                 // 'index'
      break;
    case 158:                       // 'integrity'
      consume(158);                 // 'integrity'
      break;
    case 166:                       // 'lax'
      consume(166);                 // 'lax'
      break;
    case 187:                       // 'nodes'
      consume(187);                 // 'nodes'
      break;
    case 193:                       // 'option'
      consume(193);                 // 'option'
      break;
    case 197:                       // 'ordering'
      consume(197);                 // 'ordering'
      break;
    case 215:                       // 'revalidation'
      consume(215);                 // 'revalidation'
      break;
    case 218:                       // 'schema'
      consume(218);                 // 'schema'
      break;
    case 221:                       // 'score'
      consume(221);                 // 'score'
      break;
    case 227:                       // 'sliding'
      consume(227);                 // 'sliding'
      break;
    case 233:                       // 'strict'
      consume(233);                 // 'strict'
      break;
    case 243:                       // 'tumbling'
      consume(243);                 // 'tumbling'
      break;
    case 244:                       // 'type'
      consume(244);                 // 'type'
      break;
    case 249:                       // 'updating'
      consume(249);                 // 'updating'
      break;
    case 253:                       // 'value'
      consume(253);                 // 'value'
      break;
    case 255:                       // 'version'
      consume(255);                 // 'version'
      break;
    case 259:                       // 'while'
      consume(259);                 // 'while'
      break;
    case 94:                        // 'constraint'
      consume(94);                  // 'constraint'
      break;
    case 171:                       // 'loop'
      consume(171);                 // 'loop'
      break;
    default:
      consume(214);                 // 'returning'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  private void try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      consumeT(19);                 // NCName^Token
      break;
    case 69:                        // 'after'
      consumeT(69);                 // 'after'
      break;
    case 74:                        // 'and'
      consumeT(74);                 // 'and'
      break;
    case 76:                        // 'as'
      consumeT(76);                 // 'as'
      break;
    case 77:                        // 'ascending'
      consumeT(77);                 // 'ascending'
      break;
    case 81:                        // 'before'
      consumeT(81);                 // 'before'
      break;
    case 85:                        // 'case'
      consumeT(85);                 // 'case'
      break;
    case 86:                        // 'cast'
      consumeT(86);                 // 'cast'
      break;
    case 87:                        // 'castable'
      consumeT(87);                 // 'castable'
      break;
    case 91:                        // 'collation'
      consumeT(91);                 // 'collation'
      break;
    case 102:                       // 'count'
      consumeT(102);                // 'count'
      break;
    case 106:                       // 'default'
      consumeT(106);                // 'default'
      break;
    case 110:                       // 'descending'
      consumeT(110);                // 'descending'
      break;
    case 115:                       // 'div'
      consumeT(115);                // 'div'
      break;
    case 119:                       // 'else'
      consumeT(119);                // 'else'
      break;
    case 120:                       // 'empty'
      consumeT(120);                // 'empty'
      break;
    case 123:                       // 'end'
      consumeT(123);                // 'end'
      break;
    case 125:                       // 'eq'
      consumeT(125);                // 'eq'
      break;
    case 128:                       // 'except'
      consumeT(128);                // 'except'
      break;
    case 134:                       // 'for'
      consumeT(134);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 157:                       // 'instance'
      consumeT(157);                // 'instance'
      break;
    case 159:                       // 'intersect'
      consumeT(159);                // 'intersect'
      break;
    case 160:                       // 'into'
      consumeT(160);                // 'into'
      break;
    case 161:                       // 'is'
      consumeT(161);                // 'is'
      break;
    case 167:                       // 'le'
      consumeT(167);                // 'le'
      break;
    case 169:                       // 'let'
      consumeT(169);                // 'let'
      break;
    case 173:                       // 'lt'
      consumeT(173);                // 'lt'
      break;
    case 175:                       // 'mod'
      consumeT(175);                // 'mod'
      break;
    case 176:                       // 'modify'
      consumeT(176);                // 'modify'
      break;
    case 181:                       // 'ne'
      consumeT(181);                // 'ne'
      break;
    case 192:                       // 'only'
      consumeT(192);                // 'only'
      break;
    case 194:                       // 'or'
      consumeT(194);                // 'or'
      break;
    case 195:                       // 'order'
      consumeT(195);                // 'order'
      break;
    case 213:                       // 'return'
      consumeT(213);                // 'return'
      break;
    case 217:                       // 'satisfies'
      consumeT(217);                // 'satisfies'
      break;
    case 229:                       // 'stable'
      consumeT(229);                // 'stable'
      break;
    case 230:                       // 'start'
      consumeT(230);                // 'start'
      break;
    case 240:                       // 'to'
      consumeT(240);                // 'to'
      break;
    case 241:                       // 'treat'
      consumeT(241);                // 'treat'
      break;
    case 246:                       // 'union'
      consumeT(246);                // 'union'
      break;
    case 258:                       // 'where'
      consumeT(258);                // 'where'
      break;
    case 262:                       // 'with'
      consumeT(262);                // 'with'
      break;
    case 72:                        // 'ancestor'
      consumeT(72);                 // 'ancestor'
      break;
    case 73:                        // 'ancestor-or-self'
      consumeT(73);                 // 'ancestor-or-self'
      break;
    case 79:                        // 'attribute'
      consumeT(79);                 // 'attribute'
      break;
    case 90:                        // 'child'
      consumeT(90);                 // 'child'
      break;
    case 93:                        // 'comment'
      consumeT(93);                 // 'comment'
      break;
    case 100:                       // 'copy'
      consumeT(100);                // 'copy'
      break;
    case 105:                       // 'declare'
      consumeT(105);                // 'declare'
      break;
    case 107:                       // 'delete'
      consumeT(107);                // 'delete'
      break;
    case 108:                       // 'descendant'
      consumeT(108);                // 'descendant'
      break;
    case 109:                       // 'descendant-or-self'
      consumeT(109);                // 'descendant-or-self'
      break;
    case 116:                       // 'document'
      consumeT(116);                // 'document'
      break;
    case 117:                       // 'document-node'
      consumeT(117);                // 'document-node'
      break;
    case 118:                       // 'element'
      consumeT(118);                // 'element'
      break;
    case 121:                       // 'empty-sequence'
      consumeT(121);                // 'empty-sequence'
      break;
    case 126:                       // 'every'
      consumeT(126);                // 'every'
      break;
    case 131:                       // 'first'
      consumeT(131);                // 'first'
      break;
    case 132:                       // 'following'
      consumeT(132);                // 'following'
      break;
    case 133:                       // 'following-sibling'
      consumeT(133);                // 'following-sibling'
      break;
    case 142:                       // 'function'
      consumeT(142);                // 'function'
      break;
    case 149:                       // 'if'
      consumeT(149);                // 'if'
      break;
    case 150:                       // 'import'
      consumeT(150);                // 'import'
      break;
    case 156:                       // 'insert'
      consumeT(156);                // 'insert'
      break;
    case 162:                       // 'item'
      consumeT(162);                // 'item'
      break;
    case 165:                       // 'last'
      consumeT(165);                // 'last'
      break;
    case 177:                       // 'module'
      consumeT(177);                // 'module'
      break;
    case 179:                       // 'namespace'
      consumeT(179);                // 'namespace'
      break;
    case 180:                       // 'namespace-node'
      consumeT(180);                // 'namespace-node'
      break;
    case 186:                       // 'node'
      consumeT(186);                // 'node'
      break;
    case 196:                       // 'ordered'
      consumeT(196);                // 'ordered'
      break;
    case 200:                       // 'parent'
      consumeT(200);                // 'parent'
      break;
    case 205:                       // 'preceding'
      consumeT(205);                // 'preceding'
      break;
    case 206:                       // 'preceding-sibling'
      consumeT(206);                // 'preceding-sibling'
      break;
    case 209:                       // 'processing-instruction'
      consumeT(209);                // 'processing-instruction'
      break;
    case 211:                       // 'rename'
      consumeT(211);                // 'rename'
      break;
    case 212:                       // 'replace'
      consumeT(212);                // 'replace'
      break;
    case 219:                       // 'schema-attribute'
      consumeT(219);                // 'schema-attribute'
      break;
    case 220:                       // 'schema-element'
      consumeT(220);                // 'schema-element'
      break;
    case 222:                       // 'self'
      consumeT(222);                // 'self'
      break;
    case 228:                       // 'some'
      consumeT(228);                // 'some'
      break;
    case 235:                       // 'switch'
      consumeT(235);                // 'switch'
      break;
    case 236:                       // 'text'
      consumeT(236);                // 'text'
      break;
    case 242:                       // 'try'
      consumeT(242);                // 'try'
      break;
    case 245:                       // 'typeswitch'
      consumeT(245);                // 'typeswitch'
      break;
    case 248:                       // 'unordered'
      consumeT(248);                // 'unordered'
      break;
    case 252:                       // 'validate'
      consumeT(252);                // 'validate'
      break;
    case 254:                       // 'variable'
      consumeT(254);                // 'variable'
      break;
    case 266:                       // 'xquery'
      consumeT(266);                // 'xquery'
      break;
    case 71:                        // 'allowing'
      consumeT(71);                 // 'allowing'
      break;
    case 78:                        // 'at'
      consumeT(78);                 // 'at'
      break;
    case 80:                        // 'base-uri'
      consumeT(80);                 // 'base-uri'
      break;
    case 82:                        // 'boundary-space'
      consumeT(82);                 // 'boundary-space'
      break;
    case 83:                        // 'break'
      consumeT(83);                 // 'break'
      break;
    case 88:                        // 'catch'
      consumeT(88);                 // 'catch'
      break;
    case 95:                        // 'construction'
      consumeT(95);                 // 'construction'
      break;
    case 98:                        // 'context'
      consumeT(98);                 // 'context'
      break;
    case 99:                        // 'continue'
      consumeT(99);                 // 'continue'
      break;
    case 101:                       // 'copy-namespaces'
      consumeT(101);                // 'copy-namespaces'
      break;
    case 103:                       // 'decimal-format'
      consumeT(103);                // 'decimal-format'
      break;
    case 122:                       // 'encoding'
      consumeT(122);                // 'encoding'
      break;
    case 129:                       // 'exit'
      consumeT(129);                // 'exit'
      break;
    case 130:                       // 'external'
      consumeT(130);                // 'external'
      break;
    case 138:                       // 'ft-option'
      consumeT(138);                // 'ft-option'
      break;
    case 151:                       // 'in'
      consumeT(151);                // 'in'
      break;
    case 152:                       // 'index'
      consumeT(152);                // 'index'
      break;
    case 158:                       // 'integrity'
      consumeT(158);                // 'integrity'
      break;
    case 166:                       // 'lax'
      consumeT(166);                // 'lax'
      break;
    case 187:                       // 'nodes'
      consumeT(187);                // 'nodes'
      break;
    case 193:                       // 'option'
      consumeT(193);                // 'option'
      break;
    case 197:                       // 'ordering'
      consumeT(197);                // 'ordering'
      break;
    case 215:                       // 'revalidation'
      consumeT(215);                // 'revalidation'
      break;
    case 218:                       // 'schema'
      consumeT(218);                // 'schema'
      break;
    case 221:                       // 'score'
      consumeT(221);                // 'score'
      break;
    case 227:                       // 'sliding'
      consumeT(227);                // 'sliding'
      break;
    case 233:                       // 'strict'
      consumeT(233);                // 'strict'
      break;
    case 243:                       // 'tumbling'
      consumeT(243);                // 'tumbling'
      break;
    case 244:                       // 'type'
      consumeT(244);                // 'type'
      break;
    case 249:                       // 'updating'
      consumeT(249);                // 'updating'
      break;
    case 253:                       // 'value'
      consumeT(253);                // 'value'
      break;
    case 255:                       // 'version'
      consumeT(255);                // 'version'
      break;
    case 259:                       // 'while'
      consumeT(259);                // 'while'
      break;
    case 94:                        // 'constraint'
      consumeT(94);                 // 'constraint'
      break;
    case 171:                       // 'loop'
      consumeT(171);                // 'loop'
      break;
    default:
      consumeT(214);                // 'returning'
    }
  }

  private void parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  private void parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  private void parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(262);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 35:                      // '(#'
        lookahead2(244);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' |
                                    // '>>' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(258);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 53:                      // '<'
        lookahead2(4);              // QName
        break;
      case 54:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 58:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 65:                      // '@'
        lookahead2W(247);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 79:                      // 'attribute'
        lookahead2W(270);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 118:                     // 'element'
        lookahead2W(268);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 129:                     // 'exit'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 134:                     // 'for'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 169:                     // 'let'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 211:                     // 'rename'
        lookahead2W(198);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 212:                     // 'replace'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 252:                     // 'validate'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 268:                     // '{'
        lookahead2W(264);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(182);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(245);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(260);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 83:                      // 'break'
      case 99:                      // 'continue'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 107:                     // 'delete'
      case 156:                     // 'insert'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'nodes' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 121:                     // 'empty-sequence'
      case 162:                     // 'item'
        lookahead2W(187);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 179:                     // 'namespace'
      case 209:                     // 'processing-instruction'
        lookahead2W(269);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 100:                     // 'copy'
      case 126:                     // 'every'
      case 228:                     // 'some'
      case 254:                     // 'variable'
        lookahead2W(193);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(188);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 93:                      // 'comment'
      case 116:                     // 'document'
      case 196:                     // 'ordered'
      case 236:                     // 'text'
      case 242:                     // 'try'
      case 248:                     // 'unordered'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 72:                      // 'ancestor'
      case 73:                      // 'ancestor-or-self'
      case 90:                      // 'child'
      case 108:                     // 'descendant'
      case 109:                     // 'descendant-or-self'
      case 132:                     // 'following'
      case 133:                     // 'following-sibling'
      case 200:                     // 'parent'
      case 205:                     // 'preceding'
      case 206:                     // 'preceding-sibling'
      case 222:                     // 'self'
        lookahead2W(194);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 69:                      // 'after'
      case 71:                      // 'allowing'
      case 74:                      // 'and'
      case 76:                      // 'as'
      case 77:                      // 'ascending'
      case 78:                      // 'at'
      case 80:                      // 'base-uri'
      case 81:                      // 'before'
      case 82:                      // 'boundary-space'
      case 85:                      // 'case'
      case 86:                      // 'cast'
      case 87:                      // 'castable'
      case 88:                      // 'catch'
      case 91:                      // 'collation'
      case 94:                      // 'constraint'
      case 95:                      // 'construction'
      case 98:                      // 'context'
      case 101:                     // 'copy-namespaces'
      case 102:                     // 'count'
      case 103:                     // 'decimal-format'
      case 105:                     // 'declare'
      case 106:                     // 'default'
      case 110:                     // 'descending'
      case 115:                     // 'div'
      case 117:                     // 'document-node'
      case 119:                     // 'else'
      case 120:                     // 'empty'
      case 122:                     // 'encoding'
      case 123:                     // 'end'
      case 125:                     // 'eq'
      case 128:                     // 'except'
      case 130:                     // 'external'
      case 131:                     // 'first'
      case 138:                     // 'ft-option'
      case 142:                     // 'function'
      case 143:                     // 'ge'
      case 145:                     // 'group'
      case 147:                     // 'gt'
      case 148:                     // 'idiv'
      case 149:                     // 'if'
      case 150:                     // 'import'
      case 151:                     // 'in'
      case 152:                     // 'index'
      case 157:                     // 'instance'
      case 158:                     // 'integrity'
      case 159:                     // 'intersect'
      case 160:                     // 'into'
      case 161:                     // 'is'
      case 165:                     // 'last'
      case 166:                     // 'lax'
      case 167:                     // 'le'
      case 171:                     // 'loop'
      case 173:                     // 'lt'
      case 175:                     // 'mod'
      case 176:                     // 'modify'
      case 177:                     // 'module'
      case 180:                     // 'namespace-node'
      case 181:                     // 'ne'
      case 186:                     // 'node'
      case 187:                     // 'nodes'
      case 192:                     // 'only'
      case 193:                     // 'option'
      case 194:                     // 'or'
      case 195:                     // 'order'
      case 197:                     // 'ordering'
      case 213:                     // 'return'
      case 214:                     // 'returning'
      case 215:                     // 'revalidation'
      case 217:                     // 'satisfies'
      case 218:                     // 'schema'
      case 219:                     // 'schema-attribute'
      case 220:                     // 'schema-element'
      case 221:                     // 'score'
      case 227:                     // 'sliding'
      case 229:                     // 'stable'
      case 230:                     // 'start'
      case 233:                     // 'strict'
      case 235:                     // 'switch'
      case 240:                     // 'to'
      case 241:                     // 'treat'
      case 243:                     // 'tumbling'
      case 244:                     // 'type'
      case 245:                     // 'typeswitch'
      case 246:                     // 'union'
      case 249:                     // 'updating'
      case 253:                     // 'value'
      case 255:                     // 'version'
      case 258:                     // 'where'
      case 259:                     // 'while'
      case 262:                     // 'with'
      case 266:                     // 'xquery'
        lookahead2W(191);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 272                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12869               // 'after' EOF
       && lk != 12871               // 'allowing' EOF
       && lk != 12872               // 'ancestor' EOF
       && lk != 12873               // 'ancestor-or-self' EOF
       && lk != 12874               // 'and' EOF
       && lk != 12876               // 'as' EOF
       && lk != 12877               // 'ascending' EOF
       && lk != 12878               // 'at' EOF
       && lk != 12879               // 'attribute' EOF
       && lk != 12880               // 'base-uri' EOF
       && lk != 12881               // 'before' EOF
       && lk != 12882               // 'boundary-space' EOF
       && lk != 12883               // 'break' EOF
       && lk != 12885               // 'case' EOF
       && lk != 12886               // 'cast' EOF
       && lk != 12887               // 'castable' EOF
       && lk != 12888               // 'catch' EOF
       && lk != 12890               // 'child' EOF
       && lk != 12891               // 'collation' EOF
       && lk != 12893               // 'comment' EOF
       && lk != 12894               // 'constraint' EOF
       && lk != 12895               // 'construction' EOF
       && lk != 12898               // 'context' EOF
       && lk != 12899               // 'continue' EOF
       && lk != 12900               // 'copy' EOF
       && lk != 12901               // 'copy-namespaces' EOF
       && lk != 12902               // 'count' EOF
       && lk != 12903               // 'decimal-format' EOF
       && lk != 12905               // 'declare' EOF
       && lk != 12906               // 'default' EOF
       && lk != 12907               // 'delete' EOF
       && lk != 12908               // 'descendant' EOF
       && lk != 12909               // 'descendant-or-self' EOF
       && lk != 12910               // 'descending' EOF
       && lk != 12915               // 'div' EOF
       && lk != 12916               // 'document' EOF
       && lk != 12917               // 'document-node' EOF
       && lk != 12918               // 'element' EOF
       && lk != 12919               // 'else' EOF
       && lk != 12920               // 'empty' EOF
       && lk != 12921               // 'empty-sequence' EOF
       && lk != 12922               // 'encoding' EOF
       && lk != 12923               // 'end' EOF
       && lk != 12925               // 'eq' EOF
       && lk != 12926               // 'every' EOF
       && lk != 12928               // 'except' EOF
       && lk != 12929               // 'exit' EOF
       && lk != 12930               // 'external' EOF
       && lk != 12931               // 'first' EOF
       && lk != 12932               // 'following' EOF
       && lk != 12933               // 'following-sibling' EOF
       && lk != 12934               // 'for' EOF
       && lk != 12938               // 'ft-option' EOF
       && lk != 12942               // 'function' EOF
       && lk != 12943               // 'ge' EOF
       && lk != 12945               // 'group' EOF
       && lk != 12947               // 'gt' EOF
       && lk != 12948               // 'idiv' EOF
       && lk != 12949               // 'if' EOF
       && lk != 12950               // 'import' EOF
       && lk != 12951               // 'in' EOF
       && lk != 12952               // 'index' EOF
       && lk != 12956               // 'insert' EOF
       && lk != 12957               // 'instance' EOF
       && lk != 12958               // 'integrity' EOF
       && lk != 12959               // 'intersect' EOF
       && lk != 12960               // 'into' EOF
       && lk != 12961               // 'is' EOF
       && lk != 12962               // 'item' EOF
       && lk != 12965               // 'last' EOF
       && lk != 12966               // 'lax' EOF
       && lk != 12967               // 'le' EOF
       && lk != 12969               // 'let' EOF
       && lk != 12971               // 'loop' EOF
       && lk != 12973               // 'lt' EOF
       && lk != 12975               // 'mod' EOF
       && lk != 12976               // 'modify' EOF
       && lk != 12977               // 'module' EOF
       && lk != 12979               // 'namespace' EOF
       && lk != 12980               // 'namespace-node' EOF
       && lk != 12981               // 'ne' EOF
       && lk != 12986               // 'node' EOF
       && lk != 12987               // 'nodes' EOF
       && lk != 12992               // 'only' EOF
       && lk != 12993               // 'option' EOF
       && lk != 12994               // 'or' EOF
       && lk != 12995               // 'order' EOF
       && lk != 12996               // 'ordered' EOF
       && lk != 12997               // 'ordering' EOF
       && lk != 13000               // 'parent' EOF
       && lk != 13005               // 'preceding' EOF
       && lk != 13006               // 'preceding-sibling' EOF
       && lk != 13009               // 'processing-instruction' EOF
       && lk != 13011               // 'rename' EOF
       && lk != 13012               // 'replace' EOF
       && lk != 13013               // 'return' EOF
       && lk != 13014               // 'returning' EOF
       && lk != 13015               // 'revalidation' EOF
       && lk != 13017               // 'satisfies' EOF
       && lk != 13018               // 'schema' EOF
       && lk != 13019               // 'schema-attribute' EOF
       && lk != 13020               // 'schema-element' EOF
       && lk != 13021               // 'score' EOF
       && lk != 13022               // 'self' EOF
       && lk != 13027               // 'sliding' EOF
       && lk != 13028               // 'some' EOF
       && lk != 13029               // 'stable' EOF
       && lk != 13030               // 'start' EOF
       && lk != 13033               // 'strict' EOF
       && lk != 13035               // 'switch' EOF
       && lk != 13036               // 'text' EOF
       && lk != 13040               // 'to' EOF
       && lk != 13041               // 'treat' EOF
       && lk != 13042               // 'try' EOF
       && lk != 13043               // 'tumbling' EOF
       && lk != 13044               // 'type' EOF
       && lk != 13045               // 'typeswitch' EOF
       && lk != 13046               // 'union' EOF
       && lk != 13048               // 'unordered' EOF
       && lk != 13049               // 'updating' EOF
       && lk != 13052               // 'validate' EOF
       && lk != 13053               // 'value' EOF
       && lk != 13054               // 'variable' EOF
       && lk != 13055               // 'version' EOF
       && lk != 13058               // 'where' EOF
       && lk != 13059               // 'while' EOF
       && lk != 13062               // 'with' EOF
       && lk != 13066               // 'xquery' EOF
       && lk != 16126               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21061               // 'after' ','
       && lk != 21063               // 'allowing' ','
       && lk != 21064               // 'ancestor' ','
       && lk != 21065               // 'ancestor-or-self' ','
       && lk != 21066               // 'and' ','
       && lk != 21068               // 'as' ','
       && lk != 21069               // 'ascending' ','
       && lk != 21070               // 'at' ','
       && lk != 21071               // 'attribute' ','
       && lk != 21072               // 'base-uri' ','
       && lk != 21073               // 'before' ','
       && lk != 21074               // 'boundary-space' ','
       && lk != 21075               // 'break' ','
       && lk != 21077               // 'case' ','
       && lk != 21078               // 'cast' ','
       && lk != 21079               // 'castable' ','
       && lk != 21080               // 'catch' ','
       && lk != 21082               // 'child' ','
       && lk != 21083               // 'collation' ','
       && lk != 21085               // 'comment' ','
       && lk != 21086               // 'constraint' ','
       && lk != 21087               // 'construction' ','
       && lk != 21090               // 'context' ','
       && lk != 21091               // 'continue' ','
       && lk != 21092               // 'copy' ','
       && lk != 21093               // 'copy-namespaces' ','
       && lk != 21094               // 'count' ','
       && lk != 21095               // 'decimal-format' ','
       && lk != 21097               // 'declare' ','
       && lk != 21098               // 'default' ','
       && lk != 21099               // 'delete' ','
       && lk != 21100               // 'descendant' ','
       && lk != 21101               // 'descendant-or-self' ','
       && lk != 21102               // 'descending' ','
       && lk != 21107               // 'div' ','
       && lk != 21108               // 'document' ','
       && lk != 21109               // 'document-node' ','
       && lk != 21110               // 'element' ','
       && lk != 21111               // 'else' ','
       && lk != 21112               // 'empty' ','
       && lk != 21113               // 'empty-sequence' ','
       && lk != 21114               // 'encoding' ','
       && lk != 21115               // 'end' ','
       && lk != 21117               // 'eq' ','
       && lk != 21118               // 'every' ','
       && lk != 21120               // 'except' ','
       && lk != 21121               // 'exit' ','
       && lk != 21122               // 'external' ','
       && lk != 21123               // 'first' ','
       && lk != 21124               // 'following' ','
       && lk != 21125               // 'following-sibling' ','
       && lk != 21126               // 'for' ','
       && lk != 21130               // 'ft-option' ','
       && lk != 21134               // 'function' ','
       && lk != 21135               // 'ge' ','
       && lk != 21137               // 'group' ','
       && lk != 21139               // 'gt' ','
       && lk != 21140               // 'idiv' ','
       && lk != 21141               // 'if' ','
       && lk != 21142               // 'import' ','
       && lk != 21143               // 'in' ','
       && lk != 21144               // 'index' ','
       && lk != 21148               // 'insert' ','
       && lk != 21149               // 'instance' ','
       && lk != 21150               // 'integrity' ','
       && lk != 21151               // 'intersect' ','
       && lk != 21152               // 'into' ','
       && lk != 21153               // 'is' ','
       && lk != 21154               // 'item' ','
       && lk != 21157               // 'last' ','
       && lk != 21158               // 'lax' ','
       && lk != 21159               // 'le' ','
       && lk != 21161               // 'let' ','
       && lk != 21163               // 'loop' ','
       && lk != 21165               // 'lt' ','
       && lk != 21167               // 'mod' ','
       && lk != 21168               // 'modify' ','
       && lk != 21169               // 'module' ','
       && lk != 21171               // 'namespace' ','
       && lk != 21172               // 'namespace-node' ','
       && lk != 21173               // 'ne' ','
       && lk != 21178               // 'node' ','
       && lk != 21179               // 'nodes' ','
       && lk != 21184               // 'only' ','
       && lk != 21185               // 'option' ','
       && lk != 21186               // 'or' ','
       && lk != 21187               // 'order' ','
       && lk != 21188               // 'ordered' ','
       && lk != 21189               // 'ordering' ','
       && lk != 21192               // 'parent' ','
       && lk != 21197               // 'preceding' ','
       && lk != 21198               // 'preceding-sibling' ','
       && lk != 21201               // 'processing-instruction' ','
       && lk != 21203               // 'rename' ','
       && lk != 21204               // 'replace' ','
       && lk != 21205               // 'return' ','
       && lk != 21206               // 'returning' ','
       && lk != 21207               // 'revalidation' ','
       && lk != 21209               // 'satisfies' ','
       && lk != 21210               // 'schema' ','
       && lk != 21211               // 'schema-attribute' ','
       && lk != 21212               // 'schema-element' ','
       && lk != 21213               // 'score' ','
       && lk != 21214               // 'self' ','
       && lk != 21219               // 'sliding' ','
       && lk != 21220               // 'some' ','
       && lk != 21221               // 'stable' ','
       && lk != 21222               // 'start' ','
       && lk != 21225               // 'strict' ','
       && lk != 21227               // 'switch' ','
       && lk != 21228               // 'text' ','
       && lk != 21232               // 'to' ','
       && lk != 21233               // 'treat' ','
       && lk != 21234               // 'try' ','
       && lk != 21235               // 'tumbling' ','
       && lk != 21236               // 'type' ','
       && lk != 21237               // 'typeswitch' ','
       && lk != 21238               // 'union' ','
       && lk != 21240               // 'unordered' ','
       && lk != 21241               // 'updating' ','
       && lk != 21244               // 'validate' ','
       && lk != 21245               // 'value' ','
       && lk != 21246               // 'variable' ','
       && lk != 21247               // 'version' ','
       && lk != 21250               // 'where' ','
       && lk != 21251               // 'while' ','
       && lk != 21254               // 'with' ','
       && lk != 21258               // 'xquery' ','
       && lk != 26629               // Wildcard ';'
       && lk != 26630               // EQName^Token ';'
       && lk != 26632               // IntegerLiteral ';'
       && lk != 26633               // DecimalLiteral ';'
       && lk != 26634               // DoubleLiteral ';'
       && lk != 26635               // StringLiteral ';'
       && lk != 26668               // '.' ';'
       && lk != 26669               // '..' ';'
       && lk != 26670               // '/' ';'
       && lk != 26693               // 'after' ';'
       && lk != 26695               // 'allowing' ';'
       && lk != 26696               // 'ancestor' ';'
       && lk != 26697               // 'ancestor-or-self' ';'
       && lk != 26698               // 'and' ';'
       && lk != 26700               // 'as' ';'
       && lk != 26701               // 'ascending' ';'
       && lk != 26702               // 'at' ';'
       && lk != 26703               // 'attribute' ';'
       && lk != 26704               // 'base-uri' ';'
       && lk != 26705               // 'before' ';'
       && lk != 26706               // 'boundary-space' ';'
       && lk != 26707               // 'break' ';'
       && lk != 26709               // 'case' ';'
       && lk != 26710               // 'cast' ';'
       && lk != 26711               // 'castable' ';'
       && lk != 26712               // 'catch' ';'
       && lk != 26714               // 'child' ';'
       && lk != 26715               // 'collation' ';'
       && lk != 26717               // 'comment' ';'
       && lk != 26718               // 'constraint' ';'
       && lk != 26719               // 'construction' ';'
       && lk != 26722               // 'context' ';'
       && lk != 26723               // 'continue' ';'
       && lk != 26724               // 'copy' ';'
       && lk != 26725               // 'copy-namespaces' ';'
       && lk != 26726               // 'count' ';'
       && lk != 26727               // 'decimal-format' ';'
       && lk != 26729               // 'declare' ';'
       && lk != 26730               // 'default' ';'
       && lk != 26731               // 'delete' ';'
       && lk != 26732               // 'descendant' ';'
       && lk != 26733               // 'descendant-or-self' ';'
       && lk != 26734               // 'descending' ';'
       && lk != 26739               // 'div' ';'
       && lk != 26740               // 'document' ';'
       && lk != 26741               // 'document-node' ';'
       && lk != 26742               // 'element' ';'
       && lk != 26743               // 'else' ';'
       && lk != 26744               // 'empty' ';'
       && lk != 26745               // 'empty-sequence' ';'
       && lk != 26746               // 'encoding' ';'
       && lk != 26747               // 'end' ';'
       && lk != 26749               // 'eq' ';'
       && lk != 26750               // 'every' ';'
       && lk != 26752               // 'except' ';'
       && lk != 26753               // 'exit' ';'
       && lk != 26754               // 'external' ';'
       && lk != 26755               // 'first' ';'
       && lk != 26756               // 'following' ';'
       && lk != 26757               // 'following-sibling' ';'
       && lk != 26758               // 'for' ';'
       && lk != 26762               // 'ft-option' ';'
       && lk != 26766               // 'function' ';'
       && lk != 26767               // 'ge' ';'
       && lk != 26769               // 'group' ';'
       && lk != 26771               // 'gt' ';'
       && lk != 26772               // 'idiv' ';'
       && lk != 26773               // 'if' ';'
       && lk != 26774               // 'import' ';'
       && lk != 26775               // 'in' ';'
       && lk != 26776               // 'index' ';'
       && lk != 26780               // 'insert' ';'
       && lk != 26781               // 'instance' ';'
       && lk != 26782               // 'integrity' ';'
       && lk != 26783               // 'intersect' ';'
       && lk != 26784               // 'into' ';'
       && lk != 26785               // 'is' ';'
       && lk != 26786               // 'item' ';'
       && lk != 26789               // 'last' ';'
       && lk != 26790               // 'lax' ';'
       && lk != 26791               // 'le' ';'
       && lk != 26793               // 'let' ';'
       && lk != 26795               // 'loop' ';'
       && lk != 26797               // 'lt' ';'
       && lk != 26799               // 'mod' ';'
       && lk != 26800               // 'modify' ';'
       && lk != 26801               // 'module' ';'
       && lk != 26803               // 'namespace' ';'
       && lk != 26804               // 'namespace-node' ';'
       && lk != 26805               // 'ne' ';'
       && lk != 26810               // 'node' ';'
       && lk != 26811               // 'nodes' ';'
       && lk != 26816               // 'only' ';'
       && lk != 26817               // 'option' ';'
       && lk != 26818               // 'or' ';'
       && lk != 26819               // 'order' ';'
       && lk != 26820               // 'ordered' ';'
       && lk != 26821               // 'ordering' ';'
       && lk != 26824               // 'parent' ';'
       && lk != 26829               // 'preceding' ';'
       && lk != 26830               // 'preceding-sibling' ';'
       && lk != 26833               // 'processing-instruction' ';'
       && lk != 26835               // 'rename' ';'
       && lk != 26836               // 'replace' ';'
       && lk != 26837               // 'return' ';'
       && lk != 26838               // 'returning' ';'
       && lk != 26839               // 'revalidation' ';'
       && lk != 26841               // 'satisfies' ';'
       && lk != 26842               // 'schema' ';'
       && lk != 26843               // 'schema-attribute' ';'
       && lk != 26844               // 'schema-element' ';'
       && lk != 26845               // 'score' ';'
       && lk != 26846               // 'self' ';'
       && lk != 26851               // 'sliding' ';'
       && lk != 26852               // 'some' ';'
       && lk != 26853               // 'stable' ';'
       && lk != 26854               // 'start' ';'
       && lk != 26857               // 'strict' ';'
       && lk != 26859               // 'switch' ';'
       && lk != 26860               // 'text' ';'
       && lk != 26864               // 'to' ';'
       && lk != 26865               // 'treat' ';'
       && lk != 26866               // 'try' ';'
       && lk != 26867               // 'tumbling' ';'
       && lk != 26868               // 'type' ';'
       && lk != 26869               // 'typeswitch' ';'
       && lk != 26870               // 'union' ';'
       && lk != 26872               // 'unordered' ';'
       && lk != 26873               // 'updating' ';'
       && lk != 26876               // 'validate' ';'
       && lk != 26877               // 'value' ';'
       && lk != 26878               // 'variable' ';'
       && lk != 26879               // 'version' ';'
       && lk != 26882               // 'where' ';'
       && lk != 26883               // 'while' ';'
       && lk != 26886               // 'with' ';'
       && lk != 26890               // 'xquery' ';'
       && lk != 87635               // 'break' 'loop'
       && lk != 87651               // 'continue' 'loop'
       && lk != 109697              // 'exit' 'returning'
       && lk != 139269              // Wildcard '}'
       && lk != 139270              // EQName^Token '}'
       && lk != 139272              // IntegerLiteral '}'
       && lk != 139273              // DecimalLiteral '}'
       && lk != 139274              // DoubleLiteral '}'
       && lk != 139275              // StringLiteral '}'
       && lk != 139308              // '.' '}'
       && lk != 139309              // '..' '}'
       && lk != 139310              // '/' '}'
       && lk != 139333              // 'after' '}'
       && lk != 139335              // 'allowing' '}'
       && lk != 139336              // 'ancestor' '}'
       && lk != 139337              // 'ancestor-or-self' '}'
       && lk != 139338              // 'and' '}'
       && lk != 139340              // 'as' '}'
       && lk != 139341              // 'ascending' '}'
       && lk != 139342              // 'at' '}'
       && lk != 139343              // 'attribute' '}'
       && lk != 139344              // 'base-uri' '}'
       && lk != 139345              // 'before' '}'
       && lk != 139346              // 'boundary-space' '}'
       && lk != 139347              // 'break' '}'
       && lk != 139349              // 'case' '}'
       && lk != 139350              // 'cast' '}'
       && lk != 139351              // 'castable' '}'
       && lk != 139352              // 'catch' '}'
       && lk != 139354              // 'child' '}'
       && lk != 139355              // 'collation' '}'
       && lk != 139357              // 'comment' '}'
       && lk != 139358              // 'constraint' '}'
       && lk != 139359              // 'construction' '}'
       && lk != 139362              // 'context' '}'
       && lk != 139363              // 'continue' '}'
       && lk != 139364              // 'copy' '}'
       && lk != 139365              // 'copy-namespaces' '}'
       && lk != 139366              // 'count' '}'
       && lk != 139367              // 'decimal-format' '}'
       && lk != 139369              // 'declare' '}'
       && lk != 139370              // 'default' '}'
       && lk != 139371              // 'delete' '}'
       && lk != 139372              // 'descendant' '}'
       && lk != 139373              // 'descendant-or-self' '}'
       && lk != 139374              // 'descending' '}'
       && lk != 139379              // 'div' '}'
       && lk != 139380              // 'document' '}'
       && lk != 139381              // 'document-node' '}'
       && lk != 139382              // 'element' '}'
       && lk != 139383              // 'else' '}'
       && lk != 139384              // 'empty' '}'
       && lk != 139385              // 'empty-sequence' '}'
       && lk != 139386              // 'encoding' '}'
       && lk != 139387              // 'end' '}'
       && lk != 139389              // 'eq' '}'
       && lk != 139390              // 'every' '}'
       && lk != 139392              // 'except' '}'
       && lk != 139393              // 'exit' '}'
       && lk != 139394              // 'external' '}'
       && lk != 139395              // 'first' '}'
       && lk != 139396              // 'following' '}'
       && lk != 139397              // 'following-sibling' '}'
       && lk != 139398              // 'for' '}'
       && lk != 139402              // 'ft-option' '}'
       && lk != 139406              // 'function' '}'
       && lk != 139407              // 'ge' '}'
       && lk != 139409              // 'group' '}'
       && lk != 139411              // 'gt' '}'
       && lk != 139412              // 'idiv' '}'
       && lk != 139413              // 'if' '}'
       && lk != 139414              // 'import' '}'
       && lk != 139415              // 'in' '}'
       && lk != 139416              // 'index' '}'
       && lk != 139420              // 'insert' '}'
       && lk != 139421              // 'instance' '}'
       && lk != 139422              // 'integrity' '}'
       && lk != 139423              // 'intersect' '}'
       && lk != 139424              // 'into' '}'
       && lk != 139425              // 'is' '}'
       && lk != 139426              // 'item' '}'
       && lk != 139429              // 'last' '}'
       && lk != 139430              // 'lax' '}'
       && lk != 139431              // 'le' '}'
       && lk != 139433              // 'let' '}'
       && lk != 139435              // 'loop' '}'
       && lk != 139437              // 'lt' '}'
       && lk != 139439              // 'mod' '}'
       && lk != 139440              // 'modify' '}'
       && lk != 139441              // 'module' '}'
       && lk != 139443              // 'namespace' '}'
       && lk != 139444              // 'namespace-node' '}'
       && lk != 139445              // 'ne' '}'
       && lk != 139450              // 'node' '}'
       && lk != 139451              // 'nodes' '}'
       && lk != 139456              // 'only' '}'
       && lk != 139457              // 'option' '}'
       && lk != 139458              // 'or' '}'
       && lk != 139459              // 'order' '}'
       && lk != 139460              // 'ordered' '}'
       && lk != 139461              // 'ordering' '}'
       && lk != 139464              // 'parent' '}'
       && lk != 139469              // 'preceding' '}'
       && lk != 139470              // 'preceding-sibling' '}'
       && lk != 139473              // 'processing-instruction' '}'
       && lk != 139475              // 'rename' '}'
       && lk != 139476              // 'replace' '}'
       && lk != 139477              // 'return' '}'
       && lk != 139478              // 'returning' '}'
       && lk != 139479              // 'revalidation' '}'
       && lk != 139481              // 'satisfies' '}'
       && lk != 139482              // 'schema' '}'
       && lk != 139483              // 'schema-attribute' '}'
       && lk != 139484              // 'schema-element' '}'
       && lk != 139485              // 'score' '}'
       && lk != 139486              // 'self' '}'
       && lk != 139491              // 'sliding' '}'
       && lk != 139492              // 'some' '}'
       && lk != 139493              // 'stable' '}'
       && lk != 139494              // 'start' '}'
       && lk != 139497              // 'strict' '}'
       && lk != 139499              // 'switch' '}'
       && lk != 139500              // 'text' '}'
       && lk != 139504              // 'to' '}'
       && lk != 139505              // 'treat' '}'
       && lk != 139506              // 'try' '}'
       && lk != 139507              // 'tumbling' '}'
       && lk != 139508              // 'type' '}'
       && lk != 139509              // 'typeswitch' '}'
       && lk != 139510              // 'union' '}'
       && lk != 139512              // 'unordered' '}'
       && lk != 139513              // 'updating' '}'
       && lk != 139516              // 'validate' '}'
       && lk != 139517              // 'value' '}'
       && lk != 139518              // 'variable' '}'
       && lk != 139519              // 'version' '}'
       && lk != 139522              // 'where' '}'
       && lk != 139523              // 'while' '}'
       && lk != 139526              // 'with' '}'
       && lk != 139530              // 'xquery' '}'
       && lk != 139532)             // '{' '}'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      if (lk != -1
       && lk != 16126               // 'variable' '$'
       && lk != 26629               // Wildcard ';'
       && lk != 26630               // EQName^Token ';'
       && lk != 26632               // IntegerLiteral ';'
       && lk != 26633               // DecimalLiteral ';'
       && lk != 26634               // DoubleLiteral ';'
       && lk != 26635               // StringLiteral ';'
       && lk != 26668               // '.' ';'
       && lk != 26669               // '..' ';'
       && lk != 26670               // '/' ';'
       && lk != 26693               // 'after' ';'
       && lk != 26695               // 'allowing' ';'
       && lk != 26696               // 'ancestor' ';'
       && lk != 26697               // 'ancestor-or-self' ';'
       && lk != 26698               // 'and' ';'
       && lk != 26700               // 'as' ';'
       && lk != 26701               // 'ascending' ';'
       && lk != 26702               // 'at' ';'
       && lk != 26703               // 'attribute' ';'
       && lk != 26704               // 'base-uri' ';'
       && lk != 26705               // 'before' ';'
       && lk != 26706               // 'boundary-space' ';'
       && lk != 26707               // 'break' ';'
       && lk != 26709               // 'case' ';'
       && lk != 26710               // 'cast' ';'
       && lk != 26711               // 'castable' ';'
       && lk != 26712               // 'catch' ';'
       && lk != 26714               // 'child' ';'
       && lk != 26715               // 'collation' ';'
       && lk != 26717               // 'comment' ';'
       && lk != 26718               // 'constraint' ';'
       && lk != 26719               // 'construction' ';'
       && lk != 26722               // 'context' ';'
       && lk != 26723               // 'continue' ';'
       && lk != 26724               // 'copy' ';'
       && lk != 26725               // 'copy-namespaces' ';'
       && lk != 26726               // 'count' ';'
       && lk != 26727               // 'decimal-format' ';'
       && lk != 26729               // 'declare' ';'
       && lk != 26730               // 'default' ';'
       && lk != 26731               // 'delete' ';'
       && lk != 26732               // 'descendant' ';'
       && lk != 26733               // 'descendant-or-self' ';'
       && lk != 26734               // 'descending' ';'
       && lk != 26739               // 'div' ';'
       && lk != 26740               // 'document' ';'
       && lk != 26741               // 'document-node' ';'
       && lk != 26742               // 'element' ';'
       && lk != 26743               // 'else' ';'
       && lk != 26744               // 'empty' ';'
       && lk != 26745               // 'empty-sequence' ';'
       && lk != 26746               // 'encoding' ';'
       && lk != 26747               // 'end' ';'
       && lk != 26749               // 'eq' ';'
       && lk != 26750               // 'every' ';'
       && lk != 26752               // 'except' ';'
       && lk != 26753               // 'exit' ';'
       && lk != 26754               // 'external' ';'
       && lk != 26755               // 'first' ';'
       && lk != 26756               // 'following' ';'
       && lk != 26757               // 'following-sibling' ';'
       && lk != 26758               // 'for' ';'
       && lk != 26762               // 'ft-option' ';'
       && lk != 26766               // 'function' ';'
       && lk != 26767               // 'ge' ';'
       && lk != 26769               // 'group' ';'
       && lk != 26771               // 'gt' ';'
       && lk != 26772               // 'idiv' ';'
       && lk != 26773               // 'if' ';'
       && lk != 26774               // 'import' ';'
       && lk != 26775               // 'in' ';'
       && lk != 26776               // 'index' ';'
       && lk != 26780               // 'insert' ';'
       && lk != 26781               // 'instance' ';'
       && lk != 26782               // 'integrity' ';'
       && lk != 26783               // 'intersect' ';'
       && lk != 26784               // 'into' ';'
       && lk != 26785               // 'is' ';'
       && lk != 26786               // 'item' ';'
       && lk != 26789               // 'last' ';'
       && lk != 26790               // 'lax' ';'
       && lk != 26791               // 'le' ';'
       && lk != 26793               // 'let' ';'
       && lk != 26795               // 'loop' ';'
       && lk != 26797               // 'lt' ';'
       && lk != 26799               // 'mod' ';'
       && lk != 26800               // 'modify' ';'
       && lk != 26801               // 'module' ';'
       && lk != 26803               // 'namespace' ';'
       && lk != 26804               // 'namespace-node' ';'
       && lk != 26805               // 'ne' ';'
       && lk != 26810               // 'node' ';'
       && lk != 26811               // 'nodes' ';'
       && lk != 26816               // 'only' ';'
       && lk != 26817               // 'option' ';'
       && lk != 26818               // 'or' ';'
       && lk != 26819               // 'order' ';'
       && lk != 26820               // 'ordered' ';'
       && lk != 26821               // 'ordering' ';'
       && lk != 26824               // 'parent' ';'
       && lk != 26829               // 'preceding' ';'
       && lk != 26830               // 'preceding-sibling' ';'
       && lk != 26833               // 'processing-instruction' ';'
       && lk != 26835               // 'rename' ';'
       && lk != 26836               // 'replace' ';'
       && lk != 26837               // 'return' ';'
       && lk != 26838               // 'returning' ';'
       && lk != 26839               // 'revalidation' ';'
       && lk != 26841               // 'satisfies' ';'
       && lk != 26842               // 'schema' ';'
       && lk != 26843               // 'schema-attribute' ';'
       && lk != 26844               // 'schema-element' ';'
       && lk != 26845               // 'score' ';'
       && lk != 26846               // 'self' ';'
       && lk != 26851               // 'sliding' ';'
       && lk != 26852               // 'some' ';'
       && lk != 26853               // 'stable' ';'
       && lk != 26854               // 'start' ';'
       && lk != 26857               // 'strict' ';'
       && lk != 26859               // 'switch' ';'
       && lk != 26860               // 'text' ';'
       && lk != 26864               // 'to' ';'
       && lk != 26865               // 'treat' ';'
       && lk != 26866               // 'try' ';'
       && lk != 26867               // 'tumbling' ';'
       && lk != 26868               // 'type' ';'
       && lk != 26869               // 'typeswitch' ';'
       && lk != 26870               // 'union' ';'
       && lk != 26872               // 'unordered' ';'
       && lk != 26873               // 'updating' ';'
       && lk != 26876               // 'validate' ';'
       && lk != 26877               // 'value' ';'
       && lk != 26878               // 'variable' ';'
       && lk != 26879               // 'version' ';'
       && lk != 26882               // 'where' ';'
       && lk != 26883               // 'while' ';'
       && lk != 26886               // 'with' ';'
       && lk != 26890               // 'xquery' ';'
       && lk != 87635               // 'break' 'loop'
       && lk != 87651               // 'continue' 'loop'
       && lk != 109697              // 'exit' 'returning'
       && lk != 139532)             // '{' '}'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  private void try_Statements()
  {
    for (;;)
    {
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(262);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 35:                      // '(#'
        lookahead2(244);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' |
                                    // '>>' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(258);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 53:                      // '<'
        lookahead2(4);              // QName
        break;
      case 54:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 58:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 65:                      // '@'
        lookahead2W(247);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 79:                      // 'attribute'
        lookahead2W(270);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 118:                     // 'element'
        lookahead2W(268);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 129:                     // 'exit'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 134:                     // 'for'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 169:                     // 'let'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 211:                     // 'rename'
        lookahead2W(198);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 212:                     // 'replace'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 252:                     // 'validate'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 268:                     // '{'
        lookahead2W(264);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(182);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(245);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(260);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 83:                      // 'break'
      case 99:                      // 'continue'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 107:                     // 'delete'
      case 156:                     // 'insert'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'nodes' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 121:                     // 'empty-sequence'
      case 162:                     // 'item'
        lookahead2W(187);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 179:                     // 'namespace'
      case 209:                     // 'processing-instruction'
        lookahead2W(269);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 100:                     // 'copy'
      case 126:                     // 'every'
      case 228:                     // 'some'
      case 254:                     // 'variable'
        lookahead2W(193);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(188);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 93:                      // 'comment'
      case 116:                     // 'document'
      case 196:                     // 'ordered'
      case 236:                     // 'text'
      case 242:                     // 'try'
      case 248:                     // 'unordered'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 72:                      // 'ancestor'
      case 73:                      // 'ancestor-or-self'
      case 90:                      // 'child'
      case 108:                     // 'descendant'
      case 109:                     // 'descendant-or-self'
      case 132:                     // 'following'
      case 133:                     // 'following-sibling'
      case 200:                     // 'parent'
      case 205:                     // 'preceding'
      case 206:                     // 'preceding-sibling'
      case 222:                     // 'self'
        lookahead2W(194);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 69:                      // 'after'
      case 71:                      // 'allowing'
      case 74:                      // 'and'
      case 76:                      // 'as'
      case 77:                      // 'ascending'
      case 78:                      // 'at'
      case 80:                      // 'base-uri'
      case 81:                      // 'before'
      case 82:                      // 'boundary-space'
      case 85:                      // 'case'
      case 86:                      // 'cast'
      case 87:                      // 'castable'
      case 88:                      // 'catch'
      case 91:                      // 'collation'
      case 94:                      // 'constraint'
      case 95:                      // 'construction'
      case 98:                      // 'context'
      case 101:                     // 'copy-namespaces'
      case 102:                     // 'count'
      case 103:                     // 'decimal-format'
      case 105:                     // 'declare'
      case 106:                     // 'default'
      case 110:                     // 'descending'
      case 115:                     // 'div'
      case 117:                     // 'document-node'
      case 119:                     // 'else'
      case 120:                     // 'empty'
      case 122:                     // 'encoding'
      case 123:                     // 'end'
      case 125:                     // 'eq'
      case 128:                     // 'except'
      case 130:                     // 'external'
      case 131:                     // 'first'
      case 138:                     // 'ft-option'
      case 142:                     // 'function'
      case 143:                     // 'ge'
      case 145:                     // 'group'
      case 147:                     // 'gt'
      case 148:                     // 'idiv'
      case 149:                     // 'if'
      case 150:                     // 'import'
      case 151:                     // 'in'
      case 152:                     // 'index'
      case 157:                     // 'instance'
      case 158:                     // 'integrity'
      case 159:                     // 'intersect'
      case 160:                     // 'into'
      case 161:                     // 'is'
      case 165:                     // 'last'
      case 166:                     // 'lax'
      case 167:                     // 'le'
      case 171:                     // 'loop'
      case 173:                     // 'lt'
      case 175:                     // 'mod'
      case 176:                     // 'modify'
      case 177:                     // 'module'
      case 180:                     // 'namespace-node'
      case 181:                     // 'ne'
      case 186:                     // 'node'
      case 187:                     // 'nodes'
      case 192:                     // 'only'
      case 193:                     // 'option'
      case 194:                     // 'or'
      case 195:                     // 'order'
      case 197:                     // 'ordering'
      case 213:                     // 'return'
      case 214:                     // 'returning'
      case 215:                     // 'revalidation'
      case 217:                     // 'satisfies'
      case 218:                     // 'schema'
      case 219:                     // 'schema-attribute'
      case 220:                     // 'schema-element'
      case 221:                     // 'score'
      case 227:                     // 'sliding'
      case 229:                     // 'stable'
      case 230:                     // 'start'
      case 233:                     // 'strict'
      case 235:                     // 'switch'
      case 240:                     // 'to'
      case 241:                     // 'treat'
      case 243:                     // 'tumbling'
      case 244:                     // 'type'
      case 245:                     // 'typeswitch'
      case 246:                     // 'union'
      case 249:                     // 'updating'
      case 253:                     // 'value'
      case 255:                     // 'version'
      case 258:                     // 'where'
      case 259:                     // 'while'
      case 262:                     // 'with'
      case 266:                     // 'xquery'
        lookahead2W(191);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 272                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12869               // 'after' EOF
       && lk != 12871               // 'allowing' EOF
       && lk != 12872               // 'ancestor' EOF
       && lk != 12873               // 'ancestor-or-self' EOF
       && lk != 12874               // 'and' EOF
       && lk != 12876               // 'as' EOF
       && lk != 12877               // 'ascending' EOF
       && lk != 12878               // 'at' EOF
       && lk != 12879               // 'attribute' EOF
       && lk != 12880               // 'base-uri' EOF
       && lk != 12881               // 'before' EOF
       && lk != 12882               // 'boundary-space' EOF
       && lk != 12883               // 'break' EOF
       && lk != 12885               // 'case' EOF
       && lk != 12886               // 'cast' EOF
       && lk != 12887               // 'castable' EOF
       && lk != 12888               // 'catch' EOF
       && lk != 12890               // 'child' EOF
       && lk != 12891               // 'collation' EOF
       && lk != 12893               // 'comment' EOF
       && lk != 12894               // 'constraint' EOF
       && lk != 12895               // 'construction' EOF
       && lk != 12898               // 'context' EOF
       && lk != 12899               // 'continue' EOF
       && lk != 12900               // 'copy' EOF
       && lk != 12901               // 'copy-namespaces' EOF
       && lk != 12902               // 'count' EOF
       && lk != 12903               // 'decimal-format' EOF
       && lk != 12905               // 'declare' EOF
       && lk != 12906               // 'default' EOF
       && lk != 12907               // 'delete' EOF
       && lk != 12908               // 'descendant' EOF
       && lk != 12909               // 'descendant-or-self' EOF
       && lk != 12910               // 'descending' EOF
       && lk != 12915               // 'div' EOF
       && lk != 12916               // 'document' EOF
       && lk != 12917               // 'document-node' EOF
       && lk != 12918               // 'element' EOF
       && lk != 12919               // 'else' EOF
       && lk != 12920               // 'empty' EOF
       && lk != 12921               // 'empty-sequence' EOF
       && lk != 12922               // 'encoding' EOF
       && lk != 12923               // 'end' EOF
       && lk != 12925               // 'eq' EOF
       && lk != 12926               // 'every' EOF
       && lk != 12928               // 'except' EOF
       && lk != 12929               // 'exit' EOF
       && lk != 12930               // 'external' EOF
       && lk != 12931               // 'first' EOF
       && lk != 12932               // 'following' EOF
       && lk != 12933               // 'following-sibling' EOF
       && lk != 12934               // 'for' EOF
       && lk != 12938               // 'ft-option' EOF
       && lk != 12942               // 'function' EOF
       && lk != 12943               // 'ge' EOF
       && lk != 12945               // 'group' EOF
       && lk != 12947               // 'gt' EOF
       && lk != 12948               // 'idiv' EOF
       && lk != 12949               // 'if' EOF
       && lk != 12950               // 'import' EOF
       && lk != 12951               // 'in' EOF
       && lk != 12952               // 'index' EOF
       && lk != 12956               // 'insert' EOF
       && lk != 12957               // 'instance' EOF
       && lk != 12958               // 'integrity' EOF
       && lk != 12959               // 'intersect' EOF
       && lk != 12960               // 'into' EOF
       && lk != 12961               // 'is' EOF
       && lk != 12962               // 'item' EOF
       && lk != 12965               // 'last' EOF
       && lk != 12966               // 'lax' EOF
       && lk != 12967               // 'le' EOF
       && lk != 12969               // 'let' EOF
       && lk != 12971               // 'loop' EOF
       && lk != 12973               // 'lt' EOF
       && lk != 12975               // 'mod' EOF
       && lk != 12976               // 'modify' EOF
       && lk != 12977               // 'module' EOF
       && lk != 12979               // 'namespace' EOF
       && lk != 12980               // 'namespace-node' EOF
       && lk != 12981               // 'ne' EOF
       && lk != 12986               // 'node' EOF
       && lk != 12987               // 'nodes' EOF
       && lk != 12992               // 'only' EOF
       && lk != 12993               // 'option' EOF
       && lk != 12994               // 'or' EOF
       && lk != 12995               // 'order' EOF
       && lk != 12996               // 'ordered' EOF
       && lk != 12997               // 'ordering' EOF
       && lk != 13000               // 'parent' EOF
       && lk != 13005               // 'preceding' EOF
       && lk != 13006               // 'preceding-sibling' EOF
       && lk != 13009               // 'processing-instruction' EOF
       && lk != 13011               // 'rename' EOF
       && lk != 13012               // 'replace' EOF
       && lk != 13013               // 'return' EOF
       && lk != 13014               // 'returning' EOF
       && lk != 13015               // 'revalidation' EOF
       && lk != 13017               // 'satisfies' EOF
       && lk != 13018               // 'schema' EOF
       && lk != 13019               // 'schema-attribute' EOF
       && lk != 13020               // 'schema-element' EOF
       && lk != 13021               // 'score' EOF
       && lk != 13022               // 'self' EOF
       && lk != 13027               // 'sliding' EOF
       && lk != 13028               // 'some' EOF
       && lk != 13029               // 'stable' EOF
       && lk != 13030               // 'start' EOF
       && lk != 13033               // 'strict' EOF
       && lk != 13035               // 'switch' EOF
       && lk != 13036               // 'text' EOF
       && lk != 13040               // 'to' EOF
       && lk != 13041               // 'treat' EOF
       && lk != 13042               // 'try' EOF
       && lk != 13043               // 'tumbling' EOF
       && lk != 13044               // 'type' EOF
       && lk != 13045               // 'typeswitch' EOF
       && lk != 13046               // 'union' EOF
       && lk != 13048               // 'unordered' EOF
       && lk != 13049               // 'updating' EOF
       && lk != 13052               // 'validate' EOF
       && lk != 13053               // 'value' EOF
       && lk != 13054               // 'variable' EOF
       && lk != 13055               // 'version' EOF
       && lk != 13058               // 'where' EOF
       && lk != 13059               // 'while' EOF
       && lk != 13062               // 'with' EOF
       && lk != 13066               // 'xquery' EOF
       && lk != 16126               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21061               // 'after' ','
       && lk != 21063               // 'allowing' ','
       && lk != 21064               // 'ancestor' ','
       && lk != 21065               // 'ancestor-or-self' ','
       && lk != 21066               // 'and' ','
       && lk != 21068               // 'as' ','
       && lk != 21069               // 'ascending' ','
       && lk != 21070               // 'at' ','
       && lk != 21071               // 'attribute' ','
       && lk != 21072               // 'base-uri' ','
       && lk != 21073               // 'before' ','
       && lk != 21074               // 'boundary-space' ','
       && lk != 21075               // 'break' ','
       && lk != 21077               // 'case' ','
       && lk != 21078               // 'cast' ','
       && lk != 21079               // 'castable' ','
       && lk != 21080               // 'catch' ','
       && lk != 21082               // 'child' ','
       && lk != 21083               // 'collation' ','
       && lk != 21085               // 'comment' ','
       && lk != 21086               // 'constraint' ','
       && lk != 21087               // 'construction' ','
       && lk != 21090               // 'context' ','
       && lk != 21091               // 'continue' ','
       && lk != 21092               // 'copy' ','
       && lk != 21093               // 'copy-namespaces' ','
       && lk != 21094               // 'count' ','
       && lk != 21095               // 'decimal-format' ','
       && lk != 21097               // 'declare' ','
       && lk != 21098               // 'default' ','
       && lk != 21099               // 'delete' ','
       && lk != 21100               // 'descendant' ','
       && lk != 21101               // 'descendant-or-self' ','
       && lk != 21102               // 'descending' ','
       && lk != 21107               // 'div' ','
       && lk != 21108               // 'document' ','
       && lk != 21109               // 'document-node' ','
       && lk != 21110               // 'element' ','
       && lk != 21111               // 'else' ','
       && lk != 21112               // 'empty' ','
       && lk != 21113               // 'empty-sequence' ','
       && lk != 21114               // 'encoding' ','
       && lk != 21115               // 'end' ','
       && lk != 21117               // 'eq' ','
       && lk != 21118               // 'every' ','
       && lk != 21120               // 'except' ','
       && lk != 21121               // 'exit' ','
       && lk != 21122               // 'external' ','
       && lk != 21123               // 'first' ','
       && lk != 21124               // 'following' ','
       && lk != 21125               // 'following-sibling' ','
       && lk != 21126               // 'for' ','
       && lk != 21130               // 'ft-option' ','
       && lk != 21134               // 'function' ','
       && lk != 21135               // 'ge' ','
       && lk != 21137               // 'group' ','
       && lk != 21139               // 'gt' ','
       && lk != 21140               // 'idiv' ','
       && lk != 21141               // 'if' ','
       && lk != 21142               // 'import' ','
       && lk != 21143               // 'in' ','
       && lk != 21144               // 'index' ','
       && lk != 21148               // 'insert' ','
       && lk != 21149               // 'instance' ','
       && lk != 21150               // 'integrity' ','
       && lk != 21151               // 'intersect' ','
       && lk != 21152               // 'into' ','
       && lk != 21153               // 'is' ','
       && lk != 21154               // 'item' ','
       && lk != 21157               // 'last' ','
       && lk != 21158               // 'lax' ','
       && lk != 21159               // 'le' ','
       && lk != 21161               // 'let' ','
       && lk != 21163               // 'loop' ','
       && lk != 21165               // 'lt' ','
       && lk != 21167               // 'mod' ','
       && lk != 21168               // 'modify' ','
       && lk != 21169               // 'module' ','
       && lk != 21171               // 'namespace' ','
       && lk != 21172               // 'namespace-node' ','
       && lk != 21173               // 'ne' ','
       && lk != 21178               // 'node' ','
       && lk != 21179               // 'nodes' ','
       && lk != 21184               // 'only' ','
       && lk != 21185               // 'option' ','
       && lk != 21186               // 'or' ','
       && lk != 21187               // 'order' ','
       && lk != 21188               // 'ordered' ','
       && lk != 21189               // 'ordering' ','
       && lk != 21192               // 'parent' ','
       && lk != 21197               // 'preceding' ','
       && lk != 21198               // 'preceding-sibling' ','
       && lk != 21201               // 'processing-instruction' ','
       && lk != 21203               // 'rename' ','
       && lk != 21204               // 'replace' ','
       && lk != 21205               // 'return' ','
       && lk != 21206               // 'returning' ','
       && lk != 21207               // 'revalidation' ','
       && lk != 21209               // 'satisfies' ','
       && lk != 21210               // 'schema' ','
       && lk != 21211               // 'schema-attribute' ','
       && lk != 21212               // 'schema-element' ','
       && lk != 21213               // 'score' ','
       && lk != 21214               // 'self' ','
       && lk != 21219               // 'sliding' ','
       && lk != 21220               // 'some' ','
       && lk != 21221               // 'stable' ','
       && lk != 21222               // 'start' ','
       && lk != 21225               // 'strict' ','
       && lk != 21227               // 'switch' ','
       && lk != 21228               // 'text' ','
       && lk != 21232               // 'to' ','
       && lk != 21233               // 'treat' ','
       && lk != 21234               // 'try' ','
       && lk != 21235               // 'tumbling' ','
       && lk != 21236               // 'type' ','
       && lk != 21237               // 'typeswitch' ','
       && lk != 21238               // 'union' ','
       && lk != 21240               // 'unordered' ','
       && lk != 21241               // 'updating' ','
       && lk != 21244               // 'validate' ','
       && lk != 21245               // 'value' ','
       && lk != 21246               // 'variable' ','
       && lk != 21247               // 'version' ','
       && lk != 21250               // 'where' ','
       && lk != 21251               // 'while' ','
       && lk != 21254               // 'with' ','
       && lk != 21258               // 'xquery' ','
       && lk != 26629               // Wildcard ';'
       && lk != 26630               // EQName^Token ';'
       && lk != 26632               // IntegerLiteral ';'
       && lk != 26633               // DecimalLiteral ';'
       && lk != 26634               // DoubleLiteral ';'
       && lk != 26635               // StringLiteral ';'
       && lk != 26668               // '.' ';'
       && lk != 26669               // '..' ';'
       && lk != 26670               // '/' ';'
       && lk != 26693               // 'after' ';'
       && lk != 26695               // 'allowing' ';'
       && lk != 26696               // 'ancestor' ';'
       && lk != 26697               // 'ancestor-or-self' ';'
       && lk != 26698               // 'and' ';'
       && lk != 26700               // 'as' ';'
       && lk != 26701               // 'ascending' ';'
       && lk != 26702               // 'at' ';'
       && lk != 26703               // 'attribute' ';'
       && lk != 26704               // 'base-uri' ';'
       && lk != 26705               // 'before' ';'
       && lk != 26706               // 'boundary-space' ';'
       && lk != 26707               // 'break' ';'
       && lk != 26709               // 'case' ';'
       && lk != 26710               // 'cast' ';'
       && lk != 26711               // 'castable' ';'
       && lk != 26712               // 'catch' ';'
       && lk != 26714               // 'child' ';'
       && lk != 26715               // 'collation' ';'
       && lk != 26717               // 'comment' ';'
       && lk != 26718               // 'constraint' ';'
       && lk != 26719               // 'construction' ';'
       && lk != 26722               // 'context' ';'
       && lk != 26723               // 'continue' ';'
       && lk != 26724               // 'copy' ';'
       && lk != 26725               // 'copy-namespaces' ';'
       && lk != 26726               // 'count' ';'
       && lk != 26727               // 'decimal-format' ';'
       && lk != 26729               // 'declare' ';'
       && lk != 26730               // 'default' ';'
       && lk != 26731               // 'delete' ';'
       && lk != 26732               // 'descendant' ';'
       && lk != 26733               // 'descendant-or-self' ';'
       && lk != 26734               // 'descending' ';'
       && lk != 26739               // 'div' ';'
       && lk != 26740               // 'document' ';'
       && lk != 26741               // 'document-node' ';'
       && lk != 26742               // 'element' ';'
       && lk != 26743               // 'else' ';'
       && lk != 26744               // 'empty' ';'
       && lk != 26745               // 'empty-sequence' ';'
       && lk != 26746               // 'encoding' ';'
       && lk != 26747               // 'end' ';'
       && lk != 26749               // 'eq' ';'
       && lk != 26750               // 'every' ';'
       && lk != 26752               // 'except' ';'
       && lk != 26753               // 'exit' ';'
       && lk != 26754               // 'external' ';'
       && lk != 26755               // 'first' ';'
       && lk != 26756               // 'following' ';'
       && lk != 26757               // 'following-sibling' ';'
       && lk != 26758               // 'for' ';'
       && lk != 26762               // 'ft-option' ';'
       && lk != 26766               // 'function' ';'
       && lk != 26767               // 'ge' ';'
       && lk != 26769               // 'group' ';'
       && lk != 26771               // 'gt' ';'
       && lk != 26772               // 'idiv' ';'
       && lk != 26773               // 'if' ';'
       && lk != 26774               // 'import' ';'
       && lk != 26775               // 'in' ';'
       && lk != 26776               // 'index' ';'
       && lk != 26780               // 'insert' ';'
       && lk != 26781               // 'instance' ';'
       && lk != 26782               // 'integrity' ';'
       && lk != 26783               // 'intersect' ';'
       && lk != 26784               // 'into' ';'
       && lk != 26785               // 'is' ';'
       && lk != 26786               // 'item' ';'
       && lk != 26789               // 'last' ';'
       && lk != 26790               // 'lax' ';'
       && lk != 26791               // 'le' ';'
       && lk != 26793               // 'let' ';'
       && lk != 26795               // 'loop' ';'
       && lk != 26797               // 'lt' ';'
       && lk != 26799               // 'mod' ';'
       && lk != 26800               // 'modify' ';'
       && lk != 26801               // 'module' ';'
       && lk != 26803               // 'namespace' ';'
       && lk != 26804               // 'namespace-node' ';'
       && lk != 26805               // 'ne' ';'
       && lk != 26810               // 'node' ';'
       && lk != 26811               // 'nodes' ';'
       && lk != 26816               // 'only' ';'
       && lk != 26817               // 'option' ';'
       && lk != 26818               // 'or' ';'
       && lk != 26819               // 'order' ';'
       && lk != 26820               // 'ordered' ';'
       && lk != 26821               // 'ordering' ';'
       && lk != 26824               // 'parent' ';'
       && lk != 26829               // 'preceding' ';'
       && lk != 26830               // 'preceding-sibling' ';'
       && lk != 26833               // 'processing-instruction' ';'
       && lk != 26835               // 'rename' ';'
       && lk != 26836               // 'replace' ';'
       && lk != 26837               // 'return' ';'
       && lk != 26838               // 'returning' ';'
       && lk != 26839               // 'revalidation' ';'
       && lk != 26841               // 'satisfies' ';'
       && lk != 26842               // 'schema' ';'
       && lk != 26843               // 'schema-attribute' ';'
       && lk != 26844               // 'schema-element' ';'
       && lk != 26845               // 'score' ';'
       && lk != 26846               // 'self' ';'
       && lk != 26851               // 'sliding' ';'
       && lk != 26852               // 'some' ';'
       && lk != 26853               // 'stable' ';'
       && lk != 26854               // 'start' ';'
       && lk != 26857               // 'strict' ';'
       && lk != 26859               // 'switch' ';'
       && lk != 26860               // 'text' ';'
       && lk != 26864               // 'to' ';'
       && lk != 26865               // 'treat' ';'
       && lk != 26866               // 'try' ';'
       && lk != 26867               // 'tumbling' ';'
       && lk != 26868               // 'type' ';'
       && lk != 26869               // 'typeswitch' ';'
       && lk != 26870               // 'union' ';'
       && lk != 26872               // 'unordered' ';'
       && lk != 26873               // 'updating' ';'
       && lk != 26876               // 'validate' ';'
       && lk != 26877               // 'value' ';'
       && lk != 26878               // 'variable' ';'
       && lk != 26879               // 'version' ';'
       && lk != 26882               // 'where' ';'
       && lk != 26883               // 'while' ';'
       && lk != 26886               // 'with' ';'
       && lk != 26890               // 'xquery' ';'
       && lk != 87635               // 'break' 'loop'
       && lk != 87651               // 'continue' 'loop'
       && lk != 109697              // 'exit' 'returning'
       && lk != 139269              // Wildcard '}'
       && lk != 139270              // EQName^Token '}'
       && lk != 139272              // IntegerLiteral '}'
       && lk != 139273              // DecimalLiteral '}'
       && lk != 139274              // DoubleLiteral '}'
       && lk != 139275              // StringLiteral '}'
       && lk != 139308              // '.' '}'
       && lk != 139309              // '..' '}'
       && lk != 139310              // '/' '}'
       && lk != 139333              // 'after' '}'
       && lk != 139335              // 'allowing' '}'
       && lk != 139336              // 'ancestor' '}'
       && lk != 139337              // 'ancestor-or-self' '}'
       && lk != 139338              // 'and' '}'
       && lk != 139340              // 'as' '}'
       && lk != 139341              // 'ascending' '}'
       && lk != 139342              // 'at' '}'
       && lk != 139343              // 'attribute' '}'
       && lk != 139344              // 'base-uri' '}'
       && lk != 139345              // 'before' '}'
       && lk != 139346              // 'boundary-space' '}'
       && lk != 139347              // 'break' '}'
       && lk != 139349              // 'case' '}'
       && lk != 139350              // 'cast' '}'
       && lk != 139351              // 'castable' '}'
       && lk != 139352              // 'catch' '}'
       && lk != 139354              // 'child' '}'
       && lk != 139355              // 'collation' '}'
       && lk != 139357              // 'comment' '}'
       && lk != 139358              // 'constraint' '}'
       && lk != 139359              // 'construction' '}'
       && lk != 139362              // 'context' '}'
       && lk != 139363              // 'continue' '}'
       && lk != 139364              // 'copy' '}'
       && lk != 139365              // 'copy-namespaces' '}'
       && lk != 139366              // 'count' '}'
       && lk != 139367              // 'decimal-format' '}'
       && lk != 139369              // 'declare' '}'
       && lk != 139370              // 'default' '}'
       && lk != 139371              // 'delete' '}'
       && lk != 139372              // 'descendant' '}'
       && lk != 139373              // 'descendant-or-self' '}'
       && lk != 139374              // 'descending' '}'
       && lk != 139379              // 'div' '}'
       && lk != 139380              // 'document' '}'
       && lk != 139381              // 'document-node' '}'
       && lk != 139382              // 'element' '}'
       && lk != 139383              // 'else' '}'
       && lk != 139384              // 'empty' '}'
       && lk != 139385              // 'empty-sequence' '}'
       && lk != 139386              // 'encoding' '}'
       && lk != 139387              // 'end' '}'
       && lk != 139389              // 'eq' '}'
       && lk != 139390              // 'every' '}'
       && lk != 139392              // 'except' '}'
       && lk != 139393              // 'exit' '}'
       && lk != 139394              // 'external' '}'
       && lk != 139395              // 'first' '}'
       && lk != 139396              // 'following' '}'
       && lk != 139397              // 'following-sibling' '}'
       && lk != 139398              // 'for' '}'
       && lk != 139402              // 'ft-option' '}'
       && lk != 139406              // 'function' '}'
       && lk != 139407              // 'ge' '}'
       && lk != 139409              // 'group' '}'
       && lk != 139411              // 'gt' '}'
       && lk != 139412              // 'idiv' '}'
       && lk != 139413              // 'if' '}'
       && lk != 139414              // 'import' '}'
       && lk != 139415              // 'in' '}'
       && lk != 139416              // 'index' '}'
       && lk != 139420              // 'insert' '}'
       && lk != 139421              // 'instance' '}'
       && lk != 139422              // 'integrity' '}'
       && lk != 139423              // 'intersect' '}'
       && lk != 139424              // 'into' '}'
       && lk != 139425              // 'is' '}'
       && lk != 139426              // 'item' '}'
       && lk != 139429              // 'last' '}'
       && lk != 139430              // 'lax' '}'
       && lk != 139431              // 'le' '}'
       && lk != 139433              // 'let' '}'
       && lk != 139435              // 'loop' '}'
       && lk != 139437              // 'lt' '}'
       && lk != 139439              // 'mod' '}'
       && lk != 139440              // 'modify' '}'
       && lk != 139441              // 'module' '}'
       && lk != 139443              // 'namespace' '}'
       && lk != 139444              // 'namespace-node' '}'
       && lk != 139445              // 'ne' '}'
       && lk != 139450              // 'node' '}'
       && lk != 139451              // 'nodes' '}'
       && lk != 139456              // 'only' '}'
       && lk != 139457              // 'option' '}'
       && lk != 139458              // 'or' '}'
       && lk != 139459              // 'order' '}'
       && lk != 139460              // 'ordered' '}'
       && lk != 139461              // 'ordering' '}'
       && lk != 139464              // 'parent' '}'
       && lk != 139469              // 'preceding' '}'
       && lk != 139470              // 'preceding-sibling' '}'
       && lk != 139473              // 'processing-instruction' '}'
       && lk != 139475              // 'rename' '}'
       && lk != 139476              // 'replace' '}'
       && lk != 139477              // 'return' '}'
       && lk != 139478              // 'returning' '}'
       && lk != 139479              // 'revalidation' '}'
       && lk != 139481              // 'satisfies' '}'
       && lk != 139482              // 'schema' '}'
       && lk != 139483              // 'schema-attribute' '}'
       && lk != 139484              // 'schema-element' '}'
       && lk != 139485              // 'score' '}'
       && lk != 139486              // 'self' '}'
       && lk != 139491              // 'sliding' '}'
       && lk != 139492              // 'some' '}'
       && lk != 139493              // 'stable' '}'
       && lk != 139494              // 'start' '}'
       && lk != 139497              // 'strict' '}'
       && lk != 139499              // 'switch' '}'
       && lk != 139500              // 'text' '}'
       && lk != 139504              // 'to' '}'
       && lk != 139505              // 'treat' '}'
       && lk != 139506              // 'try' '}'
       && lk != 139507              // 'tumbling' '}'
       && lk != 139508              // 'type' '}'
       && lk != 139509              // 'typeswitch' '}'
       && lk != 139510              // 'union' '}'
       && lk != 139512              // 'unordered' '}'
       && lk != 139513              // 'updating' '}'
       && lk != 139516              // 'validate' '}'
       && lk != 139517              // 'value' '}'
       && lk != 139518              // 'variable' '}'
       && lk != 139519              // 'version' '}'
       && lk != 139522              // 'where' '}'
       && lk != 139523              // 'while' '}'
       && lk != 139526              // 'with' '}'
       && lk != 139530              // 'xquery' '}'
       && lk != 139532)             // '{' '}'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            try_Statement();
            memoize(4, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 16126               // 'variable' '$'
       && lk != 26629               // Wildcard ';'
       && lk != 26630               // EQName^Token ';'
       && lk != 26632               // IntegerLiteral ';'
       && lk != 26633               // DecimalLiteral ';'
       && lk != 26634               // DoubleLiteral ';'
       && lk != 26635               // StringLiteral ';'
       && lk != 26668               // '.' ';'
       && lk != 26669               // '..' ';'
       && lk != 26670               // '/' ';'
       && lk != 26693               // 'after' ';'
       && lk != 26695               // 'allowing' ';'
       && lk != 26696               // 'ancestor' ';'
       && lk != 26697               // 'ancestor-or-self' ';'
       && lk != 26698               // 'and' ';'
       && lk != 26700               // 'as' ';'
       && lk != 26701               // 'ascending' ';'
       && lk != 26702               // 'at' ';'
       && lk != 26703               // 'attribute' ';'
       && lk != 26704               // 'base-uri' ';'
       && lk != 26705               // 'before' ';'
       && lk != 26706               // 'boundary-space' ';'
       && lk != 26707               // 'break' ';'
       && lk != 26709               // 'case' ';'
       && lk != 26710               // 'cast' ';'
       && lk != 26711               // 'castable' ';'
       && lk != 26712               // 'catch' ';'
       && lk != 26714               // 'child' ';'
       && lk != 26715               // 'collation' ';'
       && lk != 26717               // 'comment' ';'
       && lk != 26718               // 'constraint' ';'
       && lk != 26719               // 'construction' ';'
       && lk != 26722               // 'context' ';'
       && lk != 26723               // 'continue' ';'
       && lk != 26724               // 'copy' ';'
       && lk != 26725               // 'copy-namespaces' ';'
       && lk != 26726               // 'count' ';'
       && lk != 26727               // 'decimal-format' ';'
       && lk != 26729               // 'declare' ';'
       && lk != 26730               // 'default' ';'
       && lk != 26731               // 'delete' ';'
       && lk != 26732               // 'descendant' ';'
       && lk != 26733               // 'descendant-or-self' ';'
       && lk != 26734               // 'descending' ';'
       && lk != 26739               // 'div' ';'
       && lk != 26740               // 'document' ';'
       && lk != 26741               // 'document-node' ';'
       && lk != 26742               // 'element' ';'
       && lk != 26743               // 'else' ';'
       && lk != 26744               // 'empty' ';'
       && lk != 26745               // 'empty-sequence' ';'
       && lk != 26746               // 'encoding' ';'
       && lk != 26747               // 'end' ';'
       && lk != 26749               // 'eq' ';'
       && lk != 26750               // 'every' ';'
       && lk != 26752               // 'except' ';'
       && lk != 26753               // 'exit' ';'
       && lk != 26754               // 'external' ';'
       && lk != 26755               // 'first' ';'
       && lk != 26756               // 'following' ';'
       && lk != 26757               // 'following-sibling' ';'
       && lk != 26758               // 'for' ';'
       && lk != 26762               // 'ft-option' ';'
       && lk != 26766               // 'function' ';'
       && lk != 26767               // 'ge' ';'
       && lk != 26769               // 'group' ';'
       && lk != 26771               // 'gt' ';'
       && lk != 26772               // 'idiv' ';'
       && lk != 26773               // 'if' ';'
       && lk != 26774               // 'import' ';'
       && lk != 26775               // 'in' ';'
       && lk != 26776               // 'index' ';'
       && lk != 26780               // 'insert' ';'
       && lk != 26781               // 'instance' ';'
       && lk != 26782               // 'integrity' ';'
       && lk != 26783               // 'intersect' ';'
       && lk != 26784               // 'into' ';'
       && lk != 26785               // 'is' ';'
       && lk != 26786               // 'item' ';'
       && lk != 26789               // 'last' ';'
       && lk != 26790               // 'lax' ';'
       && lk != 26791               // 'le' ';'
       && lk != 26793               // 'let' ';'
       && lk != 26795               // 'loop' ';'
       && lk != 26797               // 'lt' ';'
       && lk != 26799               // 'mod' ';'
       && lk != 26800               // 'modify' ';'
       && lk != 26801               // 'module' ';'
       && lk != 26803               // 'namespace' ';'
       && lk != 26804               // 'namespace-node' ';'
       && lk != 26805               // 'ne' ';'
       && lk != 26810               // 'node' ';'
       && lk != 26811               // 'nodes' ';'
       && lk != 26816               // 'only' ';'
       && lk != 26817               // 'option' ';'
       && lk != 26818               // 'or' ';'
       && lk != 26819               // 'order' ';'
       && lk != 26820               // 'ordered' ';'
       && lk != 26821               // 'ordering' ';'
       && lk != 26824               // 'parent' ';'
       && lk != 26829               // 'preceding' ';'
       && lk != 26830               // 'preceding-sibling' ';'
       && lk != 26833               // 'processing-instruction' ';'
       && lk != 26835               // 'rename' ';'
       && lk != 26836               // 'replace' ';'
       && lk != 26837               // 'return' ';'
       && lk != 26838               // 'returning' ';'
       && lk != 26839               // 'revalidation' ';'
       && lk != 26841               // 'satisfies' ';'
       && lk != 26842               // 'schema' ';'
       && lk != 26843               // 'schema-attribute' ';'
       && lk != 26844               // 'schema-element' ';'
       && lk != 26845               // 'score' ';'
       && lk != 26846               // 'self' ';'
       && lk != 26851               // 'sliding' ';'
       && lk != 26852               // 'some' ';'
       && lk != 26853               // 'stable' ';'
       && lk != 26854               // 'start' ';'
       && lk != 26857               // 'strict' ';'
       && lk != 26859               // 'switch' ';'
       && lk != 26860               // 'text' ';'
       && lk != 26864               // 'to' ';'
       && lk != 26865               // 'treat' ';'
       && lk != 26866               // 'try' ';'
       && lk != 26867               // 'tumbling' ';'
       && lk != 26868               // 'type' ';'
       && lk != 26869               // 'typeswitch' ';'
       && lk != 26870               // 'union' ';'
       && lk != 26872               // 'unordered' ';'
       && lk != 26873               // 'updating' ';'
       && lk != 26876               // 'validate' ';'
       && lk != 26877               // 'value' ';'
       && lk != 26878               // 'variable' ';'
       && lk != 26879               // 'version' ';'
       && lk != 26882               // 'where' ';'
       && lk != 26883               // 'while' ';'
       && lk != 26886               // 'with' ';'
       && lk != 26890               // 'xquery' ';'
       && lk != 87635               // 'break' 'loop'
       && lk != 87651               // 'continue' 'loop'
       && lk != 109697              // 'exit' 'returning'
       && lk != 139532)             // '{' '}'
      {
        break;
      }
      try_Statement();
    }
  }

  private void parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  private void try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  private void parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 25                    // EOF
     && l1 != 272)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  private void parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 129:                       // 'exit'
      lookahead2W(185);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 134:                       // 'for'
      lookahead2W(192);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 169:                       // 'let'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 242:                       // 'try'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 254:                       // 'variable'
      lookahead2W(183);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 268:                       // '{'
      lookahead2W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 83:                        // 'break'
    case 99:                        // 'continue'
      lookahead2W(184);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 149:                       // 'if'
    case 235:                       // 'switch'
    case 245:                       // 'typeswitch'
    case 259:                       // 'while'
      lookahead2W(181);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2828                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3340                  // '{' EQName^Token
     || lk == 4364                  // '{' IntegerLiteral
     || lk == 4876                  // '{' DecimalLiteral
     || lk == 5388                  // '{' DoubleLiteral
     || lk == 5900                  // '{' StringLiteral
     || lk == 16140                 // '{' '$'
     || lk == 16652                 // '{' '%'
     || lk == 17667                 // 'while' '('
     || lk == 17676                 // '{' '('
     || lk == 18188                 // '{' '(#'
     || lk == 20748                 // '{' '+'
     || lk == 21772                 // '{' '-'
     || lk == 22796                 // '{' '.'
     || lk == 23308                 // '{' '..'
     || lk == 23820                 // '{' '/'
     || lk == 24332                 // '{' '//'
     || lk == 27404                 // '{' '<'
     || lk == 27916                 // '{' '<!--'
     || lk == 29964                 // '{' '<?'
     || lk == 33548                 // '{' '@'
     || lk == 35359                 // '$' 'after'
     || lk == 35360                 // '%' 'after'
     || lk == 35596                 // '{' 'after'
     || lk == 36383                 // '$' 'allowing'
     || lk == 36384                 // '%' 'allowing'
     || lk == 36620                 // '{' 'allowing'
     || lk == 36895                 // '$' 'ancestor'
     || lk == 36896                 // '%' 'ancestor'
     || lk == 37132                 // '{' 'ancestor'
     || lk == 37407                 // '$' 'ancestor-or-self'
     || lk == 37408                 // '%' 'ancestor-or-self'
     || lk == 37644                 // '{' 'ancestor-or-self'
     || lk == 37919                 // '$' 'and'
     || lk == 37920                 // '%' 'and'
     || lk == 38156                 // '{' 'and'
     || lk == 38943                 // '$' 'as'
     || lk == 38944                 // '%' 'as'
     || lk == 39180                 // '{' 'as'
     || lk == 39455                 // '$' 'ascending'
     || lk == 39456                 // '%' 'ascending'
     || lk == 39692                 // '{' 'ascending'
     || lk == 39967                 // '$' 'at'
     || lk == 39968                 // '%' 'at'
     || lk == 40204                 // '{' 'at'
     || lk == 40479                 // '$' 'attribute'
     || lk == 40480                 // '%' 'attribute'
     || lk == 40716                 // '{' 'attribute'
     || lk == 40991                 // '$' 'base-uri'
     || lk == 40992                 // '%' 'base-uri'
     || lk == 41228                 // '{' 'base-uri'
     || lk == 41503                 // '$' 'before'
     || lk == 41504                 // '%' 'before'
     || lk == 41740                 // '{' 'before'
     || lk == 42015                 // '$' 'boundary-space'
     || lk == 42016                 // '%' 'boundary-space'
     || lk == 42252                 // '{' 'boundary-space'
     || lk == 42527                 // '$' 'break'
     || lk == 42528                 // '%' 'break'
     || lk == 42764                 // '{' 'break'
     || lk == 43551                 // '$' 'case'
     || lk == 43552                 // '%' 'case'
     || lk == 43788                 // '{' 'case'
     || lk == 44063                 // '$' 'cast'
     || lk == 44064                 // '%' 'cast'
     || lk == 44300                 // '{' 'cast'
     || lk == 44575                 // '$' 'castable'
     || lk == 44576                 // '%' 'castable'
     || lk == 44812                 // '{' 'castable'
     || lk == 45087                 // '$' 'catch'
     || lk == 45088                 // '%' 'catch'
     || lk == 45324                 // '{' 'catch'
     || lk == 46111                 // '$' 'child'
     || lk == 46112                 // '%' 'child'
     || lk == 46348                 // '{' 'child'
     || lk == 46623                 // '$' 'collation'
     || lk == 46624                 // '%' 'collation'
     || lk == 46860                 // '{' 'collation'
     || lk == 47647                 // '$' 'comment'
     || lk == 47648                 // '%' 'comment'
     || lk == 47884                 // '{' 'comment'
     || lk == 48159                 // '$' 'constraint'
     || lk == 48160                 // '%' 'constraint'
     || lk == 48396                 // '{' 'constraint'
     || lk == 48671                 // '$' 'construction'
     || lk == 48672                 // '%' 'construction'
     || lk == 48908                 // '{' 'construction'
     || lk == 50207                 // '$' 'context'
     || lk == 50208                 // '%' 'context'
     || lk == 50444                 // '{' 'context'
     || lk == 50719                 // '$' 'continue'
     || lk == 50720                 // '%' 'continue'
     || lk == 50956                 // '{' 'continue'
     || lk == 51231                 // '$' 'copy'
     || lk == 51232                 // '%' 'copy'
     || lk == 51468                 // '{' 'copy'
     || lk == 51743                 // '$' 'copy-namespaces'
     || lk == 51744                 // '%' 'copy-namespaces'
     || lk == 51980                 // '{' 'copy-namespaces'
     || lk == 52255                 // '$' 'count'
     || lk == 52256                 // '%' 'count'
     || lk == 52492                 // '{' 'count'
     || lk == 52767                 // '$' 'decimal-format'
     || lk == 52768                 // '%' 'decimal-format'
     || lk == 53004                 // '{' 'decimal-format'
     || lk == 53791                 // '$' 'declare'
     || lk == 53792                 // '%' 'declare'
     || lk == 54028                 // '{' 'declare'
     || lk == 54303                 // '$' 'default'
     || lk == 54304                 // '%' 'default'
     || lk == 54540                 // '{' 'default'
     || lk == 54815                 // '$' 'delete'
     || lk == 54816                 // '%' 'delete'
     || lk == 55052                 // '{' 'delete'
     || lk == 55327                 // '$' 'descendant'
     || lk == 55328                 // '%' 'descendant'
     || lk == 55564                 // '{' 'descendant'
     || lk == 55839                 // '$' 'descendant-or-self'
     || lk == 55840                 // '%' 'descendant-or-self'
     || lk == 56076                 // '{' 'descendant-or-self'
     || lk == 56351                 // '$' 'descending'
     || lk == 56352                 // '%' 'descending'
     || lk == 56588                 // '{' 'descending'
     || lk == 58911                 // '$' 'div'
     || lk == 58912                 // '%' 'div'
     || lk == 59148                 // '{' 'div'
     || lk == 59423                 // '$' 'document'
     || lk == 59424                 // '%' 'document'
     || lk == 59660                 // '{' 'document'
     || lk == 59935                 // '$' 'document-node'
     || lk == 59936                 // '%' 'document-node'
     || lk == 60172                 // '{' 'document-node'
     || lk == 60447                 // '$' 'element'
     || lk == 60448                 // '%' 'element'
     || lk == 60684                 // '{' 'element'
     || lk == 60959                 // '$' 'else'
     || lk == 60960                 // '%' 'else'
     || lk == 61196                 // '{' 'else'
     || lk == 61471                 // '$' 'empty'
     || lk == 61472                 // '%' 'empty'
     || lk == 61708                 // '{' 'empty'
     || lk == 61983                 // '$' 'empty-sequence'
     || lk == 61984                 // '%' 'empty-sequence'
     || lk == 62220                 // '{' 'empty-sequence'
     || lk == 62495                 // '$' 'encoding'
     || lk == 62496                 // '%' 'encoding'
     || lk == 62732                 // '{' 'encoding'
     || lk == 63007                 // '$' 'end'
     || lk == 63008                 // '%' 'end'
     || lk == 63244                 // '{' 'end'
     || lk == 64031                 // '$' 'eq'
     || lk == 64032                 // '%' 'eq'
     || lk == 64268                 // '{' 'eq'
     || lk == 64543                 // '$' 'every'
     || lk == 64544                 // '%' 'every'
     || lk == 64780                 // '{' 'every'
     || lk == 65567                 // '$' 'except'
     || lk == 65568                 // '%' 'except'
     || lk == 65804                 // '{' 'except'
     || lk == 66079                 // '$' 'exit'
     || lk == 66080                 // '%' 'exit'
     || lk == 66316                 // '{' 'exit'
     || lk == 66591                 // '$' 'external'
     || lk == 66592                 // '%' 'external'
     || lk == 66828                 // '{' 'external'
     || lk == 67103                 // '$' 'first'
     || lk == 67104                 // '%' 'first'
     || lk == 67340                 // '{' 'first'
     || lk == 67615                 // '$' 'following'
     || lk == 67616                 // '%' 'following'
     || lk == 67852                 // '{' 'following'
     || lk == 68127                 // '$' 'following-sibling'
     || lk == 68128                 // '%' 'following-sibling'
     || lk == 68364                 // '{' 'following-sibling'
     || lk == 68639                 // '$' 'for'
     || lk == 68640                 // '%' 'for'
     || lk == 68876                 // '{' 'for'
     || lk == 70687                 // '$' 'ft-option'
     || lk == 70688                 // '%' 'ft-option'
     || lk == 70924                 // '{' 'ft-option'
     || lk == 72735                 // '$' 'function'
     || lk == 72736                 // '%' 'function'
     || lk == 72972                 // '{' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 73248                 // '%' 'ge'
     || lk == 73484                 // '{' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 74272                 // '%' 'group'
     || lk == 74508                 // '{' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75296                 // '%' 'gt'
     || lk == 75532                 // '{' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 75808                 // '%' 'idiv'
     || lk == 76044                 // '{' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76320                 // '%' 'if'
     || lk == 76556                 // '{' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 76832                 // '%' 'import'
     || lk == 77068                 // '{' 'import'
     || lk == 77343                 // '$' 'in'
     || lk == 77344                 // '%' 'in'
     || lk == 77580                 // '{' 'in'
     || lk == 77855                 // '$' 'index'
     || lk == 77856                 // '%' 'index'
     || lk == 78092                 // '{' 'index'
     || lk == 79903                 // '$' 'insert'
     || lk == 79904                 // '%' 'insert'
     || lk == 80140                 // '{' 'insert'
     || lk == 80415                 // '$' 'instance'
     || lk == 80416                 // '%' 'instance'
     || lk == 80652                 // '{' 'instance'
     || lk == 80927                 // '$' 'integrity'
     || lk == 80928                 // '%' 'integrity'
     || lk == 81164                 // '{' 'integrity'
     || lk == 81439                 // '$' 'intersect'
     || lk == 81440                 // '%' 'intersect'
     || lk == 81676                 // '{' 'intersect'
     || lk == 81951                 // '$' 'into'
     || lk == 81952                 // '%' 'into'
     || lk == 82188                 // '{' 'into'
     || lk == 82463                 // '$' 'is'
     || lk == 82464                 // '%' 'is'
     || lk == 82700                 // '{' 'is'
     || lk == 82975                 // '$' 'item'
     || lk == 82976                 // '%' 'item'
     || lk == 83212                 // '{' 'item'
     || lk == 84511                 // '$' 'last'
     || lk == 84512                 // '%' 'last'
     || lk == 84748                 // '{' 'last'
     || lk == 85023                 // '$' 'lax'
     || lk == 85024                 // '%' 'lax'
     || lk == 85260                 // '{' 'lax'
     || lk == 85535                 // '$' 'le'
     || lk == 85536                 // '%' 'le'
     || lk == 85772                 // '{' 'le'
     || lk == 86559                 // '$' 'let'
     || lk == 86560                 // '%' 'let'
     || lk == 86796                 // '{' 'let'
     || lk == 87583                 // '$' 'loop'
     || lk == 87584                 // '%' 'loop'
     || lk == 87820                 // '{' 'loop'
     || lk == 88607                 // '$' 'lt'
     || lk == 88608                 // '%' 'lt'
     || lk == 88844                 // '{' 'lt'
     || lk == 89631                 // '$' 'mod'
     || lk == 89632                 // '%' 'mod'
     || lk == 89868                 // '{' 'mod'
     || lk == 90143                 // '$' 'modify'
     || lk == 90144                 // '%' 'modify'
     || lk == 90380                 // '{' 'modify'
     || lk == 90655                 // '$' 'module'
     || lk == 90656                 // '%' 'module'
     || lk == 90892                 // '{' 'module'
     || lk == 91679                 // '$' 'namespace'
     || lk == 91680                 // '%' 'namespace'
     || lk == 91916                 // '{' 'namespace'
     || lk == 92191                 // '$' 'namespace-node'
     || lk == 92192                 // '%' 'namespace-node'
     || lk == 92428                 // '{' 'namespace-node'
     || lk == 92703                 // '$' 'ne'
     || lk == 92704                 // '%' 'ne'
     || lk == 92940                 // '{' 'ne'
     || lk == 95263                 // '$' 'node'
     || lk == 95264                 // '%' 'node'
     || lk == 95500                 // '{' 'node'
     || lk == 95775                 // '$' 'nodes'
     || lk == 95776                 // '%' 'nodes'
     || lk == 96012                 // '{' 'nodes'
     || lk == 98335                 // '$' 'only'
     || lk == 98336                 // '%' 'only'
     || lk == 98572                 // '{' 'only'
     || lk == 98847                 // '$' 'option'
     || lk == 98848                 // '%' 'option'
     || lk == 99084                 // '{' 'option'
     || lk == 99359                 // '$' 'or'
     || lk == 99360                 // '%' 'or'
     || lk == 99596                 // '{' 'or'
     || lk == 99871                 // '$' 'order'
     || lk == 99872                 // '%' 'order'
     || lk == 100108                // '{' 'order'
     || lk == 100383                // '$' 'ordered'
     || lk == 100384                // '%' 'ordered'
     || lk == 100620                // '{' 'ordered'
     || lk == 100895                // '$' 'ordering'
     || lk == 100896                // '%' 'ordering'
     || lk == 101132                // '{' 'ordering'
     || lk == 102431                // '$' 'parent'
     || lk == 102432                // '%' 'parent'
     || lk == 102668                // '{' 'parent'
     || lk == 104991                // '$' 'preceding'
     || lk == 104992                // '%' 'preceding'
     || lk == 105228                // '{' 'preceding'
     || lk == 105503                // '$' 'preceding-sibling'
     || lk == 105504                // '%' 'preceding-sibling'
     || lk == 105740                // '{' 'preceding-sibling'
     || lk == 107039                // '$' 'processing-instruction'
     || lk == 107040                // '%' 'processing-instruction'
     || lk == 107276                // '{' 'processing-instruction'
     || lk == 108063                // '$' 'rename'
     || lk == 108064                // '%' 'rename'
     || lk == 108300                // '{' 'rename'
     || lk == 108575                // '$' 'replace'
     || lk == 108576                // '%' 'replace'
     || lk == 108812                // '{' 'replace'
     || lk == 109087                // '$' 'return'
     || lk == 109088                // '%' 'return'
     || lk == 109324                // '{' 'return'
     || lk == 109599                // '$' 'returning'
     || lk == 109600                // '%' 'returning'
     || lk == 109836                // '{' 'returning'
     || lk == 110111                // '$' 'revalidation'
     || lk == 110112                // '%' 'revalidation'
     || lk == 110348                // '{' 'revalidation'
     || lk == 111135                // '$' 'satisfies'
     || lk == 111136                // '%' 'satisfies'
     || lk == 111372                // '{' 'satisfies'
     || lk == 111647                // '$' 'schema'
     || lk == 111648                // '%' 'schema'
     || lk == 111884                // '{' 'schema'
     || lk == 112159                // '$' 'schema-attribute'
     || lk == 112160                // '%' 'schema-attribute'
     || lk == 112396                // '{' 'schema-attribute'
     || lk == 112671                // '$' 'schema-element'
     || lk == 112672                // '%' 'schema-element'
     || lk == 112908                // '{' 'schema-element'
     || lk == 113183                // '$' 'score'
     || lk == 113184                // '%' 'score'
     || lk == 113420                // '{' 'score'
     || lk == 113695                // '$' 'self'
     || lk == 113696                // '%' 'self'
     || lk == 113932                // '{' 'self'
     || lk == 116255                // '$' 'sliding'
     || lk == 116256                // '%' 'sliding'
     || lk == 116492                // '{' 'sliding'
     || lk == 116767                // '$' 'some'
     || lk == 116768                // '%' 'some'
     || lk == 117004                // '{' 'some'
     || lk == 117279                // '$' 'stable'
     || lk == 117280                // '%' 'stable'
     || lk == 117516                // '{' 'stable'
     || lk == 117791                // '$' 'start'
     || lk == 117792                // '%' 'start'
     || lk == 118028                // '{' 'start'
     || lk == 119327                // '$' 'strict'
     || lk == 119328                // '%' 'strict'
     || lk == 119564                // '{' 'strict'
     || lk == 120351                // '$' 'switch'
     || lk == 120352                // '%' 'switch'
     || lk == 120588                // '{' 'switch'
     || lk == 120863                // '$' 'text'
     || lk == 120864                // '%' 'text'
     || lk == 121100                // '{' 'text'
     || lk == 122911                // '$' 'to'
     || lk == 122912                // '%' 'to'
     || lk == 123148                // '{' 'to'
     || lk == 123423                // '$' 'treat'
     || lk == 123424                // '%' 'treat'
     || lk == 123660                // '{' 'treat'
     || lk == 123935                // '$' 'try'
     || lk == 123936                // '%' 'try'
     || lk == 124172                // '{' 'try'
     || lk == 124447                // '$' 'tumbling'
     || lk == 124448                // '%' 'tumbling'
     || lk == 124684                // '{' 'tumbling'
     || lk == 124959                // '$' 'type'
     || lk == 124960                // '%' 'type'
     || lk == 125196                // '{' 'type'
     || lk == 125471                // '$' 'typeswitch'
     || lk == 125472                // '%' 'typeswitch'
     || lk == 125708                // '{' 'typeswitch'
     || lk == 125983                // '$' 'union'
     || lk == 125984                // '%' 'union'
     || lk == 126220                // '{' 'union'
     || lk == 127007                // '$' 'unordered'
     || lk == 127008                // '%' 'unordered'
     || lk == 127244                // '{' 'unordered'
     || lk == 127519                // '$' 'updating'
     || lk == 127520                // '%' 'updating'
     || lk == 127756                // '{' 'updating'
     || lk == 129055                // '$' 'validate'
     || lk == 129056                // '%' 'validate'
     || lk == 129292                // '{' 'validate'
     || lk == 129567                // '$' 'value'
     || lk == 129568                // '%' 'value'
     || lk == 129804                // '{' 'value'
     || lk == 130079                // '$' 'variable'
     || lk == 130080                // '%' 'variable'
     || lk == 130316                // '{' 'variable'
     || lk == 130591                // '$' 'version'
     || lk == 130592                // '%' 'version'
     || lk == 130828                // '{' 'version'
     || lk == 132127                // '$' 'where'
     || lk == 132128                // '%' 'where'
     || lk == 132364                // '{' 'where'
     || lk == 132639                // '$' 'while'
     || lk == 132640                // '%' 'while'
     || lk == 132876                // '{' 'while'
     || lk == 134175                // '$' 'with'
     || lk == 134176                // '%' 'with'
     || lk == 134412                // '{' 'with'
     || lk == 136223                // '$' 'xquery'
     || lk == 136224                // '%' 'xquery'
     || lk == 136460                // '{' 'xquery'
     || lk == 137484)               // '{' '{'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (ParseException p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (ParseException p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (ParseException p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
    case 139532:                    // '{' '}'
      parse_BlockStatement();
      break;
    case 87635:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 87651:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 109697:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16006:                     // 'for' '$'
    case 16041:                     // 'let' '$'
    case 113321:                    // 'let' 'score'
    case 116358:                    // 'for' 'sliding'
    case 124550:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 17557:                     // 'if' '('
      parse_IfStatement();
      break;
    case 17643:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 137458:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 17653:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16126:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  private void try_Statement()
  {
    switch (l1)
    {
    case 129:                       // 'exit'
      lookahead2W(185);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 134:                       // 'for'
      lookahead2W(192);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 169:                       // 'let'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 242:                       // 'try'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 254:                       // 'variable'
      lookahead2W(183);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 268:                       // '{'
      lookahead2W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 83:                        // 'break'
    case 99:                        // 'continue'
      lookahead2W(184);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 149:                       // 'if'
    case 235:                       // 'switch'
    case 245:                       // 'typeswitch'
    case 259:                       // 'while'
      lookahead2W(181);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2828                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3340                  // '{' EQName^Token
     || lk == 4364                  // '{' IntegerLiteral
     || lk == 4876                  // '{' DecimalLiteral
     || lk == 5388                  // '{' DoubleLiteral
     || lk == 5900                  // '{' StringLiteral
     || lk == 16140                 // '{' '$'
     || lk == 16652                 // '{' '%'
     || lk == 17667                 // 'while' '('
     || lk == 17676                 // '{' '('
     || lk == 18188                 // '{' '(#'
     || lk == 20748                 // '{' '+'
     || lk == 21772                 // '{' '-'
     || lk == 22796                 // '{' '.'
     || lk == 23308                 // '{' '..'
     || lk == 23820                 // '{' '/'
     || lk == 24332                 // '{' '//'
     || lk == 27404                 // '{' '<'
     || lk == 27916                 // '{' '<!--'
     || lk == 29964                 // '{' '<?'
     || lk == 33548                 // '{' '@'
     || lk == 35359                 // '$' 'after'
     || lk == 35360                 // '%' 'after'
     || lk == 35596                 // '{' 'after'
     || lk == 36383                 // '$' 'allowing'
     || lk == 36384                 // '%' 'allowing'
     || lk == 36620                 // '{' 'allowing'
     || lk == 36895                 // '$' 'ancestor'
     || lk == 36896                 // '%' 'ancestor'
     || lk == 37132                 // '{' 'ancestor'
     || lk == 37407                 // '$' 'ancestor-or-self'
     || lk == 37408                 // '%' 'ancestor-or-self'
     || lk == 37644                 // '{' 'ancestor-or-self'
     || lk == 37919                 // '$' 'and'
     || lk == 37920                 // '%' 'and'
     || lk == 38156                 // '{' 'and'
     || lk == 38943                 // '$' 'as'
     || lk == 38944                 // '%' 'as'
     || lk == 39180                 // '{' 'as'
     || lk == 39455                 // '$' 'ascending'
     || lk == 39456                 // '%' 'ascending'
     || lk == 39692                 // '{' 'ascending'
     || lk == 39967                 // '$' 'at'
     || lk == 39968                 // '%' 'at'
     || lk == 40204                 // '{' 'at'
     || lk == 40479                 // '$' 'attribute'
     || lk == 40480                 // '%' 'attribute'
     || lk == 40716                 // '{' 'attribute'
     || lk == 40991                 // '$' 'base-uri'
     || lk == 40992                 // '%' 'base-uri'
     || lk == 41228                 // '{' 'base-uri'
     || lk == 41503                 // '$' 'before'
     || lk == 41504                 // '%' 'before'
     || lk == 41740                 // '{' 'before'
     || lk == 42015                 // '$' 'boundary-space'
     || lk == 42016                 // '%' 'boundary-space'
     || lk == 42252                 // '{' 'boundary-space'
     || lk == 42527                 // '$' 'break'
     || lk == 42528                 // '%' 'break'
     || lk == 42764                 // '{' 'break'
     || lk == 43551                 // '$' 'case'
     || lk == 43552                 // '%' 'case'
     || lk == 43788                 // '{' 'case'
     || lk == 44063                 // '$' 'cast'
     || lk == 44064                 // '%' 'cast'
     || lk == 44300                 // '{' 'cast'
     || lk == 44575                 // '$' 'castable'
     || lk == 44576                 // '%' 'castable'
     || lk == 44812                 // '{' 'castable'
     || lk == 45087                 // '$' 'catch'
     || lk == 45088                 // '%' 'catch'
     || lk == 45324                 // '{' 'catch'
     || lk == 46111                 // '$' 'child'
     || lk == 46112                 // '%' 'child'
     || lk == 46348                 // '{' 'child'
     || lk == 46623                 // '$' 'collation'
     || lk == 46624                 // '%' 'collation'
     || lk == 46860                 // '{' 'collation'
     || lk == 47647                 // '$' 'comment'
     || lk == 47648                 // '%' 'comment'
     || lk == 47884                 // '{' 'comment'
     || lk == 48159                 // '$' 'constraint'
     || lk == 48160                 // '%' 'constraint'
     || lk == 48396                 // '{' 'constraint'
     || lk == 48671                 // '$' 'construction'
     || lk == 48672                 // '%' 'construction'
     || lk == 48908                 // '{' 'construction'
     || lk == 50207                 // '$' 'context'
     || lk == 50208                 // '%' 'context'
     || lk == 50444                 // '{' 'context'
     || lk == 50719                 // '$' 'continue'
     || lk == 50720                 // '%' 'continue'
     || lk == 50956                 // '{' 'continue'
     || lk == 51231                 // '$' 'copy'
     || lk == 51232                 // '%' 'copy'
     || lk == 51468                 // '{' 'copy'
     || lk == 51743                 // '$' 'copy-namespaces'
     || lk == 51744                 // '%' 'copy-namespaces'
     || lk == 51980                 // '{' 'copy-namespaces'
     || lk == 52255                 // '$' 'count'
     || lk == 52256                 // '%' 'count'
     || lk == 52492                 // '{' 'count'
     || lk == 52767                 // '$' 'decimal-format'
     || lk == 52768                 // '%' 'decimal-format'
     || lk == 53004                 // '{' 'decimal-format'
     || lk == 53791                 // '$' 'declare'
     || lk == 53792                 // '%' 'declare'
     || lk == 54028                 // '{' 'declare'
     || lk == 54303                 // '$' 'default'
     || lk == 54304                 // '%' 'default'
     || lk == 54540                 // '{' 'default'
     || lk == 54815                 // '$' 'delete'
     || lk == 54816                 // '%' 'delete'
     || lk == 55052                 // '{' 'delete'
     || lk == 55327                 // '$' 'descendant'
     || lk == 55328                 // '%' 'descendant'
     || lk == 55564                 // '{' 'descendant'
     || lk == 55839                 // '$' 'descendant-or-self'
     || lk == 55840                 // '%' 'descendant-or-self'
     || lk == 56076                 // '{' 'descendant-or-self'
     || lk == 56351                 // '$' 'descending'
     || lk == 56352                 // '%' 'descending'
     || lk == 56588                 // '{' 'descending'
     || lk == 58911                 // '$' 'div'
     || lk == 58912                 // '%' 'div'
     || lk == 59148                 // '{' 'div'
     || lk == 59423                 // '$' 'document'
     || lk == 59424                 // '%' 'document'
     || lk == 59660                 // '{' 'document'
     || lk == 59935                 // '$' 'document-node'
     || lk == 59936                 // '%' 'document-node'
     || lk == 60172                 // '{' 'document-node'
     || lk == 60447                 // '$' 'element'
     || lk == 60448                 // '%' 'element'
     || lk == 60684                 // '{' 'element'
     || lk == 60959                 // '$' 'else'
     || lk == 60960                 // '%' 'else'
     || lk == 61196                 // '{' 'else'
     || lk == 61471                 // '$' 'empty'
     || lk == 61472                 // '%' 'empty'
     || lk == 61708                 // '{' 'empty'
     || lk == 61983                 // '$' 'empty-sequence'
     || lk == 61984                 // '%' 'empty-sequence'
     || lk == 62220                 // '{' 'empty-sequence'
     || lk == 62495                 // '$' 'encoding'
     || lk == 62496                 // '%' 'encoding'
     || lk == 62732                 // '{' 'encoding'
     || lk == 63007                 // '$' 'end'
     || lk == 63008                 // '%' 'end'
     || lk == 63244                 // '{' 'end'
     || lk == 64031                 // '$' 'eq'
     || lk == 64032                 // '%' 'eq'
     || lk == 64268                 // '{' 'eq'
     || lk == 64543                 // '$' 'every'
     || lk == 64544                 // '%' 'every'
     || lk == 64780                 // '{' 'every'
     || lk == 65567                 // '$' 'except'
     || lk == 65568                 // '%' 'except'
     || lk == 65804                 // '{' 'except'
     || lk == 66079                 // '$' 'exit'
     || lk == 66080                 // '%' 'exit'
     || lk == 66316                 // '{' 'exit'
     || lk == 66591                 // '$' 'external'
     || lk == 66592                 // '%' 'external'
     || lk == 66828                 // '{' 'external'
     || lk == 67103                 // '$' 'first'
     || lk == 67104                 // '%' 'first'
     || lk == 67340                 // '{' 'first'
     || lk == 67615                 // '$' 'following'
     || lk == 67616                 // '%' 'following'
     || lk == 67852                 // '{' 'following'
     || lk == 68127                 // '$' 'following-sibling'
     || lk == 68128                 // '%' 'following-sibling'
     || lk == 68364                 // '{' 'following-sibling'
     || lk == 68639                 // '$' 'for'
     || lk == 68640                 // '%' 'for'
     || lk == 68876                 // '{' 'for'
     || lk == 70687                 // '$' 'ft-option'
     || lk == 70688                 // '%' 'ft-option'
     || lk == 70924                 // '{' 'ft-option'
     || lk == 72735                 // '$' 'function'
     || lk == 72736                 // '%' 'function'
     || lk == 72972                 // '{' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 73248                 // '%' 'ge'
     || lk == 73484                 // '{' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 74272                 // '%' 'group'
     || lk == 74508                 // '{' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75296                 // '%' 'gt'
     || lk == 75532                 // '{' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 75808                 // '%' 'idiv'
     || lk == 76044                 // '{' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76320                 // '%' 'if'
     || lk == 76556                 // '{' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 76832                 // '%' 'import'
     || lk == 77068                 // '{' 'import'
     || lk == 77343                 // '$' 'in'
     || lk == 77344                 // '%' 'in'
     || lk == 77580                 // '{' 'in'
     || lk == 77855                 // '$' 'index'
     || lk == 77856                 // '%' 'index'
     || lk == 78092                 // '{' 'index'
     || lk == 79903                 // '$' 'insert'
     || lk == 79904                 // '%' 'insert'
     || lk == 80140                 // '{' 'insert'
     || lk == 80415                 // '$' 'instance'
     || lk == 80416                 // '%' 'instance'
     || lk == 80652                 // '{' 'instance'
     || lk == 80927                 // '$' 'integrity'
     || lk == 80928                 // '%' 'integrity'
     || lk == 81164                 // '{' 'integrity'
     || lk == 81439                 // '$' 'intersect'
     || lk == 81440                 // '%' 'intersect'
     || lk == 81676                 // '{' 'intersect'
     || lk == 81951                 // '$' 'into'
     || lk == 81952                 // '%' 'into'
     || lk == 82188                 // '{' 'into'
     || lk == 82463                 // '$' 'is'
     || lk == 82464                 // '%' 'is'
     || lk == 82700                 // '{' 'is'
     || lk == 82975                 // '$' 'item'
     || lk == 82976                 // '%' 'item'
     || lk == 83212                 // '{' 'item'
     || lk == 84511                 // '$' 'last'
     || lk == 84512                 // '%' 'last'
     || lk == 84748                 // '{' 'last'
     || lk == 85023                 // '$' 'lax'
     || lk == 85024                 // '%' 'lax'
     || lk == 85260                 // '{' 'lax'
     || lk == 85535                 // '$' 'le'
     || lk == 85536                 // '%' 'le'
     || lk == 85772                 // '{' 'le'
     || lk == 86559                 // '$' 'let'
     || lk == 86560                 // '%' 'let'
     || lk == 86796                 // '{' 'let'
     || lk == 87583                 // '$' 'loop'
     || lk == 87584                 // '%' 'loop'
     || lk == 87820                 // '{' 'loop'
     || lk == 88607                 // '$' 'lt'
     || lk == 88608                 // '%' 'lt'
     || lk == 88844                 // '{' 'lt'
     || lk == 89631                 // '$' 'mod'
     || lk == 89632                 // '%' 'mod'
     || lk == 89868                 // '{' 'mod'
     || lk == 90143                 // '$' 'modify'
     || lk == 90144                 // '%' 'modify'
     || lk == 90380                 // '{' 'modify'
     || lk == 90655                 // '$' 'module'
     || lk == 90656                 // '%' 'module'
     || lk == 90892                 // '{' 'module'
     || lk == 91679                 // '$' 'namespace'
     || lk == 91680                 // '%' 'namespace'
     || lk == 91916                 // '{' 'namespace'
     || lk == 92191                 // '$' 'namespace-node'
     || lk == 92192                 // '%' 'namespace-node'
     || lk == 92428                 // '{' 'namespace-node'
     || lk == 92703                 // '$' 'ne'
     || lk == 92704                 // '%' 'ne'
     || lk == 92940                 // '{' 'ne'
     || lk == 95263                 // '$' 'node'
     || lk == 95264                 // '%' 'node'
     || lk == 95500                 // '{' 'node'
     || lk == 95775                 // '$' 'nodes'
     || lk == 95776                 // '%' 'nodes'
     || lk == 96012                 // '{' 'nodes'
     || lk == 98335                 // '$' 'only'
     || lk == 98336                 // '%' 'only'
     || lk == 98572                 // '{' 'only'
     || lk == 98847                 // '$' 'option'
     || lk == 98848                 // '%' 'option'
     || lk == 99084                 // '{' 'option'
     || lk == 99359                 // '$' 'or'
     || lk == 99360                 // '%' 'or'
     || lk == 99596                 // '{' 'or'
     || lk == 99871                 // '$' 'order'
     || lk == 99872                 // '%' 'order'
     || lk == 100108                // '{' 'order'
     || lk == 100383                // '$' 'ordered'
     || lk == 100384                // '%' 'ordered'
     || lk == 100620                // '{' 'ordered'
     || lk == 100895                // '$' 'ordering'
     || lk == 100896                // '%' 'ordering'
     || lk == 101132                // '{' 'ordering'
     || lk == 102431                // '$' 'parent'
     || lk == 102432                // '%' 'parent'
     || lk == 102668                // '{' 'parent'
     || lk == 104991                // '$' 'preceding'
     || lk == 104992                // '%' 'preceding'
     || lk == 105228                // '{' 'preceding'
     || lk == 105503                // '$' 'preceding-sibling'
     || lk == 105504                // '%' 'preceding-sibling'
     || lk == 105740                // '{' 'preceding-sibling'
     || lk == 107039                // '$' 'processing-instruction'
     || lk == 107040                // '%' 'processing-instruction'
     || lk == 107276                // '{' 'processing-instruction'
     || lk == 108063                // '$' 'rename'
     || lk == 108064                // '%' 'rename'
     || lk == 108300                // '{' 'rename'
     || lk == 108575                // '$' 'replace'
     || lk == 108576                // '%' 'replace'
     || lk == 108812                // '{' 'replace'
     || lk == 109087                // '$' 'return'
     || lk == 109088                // '%' 'return'
     || lk == 109324                // '{' 'return'
     || lk == 109599                // '$' 'returning'
     || lk == 109600                // '%' 'returning'
     || lk == 109836                // '{' 'returning'
     || lk == 110111                // '$' 'revalidation'
     || lk == 110112                // '%' 'revalidation'
     || lk == 110348                // '{' 'revalidation'
     || lk == 111135                // '$' 'satisfies'
     || lk == 111136                // '%' 'satisfies'
     || lk == 111372                // '{' 'satisfies'
     || lk == 111647                // '$' 'schema'
     || lk == 111648                // '%' 'schema'
     || lk == 111884                // '{' 'schema'
     || lk == 112159                // '$' 'schema-attribute'
     || lk == 112160                // '%' 'schema-attribute'
     || lk == 112396                // '{' 'schema-attribute'
     || lk == 112671                // '$' 'schema-element'
     || lk == 112672                // '%' 'schema-element'
     || lk == 112908                // '{' 'schema-element'
     || lk == 113183                // '$' 'score'
     || lk == 113184                // '%' 'score'
     || lk == 113420                // '{' 'score'
     || lk == 113695                // '$' 'self'
     || lk == 113696                // '%' 'self'
     || lk == 113932                // '{' 'self'
     || lk == 116255                // '$' 'sliding'
     || lk == 116256                // '%' 'sliding'
     || lk == 116492                // '{' 'sliding'
     || lk == 116767                // '$' 'some'
     || lk == 116768                // '%' 'some'
     || lk == 117004                // '{' 'some'
     || lk == 117279                // '$' 'stable'
     || lk == 117280                // '%' 'stable'
     || lk == 117516                // '{' 'stable'
     || lk == 117791                // '$' 'start'
     || lk == 117792                // '%' 'start'
     || lk == 118028                // '{' 'start'
     || lk == 119327                // '$' 'strict'
     || lk == 119328                // '%' 'strict'
     || lk == 119564                // '{' 'strict'
     || lk == 120351                // '$' 'switch'
     || lk == 120352                // '%' 'switch'
     || lk == 120588                // '{' 'switch'
     || lk == 120863                // '$' 'text'
     || lk == 120864                // '%' 'text'
     || lk == 121100                // '{' 'text'
     || lk == 122911                // '$' 'to'
     || lk == 122912                // '%' 'to'
     || lk == 123148                // '{' 'to'
     || lk == 123423                // '$' 'treat'
     || lk == 123424                // '%' 'treat'
     || lk == 123660                // '{' 'treat'
     || lk == 123935                // '$' 'try'
     || lk == 123936                // '%' 'try'
     || lk == 124172                // '{' 'try'
     || lk == 124447                // '$' 'tumbling'
     || lk == 124448                // '%' 'tumbling'
     || lk == 124684                // '{' 'tumbling'
     || lk == 124959                // '$' 'type'
     || lk == 124960                // '%' 'type'
     || lk == 125196                // '{' 'type'
     || lk == 125471                // '$' 'typeswitch'
     || lk == 125472                // '%' 'typeswitch'
     || lk == 125708                // '{' 'typeswitch'
     || lk == 125983                // '$' 'union'
     || lk == 125984                // '%' 'union'
     || lk == 126220                // '{' 'union'
     || lk == 127007                // '$' 'unordered'
     || lk == 127008                // '%' 'unordered'
     || lk == 127244                // '{' 'unordered'
     || lk == 127519                // '$' 'updating'
     || lk == 127520                // '%' 'updating'
     || lk == 127756                // '{' 'updating'
     || lk == 129055                // '$' 'validate'
     || lk == 129056                // '%' 'validate'
     || lk == 129292                // '{' 'validate'
     || lk == 129567                // '$' 'value'
     || lk == 129568                // '%' 'value'
     || lk == 129804                // '{' 'value'
     || lk == 130079                // '$' 'variable'
     || lk == 130080                // '%' 'variable'
     || lk == 130316                // '{' 'variable'
     || lk == 130591                // '$' 'version'
     || lk == 130592                // '%' 'version'
     || lk == 130828                // '{' 'version'
     || lk == 132127                // '$' 'where'
     || lk == 132128                // '%' 'where'
     || lk == 132364                // '{' 'where'
     || lk == 132639                // '$' 'while'
     || lk == 132640                // '%' 'while'
     || lk == 132876                // '{' 'while'
     || lk == 134175                // '$' 'with'
     || lk == 134176                // '%' 'with'
     || lk == 134412                // '{' 'with'
     || lk == 136223                // '$' 'xquery'
     || lk == 136224                // '%' 'xquery'
     || lk == 136460                // '{' 'xquery'
     || lk == 137484)               // '{' '{'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(5, e0A, -1);
          lk = -14;
        }
        catch (ParseException p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(5, e0A, -2);
            lk = -14;
          }
          catch (ParseException p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(5, e0A, -3);
              lk = -14;
            }
            catch (ParseException p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(5, e0A, -12);
                lk = -14;
              }
              catch (ParseException p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(5, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
    case 139532:                    // '{' '}'
      try_BlockStatement();
      break;
    case 87635:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 87651:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 109697:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16006:                     // 'for' '$'
    case 16041:                     // 'let' '$'
    case 113321:                    // 'let' 'score'
    case 116358:                    // 'for' 'sliding'
    case 124550:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 17557:                     // 'if' '('
      try_IfStatement();
      break;
    case 17643:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 137458:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 17653:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16126:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case -14:
      break;
    default:
      try_ApplyStatement();
    }
  }

  private void parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    consume(52);                    // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  private void try_ApplyStatement()
  {
    try_ExprSimple();
    consumeT(52);                   // ';'
  }

  private void parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    consume(52);                    // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  private void try_AssignStatement()
  {
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
    consumeT(52);                   // ';'
  }

  private void parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    consume(268);                   // '{'
    lookahead1W(264);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
    whitespace();
    parse_Statements();
    consume(272);                   // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  private void try_BlockStatement()
  {
    consumeT(268);                  // '{'
    lookahead1W(264);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
    try_Statements();
    consumeT(272);                  // '}'
  }

  private void parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    consume(83);                    // 'break'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    consume(171);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(52);                    // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  private void try_BreakStatement()
  {
    consumeT(83);                   // 'break'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    consumeT(171);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(52);                   // ';'
  }

  private void parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    consume(99);                    // 'continue'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    consume(171);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(52);                    // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  private void try_ContinueStatement()
  {
    consumeT(99);                   // 'continue'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    consumeT(171);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(52);                   // ';'
  }

  private void parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    consume(129);                   // 'exit'
    lookahead1W(69);                // S^WS | '(:' | 'returning'
    consume(214);                   // 'returning'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_ExprSingle();
    consume(52);                    // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  private void try_ExitStatement()
  {
    consumeT(129);                  // 'exit'
    lookahead1W(69);                // S^WS | '(:' | 'returning'
    consumeT(214);                  // 'returning'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_ExprSingle();
    consumeT(52);                   // ';'
  }

  private void parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(169);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 213)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  private void try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(169);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 213)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  private void parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  private void try_ReturnStatement()
  {
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Statement();
  }

  private void parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    consume(149);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(75);                // S^WS | '(:' | 'then'
    consume(237);                   // 'then'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(119);                   // 'else'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  private void try_IfStatement()
  {
    consumeT(149);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(75);                // S^WS | '(:' | 'then'
    consumeT(237);                  // 'then'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(119);                  // 'else'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Statement();
  }

  private void parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    consume(235);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(110);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consume(106);                   // 'default'
    lookahead1W(68);                // S^WS | '(:' | 'return'
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  private void try_SwitchStatement()
  {
    consumeT(235);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(110);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consumeT(106);                  // 'default'
    lookahead1W(68);                // S^WS | '(:' | 'return'
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Statement();
  }

  private void parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      consume(85);                  // 'case'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  private void try_SwitchCaseStatement()
  {
    for (;;)
    {
      consumeT(85);                 // 'case'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_SwitchCaseOperand();
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Statement();
  }

  private void parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    consume(242);                   // 'try'
    lookahead1W(84);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consume(88);                  // 'catch'
      lookahead1W(247);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      switch (l1)
      {
      case 88:                      // 'catch'
        lookahead2W(267);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 37976               // 'catch' 'and'
       || lk == 44120               // 'catch' 'cast'
       || lk == 44632               // 'catch' 'castable'
       || lk == 58968               // 'catch' 'div'
       || lk == 64088               // 'catch' 'eq'
       || lk == 65624               // 'catch' 'except'
       || lk == 73304               // 'catch' 'ge'
       || lk == 75352               // 'catch' 'gt'
       || lk == 75864               // 'catch' 'idiv'
       || lk == 80472               // 'catch' 'instance'
       || lk == 81496               // 'catch' 'intersect'
       || lk == 82520               // 'catch' 'is'
       || lk == 85592               // 'catch' 'le'
       || lk == 88664               // 'catch' 'lt'
       || lk == 89688               // 'catch' 'mod'
       || lk == 92760               // 'catch' 'ne'
       || lk == 99416               // 'catch' 'or'
       || lk == 122968              // 'catch' 'to'
       || lk == 123480              // 'catch' 'treat'
       || lk == 126040)             // 'catch' 'union'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(88);           // 'catch'
            lookahead1W(247);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2648                // 'catch' Wildcard
       && lk != 3160                // 'catch' EQName^Token
       && lk != 35416               // 'catch' 'after'
       && lk != 36440               // 'catch' 'allowing'
       && lk != 36952               // 'catch' 'ancestor'
       && lk != 37464               // 'catch' 'ancestor-or-self'
       && lk != 39000               // 'catch' 'as'
       && lk != 39512               // 'catch' 'ascending'
       && lk != 40024               // 'catch' 'at'
       && lk != 40536               // 'catch' 'attribute'
       && lk != 41048               // 'catch' 'base-uri'
       && lk != 41560               // 'catch' 'before'
       && lk != 42072               // 'catch' 'boundary-space'
       && lk != 42584               // 'catch' 'break'
       && lk != 43608               // 'catch' 'case'
       && lk != 45144               // 'catch' 'catch'
       && lk != 46168               // 'catch' 'child'
       && lk != 46680               // 'catch' 'collation'
       && lk != 47704               // 'catch' 'comment'
       && lk != 48216               // 'catch' 'constraint'
       && lk != 48728               // 'catch' 'construction'
       && lk != 50264               // 'catch' 'context'
       && lk != 50776               // 'catch' 'continue'
       && lk != 51288               // 'catch' 'copy'
       && lk != 51800               // 'catch' 'copy-namespaces'
       && lk != 52312               // 'catch' 'count'
       && lk != 52824               // 'catch' 'decimal-format'
       && lk != 53848               // 'catch' 'declare'
       && lk != 54360               // 'catch' 'default'
       && lk != 54872               // 'catch' 'delete'
       && lk != 55384               // 'catch' 'descendant'
       && lk != 55896               // 'catch' 'descendant-or-self'
       && lk != 56408               // 'catch' 'descending'
       && lk != 59480               // 'catch' 'document'
       && lk != 59992               // 'catch' 'document-node'
       && lk != 60504               // 'catch' 'element'
       && lk != 61016               // 'catch' 'else'
       && lk != 61528               // 'catch' 'empty'
       && lk != 62040               // 'catch' 'empty-sequence'
       && lk != 62552               // 'catch' 'encoding'
       && lk != 63064               // 'catch' 'end'
       && lk != 64600               // 'catch' 'every'
       && lk != 66136               // 'catch' 'exit'
       && lk != 66648               // 'catch' 'external'
       && lk != 67160               // 'catch' 'first'
       && lk != 67672               // 'catch' 'following'
       && lk != 68184               // 'catch' 'following-sibling'
       && lk != 68696               // 'catch' 'for'
       && lk != 70744               // 'catch' 'ft-option'
       && lk != 72792               // 'catch' 'function'
       && lk != 74328               // 'catch' 'group'
       && lk != 76376               // 'catch' 'if'
       && lk != 76888               // 'catch' 'import'
       && lk != 77400               // 'catch' 'in'
       && lk != 77912               // 'catch' 'index'
       && lk != 79960               // 'catch' 'insert'
       && lk != 80984               // 'catch' 'integrity'
       && lk != 82008               // 'catch' 'into'
       && lk != 83032               // 'catch' 'item'
       && lk != 84568               // 'catch' 'last'
       && lk != 85080               // 'catch' 'lax'
       && lk != 86616               // 'catch' 'let'
       && lk != 87640               // 'catch' 'loop'
       && lk != 90200               // 'catch' 'modify'
       && lk != 90712               // 'catch' 'module'
       && lk != 91736               // 'catch' 'namespace'
       && lk != 92248               // 'catch' 'namespace-node'
       && lk != 95320               // 'catch' 'node'
       && lk != 95832               // 'catch' 'nodes'
       && lk != 98392               // 'catch' 'only'
       && lk != 98904               // 'catch' 'option'
       && lk != 99928               // 'catch' 'order'
       && lk != 100440              // 'catch' 'ordered'
       && lk != 100952              // 'catch' 'ordering'
       && lk != 102488              // 'catch' 'parent'
       && lk != 105048              // 'catch' 'preceding'
       && lk != 105560              // 'catch' 'preceding-sibling'
       && lk != 107096              // 'catch' 'processing-instruction'
       && lk != 108120              // 'catch' 'rename'
       && lk != 108632              // 'catch' 'replace'
       && lk != 109144              // 'catch' 'return'
       && lk != 109656              // 'catch' 'returning'
       && lk != 110168              // 'catch' 'revalidation'
       && lk != 111192              // 'catch' 'satisfies'
       && lk != 111704              // 'catch' 'schema'
       && lk != 112216              // 'catch' 'schema-attribute'
       && lk != 112728              // 'catch' 'schema-element'
       && lk != 113240              // 'catch' 'score'
       && lk != 113752              // 'catch' 'self'
       && lk != 116312              // 'catch' 'sliding'
       && lk != 116824              // 'catch' 'some'
       && lk != 117336              // 'catch' 'stable'
       && lk != 117848              // 'catch' 'start'
       && lk != 119384              // 'catch' 'strict'
       && lk != 120408              // 'catch' 'switch'
       && lk != 120920              // 'catch' 'text'
       && lk != 123992              // 'catch' 'try'
       && lk != 124504              // 'catch' 'tumbling'
       && lk != 125016              // 'catch' 'type'
       && lk != 125528              // 'catch' 'typeswitch'
       && lk != 127064              // 'catch' 'unordered'
       && lk != 127576              // 'catch' 'updating'
       && lk != 129112              // 'catch' 'validate'
       && lk != 129624              // 'catch' 'value'
       && lk != 130136              // 'catch' 'variable'
       && lk != 130648              // 'catch' 'version'
       && lk != 132184              // 'catch' 'where'
       && lk != 132696              // 'catch' 'while'
       && lk != 134232              // 'catch' 'with'
       && lk != 136280)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  private void try_TryCatchStatement()
  {
    consumeT(242);                  // 'try'
    lookahead1W(84);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(36);                // S^WS | '(:' | 'catch'
    consumeT(88);                   // 'catch'
    lookahead1W(247);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      switch (l1)
      {
      case 88:                      // 'catch'
        lookahead2W(267);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 37976               // 'catch' 'and'
       || lk == 44120               // 'catch' 'cast'
       || lk == 44632               // 'catch' 'castable'
       || lk == 58968               // 'catch' 'div'
       || lk == 64088               // 'catch' 'eq'
       || lk == 65624               // 'catch' 'except'
       || lk == 73304               // 'catch' 'ge'
       || lk == 75352               // 'catch' 'gt'
       || lk == 75864               // 'catch' 'idiv'
       || lk == 80472               // 'catch' 'instance'
       || lk == 81496               // 'catch' 'intersect'
       || lk == 82520               // 'catch' 'is'
       || lk == 85592               // 'catch' 'le'
       || lk == 88664               // 'catch' 'lt'
       || lk == 89688               // 'catch' 'mod'
       || lk == 92760               // 'catch' 'ne'
       || lk == 99416               // 'catch' 'or'
       || lk == 122968              // 'catch' 'to'
       || lk == 123480              // 'catch' 'treat'
       || lk == 126040)             // 'catch' 'union'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(88);           // 'catch'
            lookahead1W(247);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            memoize(6, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 2648                // 'catch' Wildcard
       && lk != 3160                // 'catch' EQName^Token
       && lk != 35416               // 'catch' 'after'
       && lk != 36440               // 'catch' 'allowing'
       && lk != 36952               // 'catch' 'ancestor'
       && lk != 37464               // 'catch' 'ancestor-or-self'
       && lk != 39000               // 'catch' 'as'
       && lk != 39512               // 'catch' 'ascending'
       && lk != 40024               // 'catch' 'at'
       && lk != 40536               // 'catch' 'attribute'
       && lk != 41048               // 'catch' 'base-uri'
       && lk != 41560               // 'catch' 'before'
       && lk != 42072               // 'catch' 'boundary-space'
       && lk != 42584               // 'catch' 'break'
       && lk != 43608               // 'catch' 'case'
       && lk != 45144               // 'catch' 'catch'
       && lk != 46168               // 'catch' 'child'
       && lk != 46680               // 'catch' 'collation'
       && lk != 47704               // 'catch' 'comment'
       && lk != 48216               // 'catch' 'constraint'
       && lk != 48728               // 'catch' 'construction'
       && lk != 50264               // 'catch' 'context'
       && lk != 50776               // 'catch' 'continue'
       && lk != 51288               // 'catch' 'copy'
       && lk != 51800               // 'catch' 'copy-namespaces'
       && lk != 52312               // 'catch' 'count'
       && lk != 52824               // 'catch' 'decimal-format'
       && lk != 53848               // 'catch' 'declare'
       && lk != 54360               // 'catch' 'default'
       && lk != 54872               // 'catch' 'delete'
       && lk != 55384               // 'catch' 'descendant'
       && lk != 55896               // 'catch' 'descendant-or-self'
       && lk != 56408               // 'catch' 'descending'
       && lk != 59480               // 'catch' 'document'
       && lk != 59992               // 'catch' 'document-node'
       && lk != 60504               // 'catch' 'element'
       && lk != 61016               // 'catch' 'else'
       && lk != 61528               // 'catch' 'empty'
       && lk != 62040               // 'catch' 'empty-sequence'
       && lk != 62552               // 'catch' 'encoding'
       && lk != 63064               // 'catch' 'end'
       && lk != 64600               // 'catch' 'every'
       && lk != 66136               // 'catch' 'exit'
       && lk != 66648               // 'catch' 'external'
       && lk != 67160               // 'catch' 'first'
       && lk != 67672               // 'catch' 'following'
       && lk != 68184               // 'catch' 'following-sibling'
       && lk != 68696               // 'catch' 'for'
       && lk != 70744               // 'catch' 'ft-option'
       && lk != 72792               // 'catch' 'function'
       && lk != 74328               // 'catch' 'group'
       && lk != 76376               // 'catch' 'if'
       && lk != 76888               // 'catch' 'import'
       && lk != 77400               // 'catch' 'in'
       && lk != 77912               // 'catch' 'index'
       && lk != 79960               // 'catch' 'insert'
       && lk != 80984               // 'catch' 'integrity'
       && lk != 82008               // 'catch' 'into'
       && lk != 83032               // 'catch' 'item'
       && lk != 84568               // 'catch' 'last'
       && lk != 85080               // 'catch' 'lax'
       && lk != 86616               // 'catch' 'let'
       && lk != 87640               // 'catch' 'loop'
       && lk != 90200               // 'catch' 'modify'
       && lk != 90712               // 'catch' 'module'
       && lk != 91736               // 'catch' 'namespace'
       && lk != 92248               // 'catch' 'namespace-node'
       && lk != 95320               // 'catch' 'node'
       && lk != 95832               // 'catch' 'nodes'
       && lk != 98392               // 'catch' 'only'
       && lk != 98904               // 'catch' 'option'
       && lk != 99928               // 'catch' 'order'
       && lk != 100440              // 'catch' 'ordered'
       && lk != 100952              // 'catch' 'ordering'
       && lk != 102488              // 'catch' 'parent'
       && lk != 105048              // 'catch' 'preceding'
       && lk != 105560              // 'catch' 'preceding-sibling'
       && lk != 107096              // 'catch' 'processing-instruction'
       && lk != 108120              // 'catch' 'rename'
       && lk != 108632              // 'catch' 'replace'
       && lk != 109144              // 'catch' 'return'
       && lk != 109656              // 'catch' 'returning'
       && lk != 110168              // 'catch' 'revalidation'
       && lk != 111192              // 'catch' 'satisfies'
       && lk != 111704              // 'catch' 'schema'
       && lk != 112216              // 'catch' 'schema-attribute'
       && lk != 112728              // 'catch' 'schema-element'
       && lk != 113240              // 'catch' 'score'
       && lk != 113752              // 'catch' 'self'
       && lk != 116312              // 'catch' 'sliding'
       && lk != 116824              // 'catch' 'some'
       && lk != 117336              // 'catch' 'stable'
       && lk != 117848              // 'catch' 'start'
       && lk != 119384              // 'catch' 'strict'
       && lk != 120408              // 'catch' 'switch'
       && lk != 120920              // 'catch' 'text'
       && lk != 123992              // 'catch' 'try'
       && lk != 124504              // 'catch' 'tumbling'
       && lk != 125016              // 'catch' 'type'
       && lk != 125528              // 'catch' 'typeswitch'
       && lk != 127064              // 'catch' 'unordered'
       && lk != 127576              // 'catch' 'updating'
       && lk != 129112              // 'catch' 'validate'
       && lk != 129624              // 'catch' 'value'
       && lk != 130136              // 'catch' 'variable'
       && lk != 130648              // 'catch' 'version'
       && lk != 132184              // 'catch' 'where'
       && lk != 132696              // 'catch' 'while'
       && lk != 134232              // 'catch' 'with'
       && lk != 136280)             // 'catch' 'xquery'
      {
        break;
      }
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consumeT(88);                 // 'catch'
      lookahead1W(247);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  private void parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    consume(245);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(110);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consume(106);                   // 'default'
    lookahead1W(92);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(68);                // S^WS | '(:' | 'return'
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  private void try_TypeswitchStatement()
  {
    consumeT(245);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(110);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 85)                 // 'case'
      {
        break;
      }
    }
    consumeT(106);                  // 'default'
    lookahead1W(92);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(68);                // S^WS | '(:' | 'return'
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Statement();
  }

  private void parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    consume(85);                    // 'case'
    lookahead1W(255);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(76);                  // 'as'
    }
    lookahead1W(251);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(68);                // S^WS | '(:' | 'return'
    consume(213);                   // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  private void try_CaseStatement()
  {
    consumeT(85);                   // 'case'
    lookahead1W(255);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(76);                 // 'as'
    }
    lookahead1W(251);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_SequenceType();
    lookahead1W(68);                // S^WS | '(:' | 'return'
    consumeT(213);                  // 'return'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Statement();
  }

  private void parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(95);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(254);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(153);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(142);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 51)                   // ':='
    {
      consume(51);                  // ':='
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(153);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 76)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(142);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(260);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(52);                    // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  private void try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(95);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(254);                  // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(153);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(142);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 51)                   // ':='
    {
      consumeT(51);                 // ':='
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(245);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(153);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 76)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(142);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consumeT(51);               // ':='
        lookahead1W(260);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        try_ExprSingle();
      }
    }
    consumeT(52);                   // ';'
  }

  private void parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    consume(259);                   // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  private void try_WhileStatement()
  {
    consumeT(259);                  // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_Statement();
  }

  private void parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 134:                       // 'for'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'sliding' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}'
      break;
    case 169:                       // 'let'
      lookahead2W(228);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'score' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '}'
      break;
    case 242:                       // 'try'
      lookahead2W(227);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}'
      break;
    case 149:                       // 'if'
    case 235:                       // 'switch'
    case 245:                       // 'typeswitch'
      lookahead2W(224);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16006:                     // 'for' '$'
    case 16041:                     // 'let' '$'
    case 113321:                    // 'let' 'score'
    case 116358:                    // 'for' 'sliding'
    case 124550:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 17557:                     // 'if' '('
      parse_IfExpr();
      break;
    case 17643:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 137458:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 17653:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  private void try_ExprSingle()
  {
    switch (l1)
    {
    case 134:                       // 'for'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'sliding' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}'
      break;
    case 169:                       // 'let'
      lookahead2W(228);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'score' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '}'
      break;
    case 242:                       // 'try'
      lookahead2W(227);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}'
      break;
    case 149:                       // 'if'
    case 235:                       // 'switch'
    case 245:                       // 'typeswitch'
      lookahead2W(224);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16006:                     // 'for' '$'
    case 16041:                     // 'let' '$'
    case 113321:                    // 'let' 'score'
    case 116358:                    // 'for' 'sliding'
    case 124550:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 17557:                     // 'if' '('
      try_IfExpr();
      break;
    case 17643:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 137458:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 17653:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  private void parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 211:                       // 'rename'
      lookahead2W(226);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '}'
      break;
    case 212:                       // 'replace'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' | 'with' |
                                    // '|' | '||' | '}'
      break;
    case 107:                       // 'delete'
    case 156:                       // 'insert'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}'
      break;
    case 100:                       // 'copy'
    case 126:                       // 'every'
    case 228:                       // 'some'
      lookahead2W(225);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 15998:                     // 'every' '$'
    case 16100:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 95388:                     // 'insert' 'node'
    case 95900:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 95339:                     // 'delete' 'node'
    case 95851:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 95443:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 95444:                     // 'replace' 'node'
    case 129748:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 15972:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  private void try_ExprSimple()
  {
    switch (l1)
    {
    case 211:                       // 'rename'
      lookahead2W(226);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '}'
      break;
    case 212:                       // 'replace'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' | 'with' |
                                    // '|' | '||' | '}'
      break;
    case 107:                       // 'delete'
    case 156:                       // 'insert'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}'
      break;
    case 100:                       // 'copy'
    case 126:                       // 'every'
    case 228:                       // 'some'
      lookahead2W(225);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 15998:                     // 'every' '$'
    case 16100:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 95388:                     // 'insert' 'node'
    case 95900:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 95339:                     // 'delete' 'node'
    case 95851:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 95443:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 95444:                     // 'replace' 'node'
    case 129748:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 15972:                     // 'copy' '$'
      try_TransformExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  private void parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consume(12);                  // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      consume(23);                  // CharRef
      break;
    case 269:                       // '{{'
      consume(269);                 // '{{'
      break;
    case 273:                       // '}}'
      consume(273);                 // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  private void try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consumeT(12);                 // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      consumeT(23);                 // CharRef
      break;
    case 269:                       // '{{'
      consumeT(269);                // '{{'
      break;
    case 273:                       // '}}'
      consumeT(273);                // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  private void parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  private void try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  private void parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(116);                   // 'document'
    lookahead1W(84);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  private void try_CompDocConstructor()
  {
    consumeT(116);                  // 'document'
    lookahead1W(84);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  private void parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(79);                    // 'attribute'
    lookahead1W(248);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      consume(268);                 // '{'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_Expr();
      consume(272);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      lookahead2W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 139532:                    // '{' '}'
      consume(268);                 // '{'
      lookahead1W(85);              // S^WS | '(:' | '}'
      consume(272);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  private void try_CompAttrConstructor()
  {
    consumeT(79);                   // 'attribute'
    lookahead1W(248);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      consumeT(268);                // '{'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_Expr();
      consumeT(272);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      lookahead2W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 139532:                    // '{' '}'
      consumeT(268);                // '{'
      lookahead1W(85);              // S^WS | '(:' | '}'
      consumeT(272);                // '}'
      break;
    default:
      try_BlockExpr();
    }
  }

  private void parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(209);                   // 'processing-instruction'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      consume(268);                 // '{'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      whitespace();
      parse_Expr();
      consume(272);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      lookahead2W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 139532:                    // '{' '}'
      consume(268);                 // '{'
      lookahead1W(85);              // S^WS | '(:' | '}'
      consume(272);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  private void try_CompPIConstructor()
  {
    consumeT(209);                  // 'processing-instruction'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      consumeT(268);                // '{'
      lookahead1W(260);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      try_Expr();
      consumeT(272);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(84);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      lookahead2W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 139532:                    // '{' '}'
      consumeT(268);                // '{'
      lookahead1W(85);              // S^WS | '(:' | '}'
      consumeT(272);                // '}'
      break;
    default:
      try_BlockExpr();
    }
  }

  private void parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(93);                    // 'comment'
    lookahead1W(84);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  private void try_CompCommentConstructor()
  {
    consumeT(93);                   // 'comment'
    lookahead1W(84);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  private void parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(236);                   // 'text'
    lookahead1W(84);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  private void try_CompTextConstructor()
  {
    consumeT(236);                  // 'text'
    lookahead1W(84);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  private void parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 179:                       // 'namespace'
      lookahead2W(257);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 209:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 79:                        // 'attribute'
    case 118:                       // 'element'
      lookahead2W(250);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 93:                        // 'comment'
    case 236:                       // 'text'
      lookahead2W(90);              // S^WS | '#' | '(:' | '{'
      break;
    case 116:                       // 'document'
    case 196:                       // 'ordered'
    case 248:                       // 'unordered'
      lookahead2W(136);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 69:                        // 'after'
    case 71:                        // 'allowing'
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 74:                        // 'and'
    case 76:                        // 'as'
    case 77:                        // 'ascending'
    case 78:                        // 'at'
    case 80:                        // 'base-uri'
    case 81:                        // 'before'
    case 82:                        // 'boundary-space'
    case 83:                        // 'break'
    case 85:                        // 'case'
    case 86:                        // 'cast'
    case 87:                        // 'castable'
    case 88:                        // 'catch'
    case 90:                        // 'child'
    case 91:                        // 'collation'
    case 94:                        // 'constraint'
    case 95:                        // 'construction'
    case 98:                        // 'context'
    case 99:                        // 'continue'
    case 100:                       // 'copy'
    case 101:                       // 'copy-namespaces'
    case 102:                       // 'count'
    case 103:                       // 'decimal-format'
    case 105:                       // 'declare'
    case 106:                       // 'default'
    case 107:                       // 'delete'
    case 108:                       // 'descendant'
    case 109:                       // 'descendant-or-self'
    case 110:                       // 'descending'
    case 115:                       // 'div'
    case 119:                       // 'else'
    case 120:                       // 'empty'
    case 122:                       // 'encoding'
    case 123:                       // 'end'
    case 125:                       // 'eq'
    case 126:                       // 'every'
    case 128:                       // 'except'
    case 129:                       // 'exit'
    case 130:                       // 'external'
    case 131:                       // 'first'
    case 132:                       // 'following'
    case 133:                       // 'following-sibling'
    case 134:                       // 'for'
    case 138:                       // 'ft-option'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 151:                       // 'in'
    case 152:                       // 'index'
    case 156:                       // 'insert'
    case 157:                       // 'instance'
    case 158:                       // 'integrity'
    case 159:                       // 'intersect'
    case 160:                       // 'into'
    case 161:                       // 'is'
    case 165:                       // 'last'
    case 166:                       // 'lax'
    case 167:                       // 'le'
    case 169:                       // 'let'
    case 171:                       // 'loop'
    case 173:                       // 'lt'
    case 175:                       // 'mod'
    case 176:                       // 'modify'
    case 177:                       // 'module'
    case 181:                       // 'ne'
    case 187:                       // 'nodes'
    case 192:                       // 'only'
    case 193:                       // 'option'
    case 194:                       // 'or'
    case 195:                       // 'order'
    case 197:                       // 'ordering'
    case 200:                       // 'parent'
    case 205:                       // 'preceding'
    case 206:                       // 'preceding-sibling'
    case 211:                       // 'rename'
    case 212:                       // 'replace'
    case 213:                       // 'return'
    case 214:                       // 'returning'
    case 215:                       // 'revalidation'
    case 217:                       // 'satisfies'
    case 218:                       // 'schema'
    case 221:                       // 'score'
    case 222:                       // 'self'
    case 227:                       // 'sliding'
    case 228:                       // 'some'
    case 229:                       // 'stable'
    case 230:                       // 'start'
    case 233:                       // 'strict'
    case 240:                       // 'to'
    case 241:                       // 'treat'
    case 242:                       // 'try'
    case 243:                       // 'tumbling'
    case 244:                       // 'type'
    case 246:                       // 'union'
    case 249:                       // 'updating'
    case 252:                       // 'validate'
    case 253:                       // 'value'
    case 254:                       // 'variable'
    case 255:                       // 'version'
    case 258:                       // 'where'
    case 259:                       // 'while'
    case 262:                       // 'with'
    case 266:                       // 'xquery'
      lookahead2W(89);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17477:                     // 'after' '('
    case 17479:                     // 'allowing' '('
    case 17480:                     // 'ancestor' '('
    case 17481:                     // 'ancestor-or-self' '('
    case 17482:                     // 'and' '('
    case 17484:                     // 'as' '('
    case 17485:                     // 'ascending' '('
    case 17486:                     // 'at' '('
    case 17488:                     // 'base-uri' '('
    case 17489:                     // 'before' '('
    case 17490:                     // 'boundary-space' '('
    case 17491:                     // 'break' '('
    case 17493:                     // 'case' '('
    case 17494:                     // 'cast' '('
    case 17495:                     // 'castable' '('
    case 17496:                     // 'catch' '('
    case 17498:                     // 'child' '('
    case 17499:                     // 'collation' '('
    case 17502:                     // 'constraint' '('
    case 17503:                     // 'construction' '('
    case 17506:                     // 'context' '('
    case 17507:                     // 'continue' '('
    case 17508:                     // 'copy' '('
    case 17509:                     // 'copy-namespaces' '('
    case 17510:                     // 'count' '('
    case 17511:                     // 'decimal-format' '('
    case 17513:                     // 'declare' '('
    case 17514:                     // 'default' '('
    case 17515:                     // 'delete' '('
    case 17516:                     // 'descendant' '('
    case 17517:                     // 'descendant-or-self' '('
    case 17518:                     // 'descending' '('
    case 17523:                     // 'div' '('
    case 17524:                     // 'document' '('
    case 17527:                     // 'else' '('
    case 17528:                     // 'empty' '('
    case 17530:                     // 'encoding' '('
    case 17531:                     // 'end' '('
    case 17533:                     // 'eq' '('
    case 17534:                     // 'every' '('
    case 17536:                     // 'except' '('
    case 17537:                     // 'exit' '('
    case 17538:                     // 'external' '('
    case 17539:                     // 'first' '('
    case 17540:                     // 'following' '('
    case 17541:                     // 'following-sibling' '('
    case 17542:                     // 'for' '('
    case 17546:                     // 'ft-option' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17559:                     // 'in' '('
    case 17560:                     // 'index' '('
    case 17564:                     // 'insert' '('
    case 17565:                     // 'instance' '('
    case 17566:                     // 'integrity' '('
    case 17567:                     // 'intersect' '('
    case 17568:                     // 'into' '('
    case 17569:                     // 'is' '('
    case 17573:                     // 'last' '('
    case 17574:                     // 'lax' '('
    case 17575:                     // 'le' '('
    case 17577:                     // 'let' '('
    case 17579:                     // 'loop' '('
    case 17581:                     // 'lt' '('
    case 17583:                     // 'mod' '('
    case 17584:                     // 'modify' '('
    case 17585:                     // 'module' '('
    case 17587:                     // 'namespace' '('
    case 17589:                     // 'ne' '('
    case 17595:                     // 'nodes' '('
    case 17600:                     // 'only' '('
    case 17601:                     // 'option' '('
    case 17602:                     // 'or' '('
    case 17603:                     // 'order' '('
    case 17604:                     // 'ordered' '('
    case 17605:                     // 'ordering' '('
    case 17608:                     // 'parent' '('
    case 17613:                     // 'preceding' '('
    case 17614:                     // 'preceding-sibling' '('
    case 17619:                     // 'rename' '('
    case 17620:                     // 'replace' '('
    case 17621:                     // 'return' '('
    case 17622:                     // 'returning' '('
    case 17623:                     // 'revalidation' '('
    case 17625:                     // 'satisfies' '('
    case 17626:                     // 'schema' '('
    case 17629:                     // 'score' '('
    case 17630:                     // 'self' '('
    case 17635:                     // 'sliding' '('
    case 17636:                     // 'some' '('
    case 17637:                     // 'stable' '('
    case 17638:                     // 'start' '('
    case 17641:                     // 'strict' '('
    case 17648:                     // 'to' '('
    case 17649:                     // 'treat' '('
    case 17650:                     // 'try' '('
    case 17651:                     // 'tumbling' '('
    case 17652:                     // 'type' '('
    case 17654:                     // 'union' '('
    case 17656:                     // 'unordered' '('
    case 17657:                     // 'updating' '('
    case 17660:                     // 'validate' '('
    case 17661:                     // 'value' '('
    case 17662:                     // 'variable' '('
    case 17663:                     // 'version' '('
    case 17666:                     // 'where' '('
    case 17667:                     // 'while' '('
    case 17670:                     // 'with' '('
    case 17674:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 137412:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 137464:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 117:                       // 'document-node'
    case 121:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 162:                       // 'item'
    case 180:                       // 'namespace-node'
    case 186:                       // 'node'
    case 219:                       // 'schema-attribute'
    case 220:                       // 'schema-element'
    case 235:                       // 'switch'
    case 245:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14917:                     // 'after' '#'
    case 14919:                     // 'allowing' '#'
    case 14920:                     // 'ancestor' '#'
    case 14921:                     // 'ancestor-or-self' '#'
    case 14922:                     // 'and' '#'
    case 14924:                     // 'as' '#'
    case 14925:                     // 'ascending' '#'
    case 14926:                     // 'at' '#'
    case 14927:                     // 'attribute' '#'
    case 14928:                     // 'base-uri' '#'
    case 14929:                     // 'before' '#'
    case 14930:                     // 'boundary-space' '#'
    case 14931:                     // 'break' '#'
    case 14933:                     // 'case' '#'
    case 14934:                     // 'cast' '#'
    case 14935:                     // 'castable' '#'
    case 14936:                     // 'catch' '#'
    case 14938:                     // 'child' '#'
    case 14939:                     // 'collation' '#'
    case 14941:                     // 'comment' '#'
    case 14942:                     // 'constraint' '#'
    case 14943:                     // 'construction' '#'
    case 14946:                     // 'context' '#'
    case 14947:                     // 'continue' '#'
    case 14948:                     // 'copy' '#'
    case 14949:                     // 'copy-namespaces' '#'
    case 14950:                     // 'count' '#'
    case 14951:                     // 'decimal-format' '#'
    case 14953:                     // 'declare' '#'
    case 14954:                     // 'default' '#'
    case 14955:                     // 'delete' '#'
    case 14956:                     // 'descendant' '#'
    case 14957:                     // 'descendant-or-self' '#'
    case 14958:                     // 'descending' '#'
    case 14963:                     // 'div' '#'
    case 14964:                     // 'document' '#'
    case 14966:                     // 'element' '#'
    case 14967:                     // 'else' '#'
    case 14968:                     // 'empty' '#'
    case 14970:                     // 'encoding' '#'
    case 14971:                     // 'end' '#'
    case 14973:                     // 'eq' '#'
    case 14974:                     // 'every' '#'
    case 14976:                     // 'except' '#'
    case 14977:                     // 'exit' '#'
    case 14978:                     // 'external' '#'
    case 14979:                     // 'first' '#'
    case 14980:                     // 'following' '#'
    case 14981:                     // 'following-sibling' '#'
    case 14982:                     // 'for' '#'
    case 14986:                     // 'ft-option' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 14999:                     // 'in' '#'
    case 15000:                     // 'index' '#'
    case 15004:                     // 'insert' '#'
    case 15005:                     // 'instance' '#'
    case 15006:                     // 'integrity' '#'
    case 15007:                     // 'intersect' '#'
    case 15008:                     // 'into' '#'
    case 15009:                     // 'is' '#'
    case 15013:                     // 'last' '#'
    case 15014:                     // 'lax' '#'
    case 15015:                     // 'le' '#'
    case 15017:                     // 'let' '#'
    case 15019:                     // 'loop' '#'
    case 15021:                     // 'lt' '#'
    case 15023:                     // 'mod' '#'
    case 15024:                     // 'modify' '#'
    case 15025:                     // 'module' '#'
    case 15027:                     // 'namespace' '#'
    case 15029:                     // 'ne' '#'
    case 15035:                     // 'nodes' '#'
    case 15040:                     // 'only' '#'
    case 15041:                     // 'option' '#'
    case 15042:                     // 'or' '#'
    case 15043:                     // 'order' '#'
    case 15044:                     // 'ordered' '#'
    case 15045:                     // 'ordering' '#'
    case 15048:                     // 'parent' '#'
    case 15053:                     // 'preceding' '#'
    case 15054:                     // 'preceding-sibling' '#'
    case 15057:                     // 'processing-instruction' '#'
    case 15059:                     // 'rename' '#'
    case 15060:                     // 'replace' '#'
    case 15061:                     // 'return' '#'
    case 15062:                     // 'returning' '#'
    case 15063:                     // 'revalidation' '#'
    case 15065:                     // 'satisfies' '#'
    case 15066:                     // 'schema' '#'
    case 15069:                     // 'score' '#'
    case 15070:                     // 'self' '#'
    case 15075:                     // 'sliding' '#'
    case 15076:                     // 'some' '#'
    case 15077:                     // 'stable' '#'
    case 15078:                     // 'start' '#'
    case 15081:                     // 'strict' '#'
    case 15084:                     // 'text' '#'
    case 15088:                     // 'to' '#'
    case 15089:                     // 'treat' '#'
    case 15090:                     // 'try' '#'
    case 15091:                     // 'tumbling' '#'
    case 15092:                     // 'type' '#'
    case 15094:                     // 'union' '#'
    case 15096:                     // 'unordered' '#'
    case 15097:                     // 'updating' '#'
    case 15100:                     // 'validate' '#'
    case 15101:                     // 'value' '#'
    case 15102:                     // 'variable' '#'
    case 15103:                     // 'version' '#'
    case 15106:                     // 'where' '#'
    case 15107:                     // 'while' '#'
    case 15110:                     // 'with' '#'
    case 15114:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 268:                       // '{'
      parse_BlockExpr();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  private void try_PrimaryExpr()
  {
    switch (l1)
    {
    case 179:                       // 'namespace'
      lookahead2W(257);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 209:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 79:                        // 'attribute'
    case 118:                       // 'element'
      lookahead2W(250);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 93:                        // 'comment'
    case 236:                       // 'text'
      lookahead2W(90);              // S^WS | '#' | '(:' | '{'
      break;
    case 116:                       // 'document'
    case 196:                       // 'ordered'
    case 248:                       // 'unordered'
      lookahead2W(136);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 69:                        // 'after'
    case 71:                        // 'allowing'
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 74:                        // 'and'
    case 76:                        // 'as'
    case 77:                        // 'ascending'
    case 78:                        // 'at'
    case 80:                        // 'base-uri'
    case 81:                        // 'before'
    case 82:                        // 'boundary-space'
    case 83:                        // 'break'
    case 85:                        // 'case'
    case 86:                        // 'cast'
    case 87:                        // 'castable'
    case 88:                        // 'catch'
    case 90:                        // 'child'
    case 91:                        // 'collation'
    case 94:                        // 'constraint'
    case 95:                        // 'construction'
    case 98:                        // 'context'
    case 99:                        // 'continue'
    case 100:                       // 'copy'
    case 101:                       // 'copy-namespaces'
    case 102:                       // 'count'
    case 103:                       // 'decimal-format'
    case 105:                       // 'declare'
    case 106:                       // 'default'
    case 107:                       // 'delete'
    case 108:                       // 'descendant'
    case 109:                       // 'descendant-or-self'
    case 110:                       // 'descending'
    case 115:                       // 'div'
    case 119:                       // 'else'
    case 120:                       // 'empty'
    case 122:                       // 'encoding'
    case 123:                       // 'end'
    case 125:                       // 'eq'
    case 126:                       // 'every'
    case 128:                       // 'except'
    case 129:                       // 'exit'
    case 130:                       // 'external'
    case 131:                       // 'first'
    case 132:                       // 'following'
    case 133:                       // 'following-sibling'
    case 134:                       // 'for'
    case 138:                       // 'ft-option'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 151:                       // 'in'
    case 152:                       // 'index'
    case 156:                       // 'insert'
    case 157:                       // 'instance'
    case 158:                       // 'integrity'
    case 159:                       // 'intersect'
    case 160:                       // 'into'
    case 161:                       // 'is'
    case 165:                       // 'last'
    case 166:                       // 'lax'
    case 167:                       // 'le'
    case 169:                       // 'let'
    case 171:                       // 'loop'
    case 173:                       // 'lt'
    case 175:                       // 'mod'
    case 176:                       // 'modify'
    case 177:                       // 'module'
    case 181:                       // 'ne'
    case 187:                       // 'nodes'
    case 192:                       // 'only'
    case 193:                       // 'option'
    case 194:                       // 'or'
    case 195:                       // 'order'
    case 197:                       // 'ordering'
    case 200:                       // 'parent'
    case 205:                       // 'preceding'
    case 206:                       // 'preceding-sibling'
    case 211:                       // 'rename'
    case 212:                       // 'replace'
    case 213:                       // 'return'
    case 214:                       // 'returning'
    case 215:                       // 'revalidation'
    case 217:                       // 'satisfies'
    case 218:                       // 'schema'
    case 221:                       // 'score'
    case 222:                       // 'self'
    case 227:                       // 'sliding'
    case 228:                       // 'some'
    case 229:                       // 'stable'
    case 230:                       // 'start'
    case 233:                       // 'strict'
    case 240:                       // 'to'
    case 241:                       // 'treat'
    case 242:                       // 'try'
    case 243:                       // 'tumbling'
    case 244:                       // 'type'
    case 246:                       // 'union'
    case 249:                       // 'updating'
    case 252:                       // 'validate'
    case 253:                       // 'value'
    case 254:                       // 'variable'
    case 255:                       // 'version'
    case 258:                       // 'where'
    case 259:                       // 'while'
    case 262:                       // 'with'
    case 266:                       // 'xquery'
      lookahead2W(89);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      try_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17477:                     // 'after' '('
    case 17479:                     // 'allowing' '('
    case 17480:                     // 'ancestor' '('
    case 17481:                     // 'ancestor-or-self' '('
    case 17482:                     // 'and' '('
    case 17484:                     // 'as' '('
    case 17485:                     // 'ascending' '('
    case 17486:                     // 'at' '('
    case 17488:                     // 'base-uri' '('
    case 17489:                     // 'before' '('
    case 17490:                     // 'boundary-space' '('
    case 17491:                     // 'break' '('
    case 17493:                     // 'case' '('
    case 17494:                     // 'cast' '('
    case 17495:                     // 'castable' '('
    case 17496:                     // 'catch' '('
    case 17498:                     // 'child' '('
    case 17499:                     // 'collation' '('
    case 17502:                     // 'constraint' '('
    case 17503:                     // 'construction' '('
    case 17506:                     // 'context' '('
    case 17507:                     // 'continue' '('
    case 17508:                     // 'copy' '('
    case 17509:                     // 'copy-namespaces' '('
    case 17510:                     // 'count' '('
    case 17511:                     // 'decimal-format' '('
    case 17513:                     // 'declare' '('
    case 17514:                     // 'default' '('
    case 17515:                     // 'delete' '('
    case 17516:                     // 'descendant' '('
    case 17517:                     // 'descendant-or-self' '('
    case 17518:                     // 'descending' '('
    case 17523:                     // 'div' '('
    case 17524:                     // 'document' '('
    case 17527:                     // 'else' '('
    case 17528:                     // 'empty' '('
    case 17530:                     // 'encoding' '('
    case 17531:                     // 'end' '('
    case 17533:                     // 'eq' '('
    case 17534:                     // 'every' '('
    case 17536:                     // 'except' '('
    case 17537:                     // 'exit' '('
    case 17538:                     // 'external' '('
    case 17539:                     // 'first' '('
    case 17540:                     // 'following' '('
    case 17541:                     // 'following-sibling' '('
    case 17542:                     // 'for' '('
    case 17546:                     // 'ft-option' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17559:                     // 'in' '('
    case 17560:                     // 'index' '('
    case 17564:                     // 'insert' '('
    case 17565:                     // 'instance' '('
    case 17566:                     // 'integrity' '('
    case 17567:                     // 'intersect' '('
    case 17568:                     // 'into' '('
    case 17569:                     // 'is' '('
    case 17573:                     // 'last' '('
    case 17574:                     // 'lax' '('
    case 17575:                     // 'le' '('
    case 17577:                     // 'let' '('
    case 17579:                     // 'loop' '('
    case 17581:                     // 'lt' '('
    case 17583:                     // 'mod' '('
    case 17584:                     // 'modify' '('
    case 17585:                     // 'module' '('
    case 17587:                     // 'namespace' '('
    case 17589:                     // 'ne' '('
    case 17595:                     // 'nodes' '('
    case 17600:                     // 'only' '('
    case 17601:                     // 'option' '('
    case 17602:                     // 'or' '('
    case 17603:                     // 'order' '('
    case 17604:                     // 'ordered' '('
    case 17605:                     // 'ordering' '('
    case 17608:                     // 'parent' '('
    case 17613:                     // 'preceding' '('
    case 17614:                     // 'preceding-sibling' '('
    case 17619:                     // 'rename' '('
    case 17620:                     // 'replace' '('
    case 17621:                     // 'return' '('
    case 17622:                     // 'returning' '('
    case 17623:                     // 'revalidation' '('
    case 17625:                     // 'satisfies' '('
    case 17626:                     // 'schema' '('
    case 17629:                     // 'score' '('
    case 17630:                     // 'self' '('
    case 17635:                     // 'sliding' '('
    case 17636:                     // 'some' '('
    case 17637:                     // 'stable' '('
    case 17638:                     // 'start' '('
    case 17641:                     // 'strict' '('
    case 17648:                     // 'to' '('
    case 17649:                     // 'treat' '('
    case 17650:                     // 'try' '('
    case 17651:                     // 'tumbling' '('
    case 17652:                     // 'type' '('
    case 17654:                     // 'union' '('
    case 17656:                     // 'unordered' '('
    case 17657:                     // 'updating' '('
    case 17660:                     // 'validate' '('
    case 17661:                     // 'value' '('
    case 17662:                     // 'variable' '('
    case 17663:                     // 'version' '('
    case 17666:                     // 'where' '('
    case 17667:                     // 'while' '('
    case 17670:                     // 'with' '('
    case 17674:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 137412:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 137464:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 117:                       // 'document-node'
    case 121:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 162:                       // 'item'
    case 180:                       // 'namespace-node'
    case 186:                       // 'node'
    case 219:                       // 'schema-attribute'
    case 220:                       // 'schema-element'
    case 235:                       // 'switch'
    case 245:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14917:                     // 'after' '#'
    case 14919:                     // 'allowing' '#'
    case 14920:                     // 'ancestor' '#'
    case 14921:                     // 'ancestor-or-self' '#'
    case 14922:                     // 'and' '#'
    case 14924:                     // 'as' '#'
    case 14925:                     // 'ascending' '#'
    case 14926:                     // 'at' '#'
    case 14927:                     // 'attribute' '#'
    case 14928:                     // 'base-uri' '#'
    case 14929:                     // 'before' '#'
    case 14930:                     // 'boundary-space' '#'
    case 14931:                     // 'break' '#'
    case 14933:                     // 'case' '#'
    case 14934:                     // 'cast' '#'
    case 14935:                     // 'castable' '#'
    case 14936:                     // 'catch' '#'
    case 14938:                     // 'child' '#'
    case 14939:                     // 'collation' '#'
    case 14941:                     // 'comment' '#'
    case 14942:                     // 'constraint' '#'
    case 14943:                     // 'construction' '#'
    case 14946:                     // 'context' '#'
    case 14947:                     // 'continue' '#'
    case 14948:                     // 'copy' '#'
    case 14949:                     // 'copy-namespaces' '#'
    case 14950:                     // 'count' '#'
    case 14951:                     // 'decimal-format' '#'
    case 14953:                     // 'declare' '#'
    case 14954:                     // 'default' '#'
    case 14955:                     // 'delete' '#'
    case 14956:                     // 'descendant' '#'
    case 14957:                     // 'descendant-or-self' '#'
    case 14958:                     // 'descending' '#'
    case 14963:                     // 'div' '#'
    case 14964:                     // 'document' '#'
    case 14966:                     // 'element' '#'
    case 14967:                     // 'else' '#'
    case 14968:                     // 'empty' '#'
    case 14970:                     // 'encoding' '#'
    case 14971:                     // 'end' '#'
    case 14973:                     // 'eq' '#'
    case 14974:                     // 'every' '#'
    case 14976:                     // 'except' '#'
    case 14977:                     // 'exit' '#'
    case 14978:                     // 'external' '#'
    case 14979:                     // 'first' '#'
    case 14980:                     // 'following' '#'
    case 14981:                     // 'following-sibling' '#'
    case 14982:                     // 'for' '#'
    case 14986:                     // 'ft-option' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 14999:                     // 'in' '#'
    case 15000:                     // 'index' '#'
    case 15004:                     // 'insert' '#'
    case 15005:                     // 'instance' '#'
    case 15006:                     // 'integrity' '#'
    case 15007:                     // 'intersect' '#'
    case 15008:                     // 'into' '#'
    case 15009:                     // 'is' '#'
    case 15013:                     // 'last' '#'
    case 15014:                     // 'lax' '#'
    case 15015:                     // 'le' '#'
    case 15017:                     // 'let' '#'
    case 15019:                     // 'loop' '#'
    case 15021:                     // 'lt' '#'
    case 15023:                     // 'mod' '#'
    case 15024:                     // 'modify' '#'
    case 15025:                     // 'module' '#'
    case 15027:                     // 'namespace' '#'
    case 15029:                     // 'ne' '#'
    case 15035:                     // 'nodes' '#'
    case 15040:                     // 'only' '#'
    case 15041:                     // 'option' '#'
    case 15042:                     // 'or' '#'
    case 15043:                     // 'order' '#'
    case 15044:                     // 'ordered' '#'
    case 15045:                     // 'ordering' '#'
    case 15048:                     // 'parent' '#'
    case 15053:                     // 'preceding' '#'
    case 15054:                     // 'preceding-sibling' '#'
    case 15057:                     // 'processing-instruction' '#'
    case 15059:                     // 'rename' '#'
    case 15060:                     // 'replace' '#'
    case 15061:                     // 'return' '#'
    case 15062:                     // 'returning' '#'
    case 15063:                     // 'revalidation' '#'
    case 15065:                     // 'satisfies' '#'
    case 15066:                     // 'schema' '#'
    case 15069:                     // 'score' '#'
    case 15070:                     // 'self' '#'
    case 15075:                     // 'sliding' '#'
    case 15076:                     // 'some' '#'
    case 15077:                     // 'stable' '#'
    case 15078:                     // 'start' '#'
    case 15081:                     // 'strict' '#'
    case 15084:                     // 'text' '#'
    case 15088:                     // 'to' '#'
    case 15089:                     // 'treat' '#'
    case 15090:                     // 'try' '#'
    case 15091:                     // 'tumbling' '#'
    case 15092:                     // 'type' '#'
    case 15094:                     // 'union' '#'
    case 15096:                     // 'unordered' '#'
    case 15097:                     // 'updating' '#'
    case 15100:                     // 'validate' '#'
    case 15101:                     // 'value' '#'
    case 15102:                     // 'variable' '#'
    case 15103:                     // 'version' '#'
    case 15106:                     // 'where' '#'
    case 15107:                     // 'while' '#'
    case 15110:                     // 'with' '#'
    case 15114:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 268:                       // '{'
      try_BlockExpr();
      break;
    default:
      try_Constructor();
    }
  }

  private void parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    consume(268);                   // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    whitespace();
    parse_StatementsAndExpr();
    consume(272);                   // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  private void try_BlockExpr()
  {
    consumeT(268);                  // '{'
    lookahead1W(260);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    try_StatementsAndExpr();
    consumeT(272);                  // '}'
  }

  private void parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(142);                   // 'function'
    lookahead1W(245);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(91);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(145);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 76)                   // 'as'
    {
      consume(76);                  // 'as'
      lookahead1W(251);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(115);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 268:                       // '{'
      consume(268);                 // '{'
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      consume(272);                 // '}'
      break;
    default:
      consume(130);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  private void consume(int t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private void consumeT(int t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private void skip(int code)
  {
    int b0W = b0; int e0W = e0; int l1W = l1;
    int b1W = b1; int e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  private void whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  private int matchW(int tokenSetId)
  {
    int code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 22)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  private void lookahead1W(int tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  private void lookahead2W(int tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  private void lookahead1(int tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  private void lookahead2(int tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = match(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  private int error(int b, int e, int s, int l, int t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new ParseException(bx, ex, sx, lx, tx);
  }

  private void memoize(int i, int e, int v)
  {
    memo.put((e << 3) + i, v);
  }

  private int memoized(int i, int e)
  {
    Integer v = memo.get((e << 3) + i);
    return v == null ? 0 : v;
  }

  private int lk, b0, e0;
  private int l1, b1, e1;
  private int l2, b2, e2;
  private int bx, ex, sx, lx, tx;
  private EventHandler eventHandler = null;
  private java.util.Map<Integer, Integer> memo = new java.util.HashMap<Integer, Integer>();
  private CharSequence input = null;
  private int size = 0;
  private int begin = 0;
  private int end = 0;

  private int match(int tokenSetId)
  {
    boolean nonbmp = false;
    begin = end;
    int current = end;
    int result = INITIAL[tokenSetId];
    int state = 0;

    for (int code = result & 4095; code != 0; )
    {
      int charclass;
      int c0 = current < size ? input.charAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        int c1 = c0 >> 4;
        charclass = MAP1[(c0 & 15) + MAP1[(c1 & 31) + MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          int c1 = current < size ? input.charAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            nonbmp = true;
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
          }
        }

        int lo = 0, hi = 5;
        for (int m = 3; ; m = (hi + lo) >> 1)
        {
          if (MAP2[m] > c0) {hi = m - 1;}
          else if (MAP2[6 + m] < c0) {lo = m + 1;}
          else {charclass = MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      int i0 = (charclass << 12) + code - 1;
      code = TRANSITION[(i0 & 15) + TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      int c1 = end < size ? input.charAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000)
      {
        --end;
      }
      return error(begin, end, state, -1, -1);
    }
    else if (nonbmp)
    {
      for (int i = result >> 9; i > 0; --i)
      {
        --end;
        int c1 = end < size ? input.charAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000)
        {
          --end;
        }
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

  private static String[] getTokenSet(int tokenSetId)
  {
    java.util.ArrayList<String> expected = new java.util.ArrayList<>();
    int s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 4095;
    for (int i = 0; i < 274; i += 32)
    {
      int j = i;
      int i0 = (i >> 5) * 3125 + s - 1;
      int i1 = i0 >> 1;
      int i2 = i1 >> 2;
      int f = EXPECTED[(i0 & 1) + EXPECTED[(i1 & 3) + EXPECTED[(i2 & 3) + EXPECTED[i2 >> 2]]]];
      for ( ; f != 0; f >>>= 1, ++j)
      {
        if ((f & 1) != 0)
        {
          expected.add(TOKEN[j]);
        }
      }
    }
    return expected.toArray(new String[]{});
  }

  private static final int[] MAP0 = new int[128];
  static
  {
    final String s1[] =
    {
      /*   0 */ "68, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2",
      /*  34 */ "3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20",
      /*  61 */ "21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 34, 30",
      /*  86 */ "30, 30, 35, 30, 30, 36, 37, 38, 37, 30, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 30, 48, 49, 50, 51",
      /* 111 */ "52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 37, 37"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 128; ++i) {MAP0[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] MAP1 = new int[456];
  static
  {
    final String s1[] =
    {
      /*   0 */ "108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181",
      /*  20 */ "181, 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  40 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  60 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  80 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /* 100 */ "214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415",
      /* 120 */ "339, 331, 339, 331, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 140 */ "440, 440, 440, 440, 440, 440, 440, 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424",
      /* 160 */ "422, 423, 423, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 180 */ "339, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423",
      /* 200 */ "423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 338, 339, 339, 339, 339, 339, 339",
      /* 220 */ "339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 240 */ "339, 339, 339, 339, 339, 339, 423, 68, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 269 */ "0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17",
      /* 299 */ "17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33",
      /* 324 */ "30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 37, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30",
      /* 349 */ "30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 30, 35, 30, 30, 36, 37, 38, 37, 30, 37, 39, 40",
      /* 374 */ "41, 42, 43, 44, 45, 46, 47, 30, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64",
      /* 399 */ "65, 66, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 30, 30, 37, 37, 37, 37, 37, 37, 37, 67, 37",
      /* 424 */ "37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67",
      /* 449 */ "67, 67, 67, 67, 67, 67, 67"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 456; ++i) {MAP1[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] MAP2 = new int[18];
  static
  {
    final String s1[] =
    {
      /*  0 */ "57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 37, 30, 37, 30",
      /* 16 */ "30, 37"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 18; ++i) {MAP2[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] INITIAL = new int[276];
  static
  {
    final String s1[] =
    {
      /*   0 */ "1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27",
      /*  27 */ "28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52",
      /*  52 */ "53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77",
      /*  77 */ "78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102",
      /* 102 */ "103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122",
      /* 122 */ "123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142",
      /* 142 */ "143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162",
      /* 162 */ "163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182",
      /* 182 */ "183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202",
      /* 202 */ "203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222",
      /* 222 */ "223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242",
      /* 242 */ "243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262",
      /* 262 */ "263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 276; ++i) {INITIAL[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] TRANSITION = new int[45886];
  static
  {
    final String s1[] =
    {
      /*     0 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*    14 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*    28 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*    42 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*    56 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*    70 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*    84 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*    98 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   112 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   126 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   140 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   154 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   168 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   182 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   196 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   210 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   224 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   238 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   252 */ "24718, 24718, 24718, 24718, 17664, 17679, 17683, 17683, 17683, 17737, 17683, 17683, 17683, 17683",
      /*   266 */ "17699, 17683, 17683, 17683, 17683, 17727, 17683, 17711, 18662, 24718, 24718, 24404, 24717, 24718",
      /*   280 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718, 24718, 43299, 24718, 17753",
      /*   294 */ "24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   308 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   322 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   336 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   350 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   364 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   378 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   392 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   406 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   420 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718",
      /*   434 */ "24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   448 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   462 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   476 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   490 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   504 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 24718, 24718, 24718, 24718, 24711",
      /*   518 */ "24718, 24718, 24718, 24718, 17792, 25628, 25633, 17819, 25636, 17835, 37961, 17854, 18662, 24718",
      /*   532 */ "24718, 24404, 24717, 24718, 24718, 20856, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718",
      /*   546 */ "24718, 43299, 24718, 17886, 24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718",
      /*   560 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   574 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   588 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   602 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   616 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   630 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   644 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   658 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   672 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718",
      /*   686 */ "24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   700 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   714 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   728 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   742 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   756 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17920, 17936",
      /*   770 */ "24718, 24718, 24718, 34037, 24718, 24718, 17863, 22137, 17955, 24718, 24718, 24718, 24718, 17982",
      /*   784 */ "18041, 18053, 18069, 24718, 24718, 24404, 24717, 24718, 24718, 18090, 24718, 24718, 24718, 24718",
      /*   798 */ "24718, 24718, 33211, 24718, 24718, 25317, 24718, 18107, 18111, 18128, 24718, 24718, 24043, 24718",
      /*   812 */ "24718, 24718, 24718, 24718, 24718, 24718, 38571, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   826 */ "18145, 24718, 24718, 24718, 18163, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   840 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   854 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   868 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   882 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   896 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   910 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   924 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   938 */ "24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718",
      /*   952 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   966 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   980 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*   994 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1008 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1022 */ "24718, 24718, 18182, 38337, 24718, 24718, 24718, 41193, 24718, 24718, 38333, 24718, 17792, 25809",
      /*  1036 */ "18217, 38339, 18224, 18252, 18240, 25822, 18662, 24718, 24718, 24404, 18268, 24718, 24718, 18289",
      /*  1050 */ "24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718, 24718, 43299, 24718, 17753, 25541, 18307",
      /*  1064 */ "24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 25884, 24718, 24718, 24718",
      /*  1078 */ "24718, 24718, 24718, 24718, 18326, 24718, 24718, 24718, 18346, 24718, 24718, 24718, 24718, 24718",
      /*  1092 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1106 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1120 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1134 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1148 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1162 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1176 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1190 */ "24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718",
      /*  1204 */ "26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1218 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1232 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1246 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1260 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1274 */ "24718, 24718, 24718, 24718, 24718, 24718, 17773, 18584, 24718, 24718, 24718, 26501, 24718, 24718",
      /*  1288 */ "43821, 24718, 18367, 18576, 18402, 24718, 18438, 43976, 18462, 18474, 18662, 24718, 24718, 24404",
      /*  1302 */ "24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718, 24718, 43299",
      /*  1316 */ "24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1330 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1344 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1358 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1372 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1386 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1400 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1414 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1428 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1442 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718",
      /*  1456 */ "41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1470 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1484 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1498 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1512 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1526 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 24718, 24718, 24718",
      /*  1540 */ "24718, 26167, 24718, 24718, 24718, 24718, 18490, 24718, 19451, 18518, 24718, 19454, 18537, 18549",
      /*  1554 */ "18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1568 */ "28669, 24718, 24718, 43299, 24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718",
      /*  1582 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1596 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1610 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1624 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1638 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1652 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1666 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1680 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1694 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533",
      /*  1708 */ "24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718",
      /*  1722 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1736 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1750 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1764 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1778 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1792 */ "17773, 24718, 24718, 24718, 24718, 24711, 24718, 24718, 24718, 24718, 18565, 24718, 24718, 24718",
      /*  1806 */ "24718, 24718, 24718, 39681, 18606, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718",
      /*  1820 */ "24718, 24718, 24718, 24718, 33521, 24718, 24718, 36752, 24718, 18627, 24718, 24718, 24718, 24718",
      /*  1834 */ "24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1848 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1862 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1876 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1890 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1904 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1918 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1932 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1946 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1960 */ "24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718",
      /*  1974 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  1988 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2002 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2016 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2030 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2044 */ "24718, 24718, 24718, 24718, 18647, 18683, 24718, 24718, 24718, 33952, 24718, 24718, 21433, 40876",
      /*  2058 */ "18702, 24718, 24718, 24718, 24718, 18732, 18747, 18759, 18775, 24718, 24718, 24404, 24717, 24718",
      /*  2072 */ "24718, 18796, 24718, 24718, 24718, 24718, 24718, 24718, 28975, 24718, 24718, 31736, 24718, 18817",
      /*  2086 */ "24719, 18837, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 20438, 24718",
      /*  2100 */ "24718, 24718, 24718, 24718, 24718, 24718, 18857, 24718, 24718, 24718, 34427, 24718, 24718, 24718",
      /*  2114 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2128 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2142 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2156 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2170 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2184 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2198 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2212 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718",
      /*  2226 */ "24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2240 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2254 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2268 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2282 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2296 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 18878, 18893, 19011, 19011, 19011, 18913",
      /*  2310 */ "19009, 19011, 18923, 18950, 18939, 18966, 19038, 18897, 19045, 18994, 19027, 18978, 18662, 24718",
      /*  2324 */ "24718, 21198, 19065, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718",
      /*  2338 */ "24718, 43299, 24718, 17753, 24718, 24718, 24718, 24718, 19061, 24718, 24718, 24718, 24718, 24718",
      /*  2352 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2366 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2380 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2394 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2408 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2422 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2436 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2450 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2464 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718",
      /*  2478 */ "24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2492 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2506 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2520 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2534 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2548 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 18713",
      /*  2562 */ "24718, 24718, 24718, 41372, 19111, 24718, 45257, 24718, 17792, 18716, 44046, 19082, 19085, 19101",
      /*  2576 */ "41383, 19131, 18662, 24718, 24718, 24404, 19169, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2590 */ "24718, 24718, 28669, 24718, 24718, 43299, 24718, 17753, 24718, 24718, 24718, 24718, 24714, 24718",
      /*  2604 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2618 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2632 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2646 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2660 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2674 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2688 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2702 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2716 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2730 */ "24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718",
      /*  2744 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2758 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2772 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2786 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2800 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2814 */ "24718, 24718, 17773, 32370, 24718, 24718, 24718, 24711, 24718, 24718, 24718, 17904, 19186, 25947",
      /*  2828 */ "25952, 19247, 19221, 19237, 19263, 19275, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718",
      /*  2842 */ "24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718, 24718, 43299, 24718, 17753, 24718, 24718",
      /*  2856 */ "24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2870 */ "24718, 24718, 24718, 24718, 39599, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2884 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2898 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2912 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2926 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2940 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2954 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2968 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  2982 */ "24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718",
      /*  2996 */ "26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3010 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3024 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3038 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3052 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3066 */ "24718, 24718, 24718, 24718, 24718, 24718, 17773, 24718, 24718, 24718, 24718, 24711, 24718, 24718",
      /*  3080 */ "24718, 18386, 19291, 25983, 19330, 19318, 19329, 19346, 25984, 19368, 18662, 24718, 24718, 24404",
      /*  3094 */ "24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718, 24718, 43299",
      /*  3108 */ "24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718, 28957, 24718, 24718, 24718, 24718, 24718",
      /*  3122 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3136 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3150 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3164 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3178 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3192 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3206 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3220 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3234 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718",
      /*  3248 */ "41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3262 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3276 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3290 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3304 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3318 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 44300, 24718, 24718",
      /*  3332 */ "24718, 24711, 19384, 24718, 45510, 44300, 19405, 19418, 19431, 19432, 19432, 19448, 40292, 19470",
      /*  3346 */ "18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3360 */ "28669, 24718, 24718, 43299, 24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718",
      /*  3374 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3388 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3402 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3416 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3430 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3444 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3458 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3472 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3486 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533",
      /*  3500 */ "24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718",
      /*  3514 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3528 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3542 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3556 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3570 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3584 */ "19486, 24718, 24718, 24718, 24718, 24711, 24718, 24718, 24718, 24718, 17792, 26250, 19521, 19509",
      /*  3598 */ "19520, 19537, 26251, 19559, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718",
      /*  3612 */ "24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508, 29767, 22546, 25462, 24718, 41559, 24718",
      /*  3626 */ "24043, 19575, 28957, 17757, 24718, 24718, 24718, 24718, 19352, 35856, 19612, 35856, 25378, 44991",
      /*  3640 */ "45190, 45190, 38866, 24684, 29767, 29767, 39521, 44203, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3654 */ "44912, 21272, 24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190",
      /*  3668 */ "19835, 19630, 29767, 29767, 29767, 29767, 28312, 22868, 24718, 19651, 24718, 24718, 24718, 24718",
      /*  3682 */ "34574, 24718, 24718, 19351, 19687, 35856, 35856, 35856, 33756, 42706, 45190, 45190, 45190, 32293",
      /*  3696 */ "19716, 29767, 29767, 29767, 20028, 23040, 24859, 24718, 24718, 24718, 30475, 24718, 19350, 35856",
      /*  3710 */ "19745, 35856, 25376, 32656, 45190, 45190, 37893, 32017, 29767, 29767, 37706, 24718, 24718, 21406",
      /*  3724 */ "19764, 19349, 35856, 35856, 19785, 45190, 45190, 19805, 29767, 29926, 35683, 27410, 24718, 34082",
      /*  3738 */ "24718, 44232, 35856, 25377, 19831, 25253, 42748, 29767, 39357, 24718, 19851, 23812, 19894, 19914",
      /*  3752 */ "33312, 19952, 38873, 38443, 44067, 19978, 19999, 24481, 26921, 40947, 29586, 37693, 37354, 33096",
      /*  3766 */ "44487, 33358, 44069, 45187, 33356, 31461, 43775, 20023, 20352, 25483, 32922, 38028, 37716, 24855",
      /*  3780 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3794 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3808 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3822 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  3836 */ "24718, 24718, 24718, 24718, 17773, 24718, 24718, 24718, 24718, 24711, 24718, 24718, 24718, 44747",
      /*  3850 */ "17792, 24718, 24718, 24718, 24718, 24718, 20049, 20061, 18662, 24718, 24718, 24404, 24717, 24718",
      /*  3864 */ "43798, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508, 29767, 43598",
      /*  3878 */ "25462, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 19352, 35856",
      /*  3892 */ "35856, 35856, 25378, 45190, 45190, 45190, 38866, 29767, 29767, 29767, 23035, 44203, 24718, 24718",
      /*  3906 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044",
      /*  3920 */ "45190, 45190, 45190, 45190, 19835, 19630, 29767, 29767, 29767, 29767, 28312, 22868, 24718, 24718",
      /*  3934 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 19351, 35856, 35856, 35856, 35856, 25378, 45190",
      /*  3948 */ "45190, 45190, 45190, 32293, 29767, 29767, 29767, 29767, 20028, 23040, 24859, 24718, 24718, 24718",
      /*  3962 */ "24718, 24718, 19350, 35856, 35856, 35856, 25376, 45190, 45190, 45190, 37893, 29767, 29767, 29767",
      /*  3976 */ "37706, 24718, 24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767",
      /*  3990 */ "35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718",
      /*  4004 */ "24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854",
      /*  4018 */ "45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483",
      /*  4032 */ "32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4046 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4060 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4074 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4088 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 20077, 24718, 24718, 24718, 29845",
      /*  4102 */ "24718, 24718, 24718, 24718, 17792, 26532, 20097, 20116, 20100, 20135, 26534, 20156, 18662, 24718",
      /*  4116 */ "24718, 24404, 24717, 24718, 24718, 45601, 24718, 44447, 24718, 24718, 24718, 24718, 28669, 24718",
      /*  4130 */ "24718, 43299, 24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718",
      /*  4144 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4158 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4172 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4186 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4200 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4214 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4228 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4242 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4256 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718",
      /*  4270 */ "24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4284 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4298 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4312 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4326 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4340 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 20172",
      /*  4354 */ "24718, 24718, 24718, 24711, 24718, 24718, 24718, 43425, 17792, 24718, 24718, 24718, 24718, 24718",
      /*  4368 */ "20189, 20201, 20217, 24718, 24718, 24404, 24717, 24718, 41876, 24718, 24718, 24718, 24718, 24718",
      /*  4382 */ "24718, 24718, 28669, 35856, 25379, 34508, 29767, 42498, 25462, 24718, 24718, 24718, 24043, 24718",
      /*  4396 */ "44794, 20238, 24718, 24718, 24718, 24718, 19352, 35856, 35856, 35856, 25378, 45190, 45190, 45190",
      /*  4410 */ "38866, 29767, 29767, 29767, 23035, 42907, 20257, 24718, 24718, 24718, 24718, 28819, 24718, 24718",
      /*  4424 */ "24718, 24718, 32047, 35856, 35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190, 37058, 20277",
      /*  4438 */ "29767, 29767, 29767, 29767, 30971, 42345, 20298, 24718, 24718, 24718, 24718, 23631, 24718, 24718",
      /*  4452 */ "24718, 20341, 35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 45190, 20368, 29767, 29767",
      /*  4466 */ "29767, 29767, 34903, 23040, 35199, 24718, 24718, 24718, 24718, 24718, 28063, 35856, 35856, 35856",
      /*  4480 */ "25376, 45190, 45190, 45190, 27923, 29767, 29767, 29767, 42057, 24718, 24718, 24718, 24718, 19349",
      /*  4494 */ "35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855",
      /*  4508 */ "35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767",
      /*  4522 */ "38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358",
      /*  4536 */ "44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718",
      /*  4550 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4564 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4578 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4592 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4606 */ "24718, 24718, 17773, 21358, 24718, 24718, 24718, 36466, 27101, 24718, 26449, 27108, 17792, 27114",
      /*  4620 */ "20396, 24718, 18862, 20398, 21708, 20415, 20431, 24718, 24718, 21320, 20454, 24718, 24718, 24718",
      /*  4634 */ "24718, 24718, 24718, 24718, 24718, 24718, 28669, 20806, 20715, 39748, 20476, 20493, 20531, 24718",
      /*  4648 */ "24718, 24718, 20552, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 45758, 20806, 20806, 20806",
      /*  4662 */ "20714, 24718, 24718, 24718, 20573, 20476, 20476, 20476, 20596, 20648, 24718, 24718, 24718, 24718",
      /*  4676 */ "24718, 24718, 24718, 24718, 24718, 24718, 35225, 20806, 20806, 20806, 20806, 20626, 24718, 24718",
      /*  4690 */ "24718, 24718, 24718, 20515, 20476, 20476, 20476, 20476, 20536, 20643, 24718, 24718, 24718, 24718",
      /*  4704 */ "24718, 24718, 24718, 24718, 24718, 35227, 20806, 20806, 20806, 20806, 20714, 24718, 24718, 24718",
      /*  4718 */ "24718, 36550, 20476, 20476, 20476, 20476, 20829, 20664, 20855, 24718, 24718, 24718, 24718, 24718",
      /*  4732 */ "35226, 20806, 20806, 20806, 20712, 24718, 24718, 24718, 20513, 20476, 20476, 20476, 20684, 24718",
      /*  4746 */ "24718, 24718, 24718, 35225, 20806, 20806, 20627, 24718, 24718, 20510, 20476, 20476, 20736, 20855",
      /*  4760 */ "24718, 24718, 24718, 20805, 20806, 20713, 24718, 36549, 20476, 20476, 20741, 24718, 24718, 41268",
      /*  4774 */ "20806, 20607, 36548, 20476, 20580, 41533, 41268, 20710, 36550, 20731, 20757, 20804, 20609, 20477",
      /*  4788 */ "20761, 20626, 36550, 20779, 41270, 20607, 20777, 41269, 20505, 20779, 45768, 20795, 20822, 20668",
      /*  4802 */ "20694, 20851, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4816 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4830 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4844 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4858 */ "24718, 24718, 24718, 24718, 24718, 24718, 17773, 45718, 24718, 24718, 24718, 24711, 20872, 24718",
      /*  4872 */ "19540, 25893, 20899, 20934, 20938, 20938, 20938, 20880, 19543, 20954, 18662, 24718, 24718, 24404",
      /*  4886 */ "24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718, 24718, 43299",
      /*  4900 */ "24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4914 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4928 */ "24718, 24718, 24718, 24718, 24718, 44366, 20970, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  4942 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 18112",
      /*  4956 */ "20988, 18839, 24718, 24718, 24718, 41226, 24718, 24718, 24718, 17997, 24718, 24718, 24718, 24718",
      /*  4970 */ "24718, 24718, 24718, 24718, 24718, 21018, 24718, 24718, 24718, 24718, 38621, 17756, 19145, 24718",
      /*  4984 */ "24718, 24718, 24718, 24718, 36473, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21045, 24718",
      /*  4998 */ "24718, 24718, 38629, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5012 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5026 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718",
      /*  5040 */ "41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5054 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5068 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5082 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5096 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5110 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 24718, 24718, 24718",
      /*  5124 */ "24718, 24711, 24718, 24718, 24718, 24718, 36325, 26597, 26602, 26602, 26602, 21079, 21098, 21110",
      /*  5138 */ "18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 20119, 24718, 24718, 24718, 24718",
      /*  5152 */ "28669, 24718, 24718, 43299, 24718, 21126, 24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718",
      /*  5166 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5180 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5194 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5208 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5222 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5236 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5250 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5264 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5278 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533",
      /*  5292 */ "24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718",
      /*  5306 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5320 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5334 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5348 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5362 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5376 */ "21160, 44971, 24718, 24718, 24718, 24711, 24718, 24718, 24718, 24718, 17792, 27166, 27171, 27171",
      /*  5390 */ "27171, 21195, 44632, 21214, 21230, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 45032",
      /*  5404 */ "24718, 24718, 24718, 24718, 28669, 24718, 24718, 43299, 24718, 21254, 24718, 24718, 24718, 24718",
      /*  5418 */ "24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5432 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5446 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5460 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5474 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5488 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5502 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5516 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5530 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5544 */ "24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718",
      /*  5558 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5572 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5586 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5600 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5614 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5628 */ "24718, 24718, 24718, 24718, 21288, 21297, 24718, 24718, 24718, 41917, 24718, 24718, 24718, 24718",
      /*  5642 */ "17792, 29226, 29231, 29231, 29231, 21317, 44933, 21336, 21352, 24718, 24718, 24404, 24717, 24718",
      /*  5656 */ "24718, 24718, 24718, 45437, 24718, 24718, 24718, 24718, 28669, 24718, 24718, 43299, 24718, 17753",
      /*  5670 */ "44109, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5684 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5698 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5712 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5726 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5740 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5754 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5768 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5782 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5796 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718",
      /*  5810 */ "24718, 24718, 22899, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5824 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5838 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5852 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5866 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5880 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21374, 24718, 24718, 24718, 24718, 24711",
      /*  5894 */ "19589, 24718, 24718, 19584, 21422, 24718, 24718, 20138, 20140, 24718, 41394, 40978, 18662, 24718",
      /*  5908 */ "24718, 24404, 24717, 24718, 24718, 45108, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718",
      /*  5922 */ "24718, 43299, 24718, 21456, 24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718",
      /*  5936 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5950 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5964 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5978 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  5992 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6006 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6020 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6034 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6048 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718",
      /*  6062 */ "24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6076 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6090 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6104 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6118 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6132 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 24718",
      /*  6146 */ "24718, 24718, 24718, 24711, 24718, 24718, 24718, 24718, 17792, 24718, 24718, 24718, 24718, 24718",
      /*  6160 */ "21492, 21504, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6174 */ "24718, 24718, 28669, 24718, 24718, 43299, 24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718",
      /*  6188 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6202 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6216 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6230 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6244 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6258 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6272 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6286 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6300 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6314 */ "24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718",
      /*  6328 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6342 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6356 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6370 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6384 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6398 */ "24718, 24718, 21520, 24718, 24718, 24718, 24718, 29999, 24718, 24718, 24718, 24718, 17792, 24718",
      /*  6412 */ "24718, 24718, 24718, 34763, 29094, 29106, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718",
      /*  6426 */ "24718, 24718, 24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508, 29767, 22546, 29556, 24718",
      /*  6440 */ "24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41292, 35856, 35856, 35856",
      /*  6454 */ "25378, 45190, 45190, 45190, 19929, 29767, 29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718",
      /*  6468 */ "24718, 45483, 24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190",
      /*  6482 */ "45190, 45190, 19835, 19630, 29767, 29767, 29767, 29767, 28312, 40566, 21541, 24718, 24718, 24718",
      /*  6496 */ "24718, 23631, 24718, 24718, 24718, 21585, 35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190",
      /*  6510 */ "45190, 21621, 29767, 29767, 29767, 29767, 19962, 23040, 35199, 24718, 24718, 24718, 21649, 24718",
      /*  6524 */ "28063, 35856, 35856, 35856, 25376, 45190, 45190, 45190, 27923, 29767, 29767, 29767, 42057, 24718",
      /*  6538 */ "24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859",
      /*  6552 */ "24718, 21668, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067",
      /*  6566 */ "35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768",
      /*  6580 */ "40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028",
      /*  6594 */ "37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6608 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6622 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6636 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6650 */ "24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718, 24718, 29999, 24718, 24718",
      /*  6664 */ "24718, 24718, 17792, 24718, 24718, 24718, 24718, 34763, 29094, 29106, 18662, 24718, 24718, 24404",
      /*  6678 */ "24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508",
      /*  6692 */ "29767, 22546, 29556, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6706 */ "41292, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 19929, 29767, 29767, 29767, 23035, 44203",
      /*  6720 */ "24718, 24718, 24718, 24718, 24718, 45483, 24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856",
      /*  6734 */ "35856, 39044, 45190, 45190, 45190, 45190, 19835, 19630, 29767, 29767, 29767, 29767, 28312, 40566",
      /*  6748 */ "21541, 24718, 24718, 24718, 24718, 23631, 24718, 24718, 24718, 21585, 35856, 35856, 35856, 35856",
      /*  6762 */ "25378, 45190, 45190, 45190, 45190, 21621, 29767, 29767, 29767, 29767, 19962, 23040, 35199, 24718",
      /*  6776 */ "24718, 24718, 24718, 24718, 28063, 35856, 35856, 35856, 25376, 45190, 45190, 45190, 27923, 29767",
      /*  6790 */ "29767, 29767, 42057, 24718, 24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774",
      /*  6804 */ "29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767",
      /*  6818 */ "35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644",
      /*  6832 */ "26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358",
      /*  6846 */ "20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6860 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6874 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6888 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6902 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718",
      /*  6916 */ "24718, 29999, 24718, 24718, 24718, 24718, 17792, 24718, 24718, 24718, 24718, 34763, 29094, 29106",
      /*  6930 */ "18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  6944 */ "28669, 35856, 25379, 34508, 29767, 22546, 29556, 24718, 24718, 24718, 24043, 24718, 24718, 24718",
      /*  6958 */ "24718, 24718, 24718, 24718, 41292, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 19929, 29767",
      /*  6972 */ "29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718, 24718, 45483, 29127, 24718, 24718, 24718",
      /*  6986 */ "41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190, 19835, 19630, 29767, 29767",
      /*  7000 */ "29767, 29767, 28312, 40566, 21541, 24718, 24718, 24718, 24718, 23631, 24718, 24718, 24718, 21585",
      /*  7014 */ "35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 45190, 21621, 29767, 29767, 29767, 29767",
      /*  7028 */ "19962, 23040, 35199, 24718, 24718, 24718, 24718, 24718, 28063, 35856, 35856, 35856, 25376, 45190",
      /*  7042 */ "45190, 45190, 27923, 29767, 29767, 29767, 42057, 24718, 24718, 24718, 24718, 19349, 35856, 35856",
      /*  7056 */ "39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377",
      /*  7070 */ "45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533",
      /*  7084 */ "44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187",
      /*  7098 */ "33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718",
      /*  7112 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7126 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7140 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7154 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7168 */ "21520, 24718, 24718, 24718, 24718, 29999, 24718, 24718, 24718, 24718, 17792, 24718, 24718, 24718",
      /*  7182 */ "24718, 34763, 29094, 29106, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718",
      /*  7196 */ "24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508, 29767, 22546, 29556, 24718, 24718, 24718",
      /*  7210 */ "24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41292, 35856, 35856, 35856, 25378, 45190",
      /*  7224 */ "45190, 45190, 19929, 29767, 29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718, 24718, 45483",
      /*  7238 */ "24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190",
      /*  7252 */ "19835, 19630, 29767, 29767, 29767, 29767, 28312, 40566, 21541, 24718, 24718, 24718, 24718, 23631",
      /*  7266 */ "21689, 24718, 24718, 21585, 35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 45190, 21621",
      /*  7280 */ "29767, 29767, 29767, 29767, 19962, 23040, 35199, 24718, 24718, 24718, 24718, 24718, 28063, 35856",
      /*  7294 */ "35856, 35856, 25376, 45190, 45190, 45190, 27923, 29767, 29767, 29767, 42057, 24718, 24718, 24718",
      /*  7308 */ "24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859, 24718, 24718",
      /*  7322 */ "24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187",
      /*  7336 */ "25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044",
      /*  7350 */ "25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855",
      /*  7364 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7378 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7392 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7406 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7420 */ "24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718, 24718, 29999, 24718, 24718, 24718, 24718",
      /*  7434 */ "17792, 24718, 24718, 24718, 24718, 34763, 29094, 29106, 18662, 24718, 24718, 24404, 24717, 24718",
      /*  7448 */ "19596, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508, 29767, 22546",
      /*  7462 */ "29556, 24718, 24718, 24718, 24043, 24718, 19593, 24718, 24718, 24718, 24718, 24718, 41292, 35856",
      /*  7476 */ "35856, 35856, 25378, 45190, 45190, 45190, 19929, 29767, 29767, 29767, 23035, 44203, 24718, 24718",
      /*  7490 */ "24718, 24718, 24718, 45483, 24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044",
      /*  7504 */ "45190, 45190, 45190, 45190, 19835, 19630, 29767, 29767, 29767, 29767, 28312, 40566, 21541, 24718",
      /*  7518 */ "24718, 24718, 24718, 23631, 24718, 24718, 24718, 21585, 35856, 35856, 35856, 35856, 25378, 45190",
      /*  7532 */ "45190, 45190, 45190, 21621, 29767, 29767, 29767, 29767, 19962, 23040, 35199, 24718, 24718, 24718",
      /*  7546 */ "24718, 24718, 28063, 35856, 35856, 35856, 25376, 45190, 45190, 45190, 27923, 29767, 29767, 29767",
      /*  7560 */ "42057, 24718, 24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767",
      /*  7574 */ "35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718",
      /*  7588 */ "24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854",
      /*  7602 */ "45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483",
      /*  7616 */ "32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7630 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7644 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7658 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7672 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718, 24718, 29999",
      /*  7686 */ "24718, 24718, 24718, 24718, 17792, 24718, 24718, 24718, 24718, 34763, 29094, 29106, 18662, 24718",
      /*  7700 */ "24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 35856",
      /*  7714 */ "25379, 34508, 29767, 22546, 29556, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718",
      /*  7728 */ "24718, 24718, 41292, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 19929, 29767, 29767, 29767",
      /*  7742 */ "23035, 44203, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41289, 35856",
      /*  7756 */ "35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190, 19835, 19630, 29767, 29767, 29767, 29767",
      /*  7770 */ "28312, 22868, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 19351, 35856, 35856",
      /*  7784 */ "35856, 35856, 25378, 45190, 45190, 45190, 45190, 32293, 29767, 29767, 29767, 29767, 20028, 23040",
      /*  7798 */ "24859, 24718, 24718, 24718, 24718, 24718, 19350, 35856, 35856, 35856, 25376, 45190, 45190, 45190",
      /*  7812 */ "37893, 29767, 29767, 29767, 37706, 24718, 24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190",
      /*  7826 */ "45190, 33774, 29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253",
      /*  7840 */ "29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374",
      /*  7854 */ "25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068",
      /*  7868 */ "37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7882 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7896 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7910 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7924 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718",
      /*  7938 */ "24718, 24718, 24718, 29999, 24718, 24718, 24718, 24718, 17792, 24718, 24718, 24718, 24718, 34763",
      /*  7952 */ "29094, 29106, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  7966 */ "24718, 24718, 28669, 35856, 25379, 34508, 29767, 22546, 20007, 24718, 24718, 24718, 24043, 24718",
      /*  7980 */ "24718, 24718, 24718, 24718, 24718, 24718, 41292, 35856, 35856, 35856, 25378, 45190, 45190, 45190",
      /*  7994 */ "19929, 29767, 29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8008 */ "24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190, 19835, 19630",
      /*  8022 */ "29767, 29767, 29767, 29767, 28312, 22868, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8036 */ "24718, 19351, 35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 45190, 32293, 29767, 29767",
      /*  8050 */ "29767, 29767, 20028, 23040, 24859, 24718, 24718, 24718, 24718, 24718, 19350, 35856, 35856, 35856",
      /*  8064 */ "25376, 45190, 45190, 45190, 37893, 29767, 29767, 29767, 37706, 24718, 24718, 24718, 24718, 19349",
      /*  8078 */ "35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855",
      /*  8092 */ "35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767",
      /*  8106 */ "38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358",
      /*  8120 */ "44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718",
      /*  8134 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8148 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8162 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8176 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8190 */ "24718, 24718, 21520, 24718, 24718, 24718, 24718, 29999, 24718, 24718, 24718, 24718, 17792, 24718",
      /*  8204 */ "24718, 24718, 24718, 34763, 29094, 29955, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718",
      /*  8218 */ "24718, 24718, 24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508, 29767, 22546, 29556, 24718",
      /*  8232 */ "24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41292, 35856, 35856, 35856",
      /*  8246 */ "25378, 45190, 45190, 45190, 19929, 29767, 29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718",
      /*  8260 */ "24718, 24718, 24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190",
      /*  8274 */ "45190, 45190, 19835, 19630, 29767, 29767, 29767, 29767, 28312, 22868, 24718, 24718, 24718, 24718",
      /*  8288 */ "24718, 24718, 24718, 24718, 24718, 19351, 35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190",
      /*  8302 */ "45190, 32293, 29767, 29767, 29767, 29767, 20028, 23040, 24859, 24718, 24718, 24718, 24718, 24718",
      /*  8316 */ "19350, 35856, 35856, 35856, 25376, 45190, 45190, 45190, 37893, 29767, 29767, 29767, 37706, 24718",
      /*  8330 */ "24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859",
      /*  8344 */ "24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067",
      /*  8358 */ "35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768",
      /*  8372 */ "40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028",
      /*  8386 */ "37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8400 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8414 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8428 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8442 */ "24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718, 24718, 29999, 24718, 24718",
      /*  8456 */ "24718, 24718, 17792, 21706, 24718, 24718, 24718, 34763, 29094, 29106, 18662, 24718, 24718, 24404",
      /*  8470 */ "24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508",
      /*  8484 */ "29767, 22546, 29556, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 27419, 24718, 24718, 24718",
      /*  8498 */ "41292, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 19929, 29767, 29767, 29767, 23035, 44203",
      /*  8512 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856",
      /*  8526 */ "35856, 39044, 45190, 45190, 45190, 45190, 19835, 19630, 29767, 29767, 29767, 29767, 28312, 22868",
      /*  8540 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 19351, 35856, 35856, 35856, 35856",
      /*  8554 */ "25378, 45190, 45190, 45190, 45190, 32293, 29767, 29767, 29767, 29767, 20028, 23040, 24859, 24718",
      /*  8568 */ "24718, 24718, 24718, 24718, 19350, 35856, 35856, 35856, 25376, 45190, 45190, 45190, 37893, 29767",
      /*  8582 */ "29767, 29767, 37706, 24718, 24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774",
      /*  8596 */ "29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767",
      /*  8610 */ "35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644",
      /*  8624 */ "26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358",
      /*  8638 */ "20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8652 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8666 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8680 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8694 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718",
      /*  8708 */ "24718, 29999, 24718, 24718, 24718, 24718, 17792, 24718, 24718, 24718, 24718, 34763, 29094, 29106",
      /*  8722 */ "18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8736 */ "28669, 35856, 25379, 34508, 29767, 22546, 29556, 24718, 24718, 24718, 24043, 24718, 24718, 24718",
      /*  8750 */ "24718, 24718, 24718, 24718, 41292, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 19929, 29767",
      /*  8764 */ "29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8778 */ "41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190, 19835, 19630, 29767, 29767",
      /*  8792 */ "29767, 29767, 28312, 22868, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 19351",
      /*  8806 */ "35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 45190, 32293, 29767, 29767, 29767, 29767",
      /*  8820 */ "20028, 23040, 24859, 24718, 24718, 24718, 24718, 24718, 19350, 35856, 35856, 35856, 25376, 45190",
      /*  8834 */ "45190, 45190, 37893, 29767, 29767, 29767, 37706, 24718, 24718, 18521, 24718, 19349, 35856, 35856",
      /*  8848 */ "39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377",
      /*  8862 */ "45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533",
      /*  8876 */ "44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187",
      /*  8890 */ "33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718",
      /*  8904 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8918 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8932 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8946 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  8960 */ "21724, 24718, 24718, 24718, 24718, 29999, 24718, 24718, 24718, 24718, 17792, 24718, 24718, 24718",
      /*  8974 */ "24718, 34763, 29094, 29106, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718",
      /*  8988 */ "24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508, 29767, 22546, 29556, 24718, 24718, 24718",
      /*  9002 */ "24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41292, 35856, 35856, 35856, 25378, 45190",
      /*  9016 */ "45190, 45190, 19929, 29767, 29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9030 */ "24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190",
      /*  9044 */ "19835, 19630, 29767, 29767, 29767, 29767, 28312, 22868, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9058 */ "24718, 24718, 24718, 19351, 35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 45190, 32293",
      /*  9072 */ "29767, 29767, 29767, 29767, 20028, 23040, 24859, 24718, 24718, 24718, 24718, 24718, 19350, 35856",
      /*  9086 */ "35856, 35856, 25376, 45190, 45190, 45190, 37893, 29767, 29767, 29767, 37706, 24718, 24718, 24718",
      /*  9100 */ "24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859, 24718, 24718",
      /*  9114 */ "24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187",
      /*  9128 */ "25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044",
      /*  9142 */ "25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855",
      /*  9156 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9170 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9184 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9198 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9212 */ "24718, 24718, 24718, 24718, 17773, 24718, 24718, 24718, 24718, 24711, 24718, 24718, 24718, 24718",
      /*  9226 */ "17792, 30697, 30702, 21745, 30705, 21764, 18590, 21783, 18662, 24718, 24718, 24404, 24717, 24718",
      /*  9240 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718, 24718, 43299, 24718, 17753",
      /*  9254 */ "24718, 24718, 24718, 24718, 24043, 24718, 24718, 21690, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9268 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9282 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9296 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9310 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9324 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9338 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9352 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9366 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9380 */ "26447, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718",
      /*  9394 */ "24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9408 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9422 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9436 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9450 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9464 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 24718, 24718, 24718, 24718, 24711",
      /*  9478 */ "24718, 24718, 24718, 24718, 17792, 24718, 24718, 24718, 24718, 24718, 24718, 40922, 18662, 24718",
      /*  9492 */ "24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718",
      /*  9506 */ "24718, 43299, 24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718",
      /*  9520 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9534 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9548 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9562 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9576 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9590 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9604 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9618 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9632 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718",
      /*  9646 */ "24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9660 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9674 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9688 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9702 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9716 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 24718",
      /*  9730 */ "24718, 24718, 24718, 24711, 24718, 24718, 24718, 24718, 17792, 21799, 18147, 21820, 21823, 21839",
      /*  9744 */ "24718, 21858, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9758 */ "24718, 24718, 28669, 24718, 24718, 43299, 24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718",
      /*  9772 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9786 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9800 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9814 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9828 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9842 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9856 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9870 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9884 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9898 */ "24718, 19671, 24718, 24718, 24718, 24718, 36285, 24718, 24718, 24718, 36289, 24718, 24718, 24718",
      /*  9912 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9926 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9940 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9954 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9968 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /*  9982 */ "24718, 24718, 21520, 22351, 24718, 24718, 24718, 29999, 21885, 24718, 19389, 21874, 21901, 21939",
      /*  9996 */ "21944, 21960, 21971, 21987, 22002, 22014, 22030, 24718, 43043, 24404, 22067, 30359, 36692, 22102",
      /* 10010 */ "41596, 22126, 22182, 22153, 22176, 22160, 22198, 22214, 22230, 22261, 22277, 42097, 22293, 22330",
      /* 10024 */ "24718, 24718, 34699, 22349, 21136, 29891, 24718, 22367, 24718, 22397, 22835, 35856, 35856, 36584",
      /* 10038 */ "25378, 45190, 45190, 31550, 26101, 29767, 29767, 25109, 37172, 44203, 24718, 22415, 30351, 45317",
      /* 10052 */ "25135, 45483, 43293, 24718, 34362, 34642, 22436, 36577, 22455, 35856, 22472, 22494, 42003, 45190",
      /* 10066 */ "45190, 22516, 37884, 22532, 43136, 29767, 33503, 29174, 37486, 22572, 21541, 40609, 29283, 41260",
      /* 10080 */ "17838, 22601, 24718, 22051, 22625, 21585, 39650, 35856, 22646, 35856, 22720, 22736, 23259, 29741",
      /* 10094 */ "40142, 21621, 35461, 29767, 22770, 29767, 22821, 22862, 40865, 22884, 22921, 36187, 36146, 22940",
      /* 10108 */ "28063, 22961, 35856, 38970, 22998, 25073, 45190, 30275, 33591, 31661, 29767, 42779, 42057, 23056",
      /* 10122 */ "39742, 23091, 23110, 23126, 29466, 23155, 39045, 31398, 23191, 33774, 23216, 36921, 37900, 31950",
      /* 10136 */ "24718, 34343, 24718, 22314, 31924, 23232, 23254, 23275, 45054, 45279, 35688, 24718, 24718, 44067",
      /* 10150 */ "35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 28686",
      /* 10164 */ "23302, 23318, 23369, 38177, 23385, 23428, 23451, 23474, 37664, 40813, 20352, 25483, 32922, 38028",
      /* 10178 */ "37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10192 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10206 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10220 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10234 */ "24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 23497, 24718, 24718, 29999, 24718, 24718",
      /* 10248 */ "24718, 24718, 23516, 23532, 19170, 23553, 23561, 23577, 23592, 23608, 18662, 24718, 24718, 24404",
      /* 10262 */ "24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508",
      /* 10276 */ "29767, 22546, 29556, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10290 */ "41292, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 19929, 29767, 29767, 29767, 23035, 44203",
      /* 10304 */ "24718, 24718, 24718, 24718, 24718, 23624, 44578, 24718, 44581, 24718, 41289, 35856, 35856, 35856",
      /* 10318 */ "32637, 23647, 45190, 45190, 45190, 27642, 23670, 19630, 29767, 29767, 29767, 23695, 28312, 40566",
      /* 10332 */ "21541, 24718, 24718, 24718, 24718, 23631, 24718, 24718, 24718, 21585, 35856, 35856, 35856, 35856",
      /* 10346 */ "25378, 45190, 45190, 45190, 45190, 21621, 29767, 29767, 29767, 29767, 19962, 23040, 35199, 24718",
      /* 10360 */ "31730, 24718, 23738, 36495, 28063, 23758, 35856, 35856, 38489, 45190, 45190, 45190, 23779, 29767",
      /* 10374 */ "29767, 25153, 42057, 24718, 24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774",
      /* 10388 */ "29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767",
      /* 10402 */ "35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644",
      /* 10416 */ "26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 23828, 23844, 24349, 44068, 37664, 33358",
      /* 10430 */ "20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10444 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10458 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10472 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10486 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 23885, 24718",
      /* 10500 */ "24718, 29999, 22399, 24718, 18091, 24718, 23921, 23937, 23942, 23958, 23973, 23989, 24004, 24016",
      /* 10514 */ "18662, 24718, 24718, 24032, 24063, 24718, 24081, 24718, 40436, 24718, 24718, 24718, 22420, 24718",
      /* 10528 */ "24101, 35857, 25379, 29799, 43729, 29080, 24117, 24718, 24154, 24718, 24144, 24718, 24171, 24718",
      /* 10542 */ "24191, 26883, 24225, 27373, 24245, 39951, 35856, 35856, 34791, 24312, 45190, 45190, 23333, 24338",
      /* 10556 */ "29767, 29767, 23035, 44203, 31779, 24718, 24718, 28849, 24718, 30212, 24718, 24365, 24402, 24718",
      /* 10570 */ "41289, 25234, 24420, 35856, 24436, 39044, 22746, 24454, 24508, 24507, 19835, 24524, 38097, 41755",
      /* 10584 */ "27039, 29767, 28312, 40566, 21541, 24718, 24718, 24540, 24718, 24559, 24718, 24718, 24718, 21585",
      /* 10598 */ "35856, 35856, 35856, 39942, 25378, 45190, 45190, 45190, 24583, 21621, 29767, 29767, 29767, 43127",
      /* 10612 */ "19962, 23040, 35784, 24718, 24718, 38781, 24718, 24602, 28063, 35856, 35856, 34856, 25376, 45190",
      /* 10626 */ "45190, 24623, 27923, 29767, 29767, 24642, 42057, 24718, 24718, 24660, 24718, 27013, 35856, 43667",
      /* 10640 */ "39045, 45190, 34502, 33774, 29767, 24680, 37375, 24700, 24718, 18193, 37794, 33406, 38283, 25377",
      /* 10654 */ "24735, 25253, 38090, 24751, 35688, 24718, 39280, 44067, 35856, 24773, 36860, 29767, 37203, 41533",
      /* 10668 */ "44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 19635, 40320, 24792",
      /* 10682 */ "24818, 44068, 37664, 33358, 20352, 25483, 32922, 23139, 24843, 24855, 24718, 24718, 24718, 24718",
      /* 10696 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10710 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10724 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10738 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10752 */ "21520, 24718, 21652, 24718, 24718, 29999, 21748, 24718, 24128, 24718, 24876, 24892, 24897, 24913",
      /* 10766 */ "24924, 24940, 24955, 24967, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718",
      /* 10780 */ "40517, 40515, 24718, 40515, 24983, 34864, 19983, 34508, 29812, 22546, 29556, 24718, 32253, 24999",
      /* 10794 */ "24043, 35834, 24718, 26037, 24718, 30727, 35797, 21440, 22439, 44528, 22846, 25019, 25036, 28265",
      /* 10808 */ "25061, 38157, 23859, 27056, 25096, 44268, 23035, 44203, 24718, 24718, 24718, 25131, 25396, 45483",
      /* 10822 */ "24718, 24718, 24718, 18780, 41289, 35856, 35856, 35856, 22478, 39044, 45190, 45190, 45190, 42249",
      /* 10836 */ "19835, 19630, 29767, 29767, 29767, 25151, 28312, 25169, 21541, 25205, 24718, 34623, 35062, 23631",
      /* 10850 */ "24718, 24718, 19860, 21585, 25226, 40113, 35856, 33630, 44177, 25250, 25270, 45190, 32955, 21621",
      /* 10864 */ "25287, 33496, 29767, 30295, 19962, 23040, 35199, 24718, 24718, 24718, 24718, 25311, 33995, 35856",
      /* 10878 */ "35856, 43081, 35373, 45190, 29972, 45190, 34893, 29767, 43748, 29767, 42057, 35931, 24718, 25333",
      /* 10892 */ "24718, 25350, 29301, 31996, 25372, 42619, 29750, 33774, 42134, 30594, 35683, 24859, 25395, 24718",
      /* 10906 */ "24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 45648, 24718, 44067, 35856, 25412",
      /* 10920 */ "33688, 29767, 23722, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 21916, 25431",
      /* 10934 */ "25454, 25478, 25499, 39532, 32222, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855",
      /* 10948 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10962 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10976 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 10990 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11004 */ "24718, 24718, 24718, 24718, 21520, 24718, 18129, 25538, 24718, 29999, 30182, 25557, 21767, 25577",
      /* 11018 */ "25613, 25652, 25665, 25681, 25692, 25708, 25723, 25735, 18662, 34297, 25751, 25767, 25794, 25838",
      /* 11032 */ "25874, 24085, 26941, 25909, 25932, 25968, 26000, 26025, 45218, 26070, 26086, 26124, 26140, 32599",
      /* 11046 */ "26156, 40444, 26183, 18201, 24043, 26209, 25210, 26235, 24718, 24718, 24201, 24718, 41292, 26267",
      /* 11060 */ "28580, 26320, 26356, 43559, 26394, 42274, 22245, 31869, 26424, 25295, 23035, 44203, 30412, 22585",
      /* 11074 */ "26465, 24386, 26490, 26517, 26550, 26566, 18422, 26582, 26618, 26662, 26686, 26721, 43380, 26737",
      /* 11088 */ "26753, 26776, 26811, 28254, 26859, 26906, 36893, 26957, 26986, 27029, 27072, 27088, 21541, 28349",
      /* 11102 */ "27134, 36746, 41361, 30219, 27151, 41664, 27187, 21585, 40355, 27217, 42879, 27238, 27258, 27280",
      /* 11116 */ "45190, 27672, 34956, 21621, 38934, 27318, 40207, 27339, 27359, 27395, 35199, 20910, 27453, 27469",
      /* 11130 */ "27488, 44328, 27510, 27538, 27576, 27592, 27622, 30943, 32445, 27658, 32509, 26843, 37143, 27708",
      /* 11144 */ "42057, 24718, 35894, 26934, 24718, 17966, 44467, 32785, 39045, 29352, 38528, 33774, 27742, 32557",
      /* 11158 */ "35683, 24859, 27758, 40017, 27774, 27823, 27858, 27874, 27910, 35448, 27946, 27981, 27997, 28044",
      /* 11172 */ "28079, 28212, 26340, 28095, 28130, 28168, 38873, 42843, 28184, 42380, 28273, 43248, 43345, 31975",
      /* 11186 */ "29396, 23344, 28206, 29641, 25080, 26108, 35595, 42992, 41466, 28228, 28289, 28305, 20352, 23869",
      /* 11200 */ "28328, 38028, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11214 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11228 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11242 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11256 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 28365, 24718, 31906",
      /* 11270 */ "24718, 28386, 44754, 28408, 28421, 28437, 21476, 28458, 28469, 28485, 28500, 28512, 18662, 24718",
      /* 11284 */ "18446, 24404, 24717, 24718, 24718, 24718, 24718, 28528, 24718, 28552, 24718, 28548, 28555, 28571",
      /* 11298 */ "43608, 27264, 31299, 22546, 29556, 24718, 21474, 24718, 41182, 24718, 24718, 24718, 24229, 21466",
      /* 11312 */ "24664, 24718, 41292, 28604, 35856, 35856, 23654, 28628, 45190, 45190, 22676, 28647, 29767, 29767",
      /* 11326 */ "23035, 44203, 24718, 24718, 24718, 24718, 24718, 45483, 24718, 24718, 24718, 28667, 41289, 35856",
      /* 11340 */ "35856, 35856, 43874, 39044, 45190, 45190, 45190, 24278, 19835, 19630, 29767, 29767, 29767, 28685",
      /* 11354 */ "28312, 40566, 21541, 24718, 24718, 24718, 24718, 23631, 24718, 35028, 24718, 21585, 35856, 35856",
      /* 11368 */ "42411, 35856, 25378, 45190, 45335, 45190, 45190, 21621, 29767, 29767, 43724, 29767, 19962, 23040",
      /* 11382 */ "35199, 24718, 24718, 24718, 24718, 36073, 28063, 35856, 35856, 36774, 25376, 45190, 45190, 31249",
      /* 11396 */ "27923, 29767, 29767, 28702, 42057, 24718, 24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190",
      /* 11410 */ "45190, 33774, 29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253",
      /* 11424 */ "29767, 29767, 35688, 28723, 24718, 44067, 28742, 42225, 25252, 38927, 38873, 41533, 44067, 25374",
      /* 11438 */ "25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068",
      /* 11452 */ "37664, 33358, 20352, 32929, 28759, 27522, 28784, 24855, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11466 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11480 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11494 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11508 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718",
      /* 11522 */ "24718, 24718, 24718, 29999, 24718, 34550, 24718, 24718, 28835, 28871, 28876, 28892, 28895, 28911",
      /* 11536 */ "28926, 28938, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 36715, 24718, 24718, 24718, 24718",
      /* 11550 */ "24718, 24718, 28669, 35856, 25379, 34508, 29767, 22546, 35662, 28954, 24718, 24718, 24043, 24718",
      /* 11564 */ "24718, 24718, 31089, 24718, 24718, 24718, 26193, 35856, 35856, 35856, 25378, 45190, 45190, 45190",
      /* 11578 */ "26371, 29767, 29767, 29767, 37404, 44203, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 30748",
      /* 11592 */ "24718, 35737, 41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190, 19835, 19630",
      /* 11606 */ "29767, 29767, 29767, 29767, 28312, 22868, 24718, 24718, 24718, 28973, 29266, 36361, 24718, 24718",
      /* 11620 */ "28991, 19351, 35856, 35856, 29026, 35856, 25378, 45190, 28631, 45190, 45190, 32293, 29767, 29767",
      /* 11634 */ "29046, 29767, 20028, 29066, 24859, 24718, 41041, 24718, 24718, 24718, 19350, 35856, 35856, 35856",
      /* 11648 */ "25376, 45190, 45190, 45190, 37893, 29767, 29767, 29767, 37706, 24718, 24718, 29122, 18686, 19349",
      /* 11662 */ "35856, 35856, 29143, 45190, 45190, 29164, 29767, 29767, 29190, 42794, 29211, 29247, 29282, 29299",
      /* 11676 */ "29317, 29344, 26787, 29368, 40271, 43959, 29421, 35828, 42679, 29447, 26633, 29482, 29503, 45012",
      /* 11690 */ "29519, 41852, 31438, 42218, 29548, 29572, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358",
      /* 11704 */ "44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 29623, 37716, 24855, 24718, 24718",
      /* 11718 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11732 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11746 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11760 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11774 */ "24718, 24718, 21520, 24718, 24718, 24718, 24718, 29999, 24718, 24718, 24718, 24718, 17792, 24718",
      /* 11788 */ "24718, 24718, 24718, 34763, 29094, 29106, 29657, 24718, 24718, 34688, 24717, 24718, 24718, 32617",
      /* 11802 */ "24718, 21525, 24718, 24718, 29673, 29696, 28669, 29712, 29732, 25045, 29766, 29784, 29834, 24718",
      /* 11816 */ "24718, 44570, 24043, 29888, 22079, 24718, 21264, 24718, 24718, 24718, 41292, 35856, 35856, 32061",
      /* 11830 */ "25378, 45190, 45190, 29907, 19929, 29767, 29767, 29924, 23035, 44203, 24718, 24718, 24718, 24718",
      /* 11844 */ "24718, 24718, 24718, 24718, 25590, 25851, 41289, 35856, 35856, 35856, 35856, 37830, 45190, 45190",
      /* 11858 */ "45190, 45190, 28114, 19630, 29767, 29767, 29767, 29767, 29942, 22868, 24718, 31083, 24718, 24718",
      /* 11872 */ "24718, 24718, 24718, 24718, 43642, 19351, 40348, 35856, 35856, 35856, 25378, 29971, 45190, 45190",
      /* 11886 */ "45190, 32293, 42741, 29767, 29767, 29767, 20028, 23040, 24859, 24718, 28532, 24718, 24718, 24718",
      /* 11900 */ "19350, 35856, 35856, 38706, 25376, 45190, 45190, 35418, 37893, 29767, 29767, 27302, 37706, 24718",
      /* 11914 */ "24718, 19197, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859",
      /* 11928 */ "24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 20883, 24718, 36523",
      /* 11942 */ "35856, 45187, 25252, 29767, 35168, 41533, 33399, 27842, 26760, 27323, 26439, 35854, 45189, 29768",
      /* 11956 */ "40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028",
      /* 11970 */ "37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11984 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 11998 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12012 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12026 */ "24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 28341, 24718, 29999, 19769, 34306",
      /* 12040 */ "30447, 29988, 30035, 30063, 30068, 30084, 30095, 30111, 30126, 30138, 18662, 24718, 24718, 20557",
      /* 12054 */ "37562, 24718, 24718, 24718, 34557, 21804, 30154, 24175, 30173, 30198, 30235, 27553, 30251, 43568",
      /* 12068 */ "30291, 30311, 30375, 24718, 24718, 27472, 24043, 24718, 30402, 24718, 24718, 24718, 30438, 30471",
      /* 12082 */ "41292, 40473, 32416, 31142, 30491, 30513, 45190, 30529, 19929, 30583, 30610, 30627, 23035, 44203",
      /* 12096 */ "24718, 30643, 30663, 28021, 30682, 35054, 24718, 30721, 30743, 30764, 41289, 28743, 35856, 40120",
      /* 12110 */ "38689, 39486, 44830, 45190, 43001, 33578, 26295, 19630, 35161, 29767, 30784, 43330, 28312, 22868",
      /* 12124 */ "24718, 24718, 24718, 40052, 30828, 30857, 30878, 24718, 24718, 19351, 30896, 35856, 35856, 42874",
      /* 12138 */ "30924, 27686, 45190, 24626, 29487, 32293, 30959, 29767, 29767, 44263, 30997, 31018, 24859, 29010",
      /* 12152 */ "31040, 32751, 31068, 31105, 39636, 35856, 31133, 31158, 31192, 24776, 31235, 31271, 36885, 33650",
      /* 12166 */ "31321, 31356, 35547, 31423, 30647, 30768, 32832, 31454, 31477, 31499, 31535, 31571, 31591, 31648",
      /* 12180 */ "31683, 31701, 31752, 31773, 24718, 40231, 31795, 32882, 34472, 22500, 31818, 31839, 31858, 36663",
      /* 12194 */ "35688, 23905, 35335, 44067, 35856, 45187, 25252, 29767, 38873, 31895, 25356, 30908, 33337, 19936",
      /* 12208 */ "26439, 31922, 45189, 29768, 20313, 32910, 31620, 31940, 44069, 45187, 33356, 44068, 37664, 33358",
      /* 12222 */ "35717, 31966, 32922, 38028, 37213, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12236 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12250 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12264 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12278 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 35207",
      /* 12292 */ "24718, 29999, 24718, 24718, 24718, 24718, 17792, 24718, 24718, 24718, 24718, 34763, 29094, 29106",
      /* 12306 */ "18662, 24718, 24718, 24404, 24717, 24718, 41953, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12320 */ "28669, 35856, 25379, 34508, 29767, 22546, 29556, 24718, 24718, 24718, 24043, 24718, 24718, 24718",
      /* 12334 */ "24718, 24718, 24718, 24718, 41292, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 19929, 29767",
      /* 12348 */ "29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12362 */ "41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190, 19835, 19630, 29767, 29767",
      /* 12376 */ "29767, 29767, 28312, 22868, 24718, 18415, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 19351",
      /* 12390 */ "31991, 35856, 35856, 35856, 44812, 45190, 45190, 45190, 45190, 32293, 32012, 29767, 29767, 29767",
      /* 12404 */ "20028, 23040, 24859, 24718, 24718, 24718, 24718, 24718, 19350, 35856, 35856, 35856, 25376, 45190",
      /* 12418 */ "45190, 45190, 37893, 29767, 29767, 29767, 37706, 24718, 24718, 24718, 24718, 19349, 35856, 35856",
      /* 12432 */ "39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377",
      /* 12446 */ "45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533",
      /* 12460 */ "44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187",
      /* 12474 */ "33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718",
      /* 12488 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12502 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12516 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12530 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12544 */ "21520, 24718, 24718, 44210, 24718, 29999, 24718, 41627, 24718, 43279, 32033, 32083, 32095, 32111",
      /* 12558 */ "32114, 32130, 32145, 32157, 18662, 43050, 24718, 24404, 24717, 32331, 27379, 36715, 24718, 35020",
      /* 12572 */ "24718, 22924, 19115, 39025, 39459, 32173, 42508, 30326, 32189, 29382, 32238, 32269, 24718, 24718",
      /* 12586 */ "32309, 24607, 39298, 24718, 32329, 28370, 27494, 32347, 26219, 31168, 32386, 32778, 32437, 32461",
      /* 12600 */ "39145, 32496, 26826, 32544, 25115, 32585, 45401, 35730, 25003, 24718, 24718, 24718, 24718, 32615",
      /* 12614 */ "24718, 24718, 24718, 24718, 41289, 23481, 19748, 35856, 32633, 32067, 29405, 31555, 45190, 32653",
      /* 12628 */ "34174, 19630, 32672, 43243, 29818, 29767, 32695, 22868, 24718, 24718, 32726, 24718, 36982, 17939",
      /* 12642 */ "24718, 24718, 24718, 19351, 35856, 35856, 31513, 32767, 25378, 45190, 25271, 35134, 42614, 32293",
      /* 12656 */ "29767, 29767, 27959, 32801, 20028, 23040, 24859, 32828, 24718, 33427, 24718, 24718, 19350, 34452",
      /* 12670 */ "35856, 35856, 25376, 31201, 45190, 45190, 37893, 35307, 29767, 29767, 37706, 41137, 32848, 24718",
      /* 12684 */ "41906, 32869, 32898, 35856, 37295, 32945, 45190, 31219, 32981, 29767, 37086, 24859, 33005, 39261",
      /* 12698 */ "24718, 35855, 33025, 25377, 38053, 25253, 45147, 29767, 35688, 43397, 24718, 44067, 35856, 33044",
      /* 12712 */ "42713, 29767, 40411, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044",
      /* 12726 */ "25254, 33358, 44069, 45187, 33356, 21923, 37415, 23026, 33063, 25483, 32922, 33079, 37716, 24855",
      /* 12740 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12754 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12768 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12782 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 12796 */ "24718, 24718, 24718, 24718, 21520, 24718, 24718, 20222, 24718, 29999, 24718, 36698, 24718, 18821",
      /* 12810 */ "17792, 33112, 33123, 33139, 33150, 33166, 33181, 33193, 18662, 22945, 24718, 24404, 24717, 24718",
      /* 12824 */ "33209, 24718, 24718, 36121, 24718, 22943, 20081, 36122, 21238, 34127, 39494, 34508, 33227, 22546",
      /* 12838 */ "29556, 24718, 37580, 24718, 24043, 24718, 33249, 33268, 33288, 24718, 25334, 30157, 41292, 38732",
      /* 12852 */ "27242, 43675, 25378, 33310, 35410, 33328, 19929, 33353, 43144, 43117, 29431, 33374, 33422, 27788",
      /* 12866 */ "25597, 24718, 24718, 24718, 33252, 24718, 24718, 24718, 30047, 42416, 38965, 26333, 35856, 39044",
      /* 12880 */ "37853, 33443, 39105, 45190, 33447, 33463, 33484, 20282, 29767, 29767, 21633, 22868, 24718, 17776",
      /* 12894 */ "36165, 24718, 24718, 33519, 33537, 24718, 24718, 19351, 24438, 33607, 33028, 33627, 25378, 24296",
      /* 12908 */ "45190, 32965, 45190, 32293, 39164, 33646, 29050, 33666, 20028, 23040, 24859, 24718, 24718, 24718",
      /* 12922 */ "24718, 24718, 19350, 35856, 35856, 35856, 25376, 45190, 45190, 45190, 37893, 29767, 29767, 29767",
      /* 12936 */ "37706, 24718, 24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767",
      /* 12950 */ "35683, 30559, 24718, 24718, 24718, 36530, 35856, 25377, 33685, 25253, 39244, 29767, 35688, 24718",
      /* 12964 */ "24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 30341, 35854",
      /* 12978 */ "33704, 44428, 33720, 33749, 33772, 33790, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483",
      /* 12992 */ "32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13006 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13020 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13034 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13048 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 18330, 24718, 34389",
      /* 13062 */ "24718, 41234, 24376, 32739, 33811, 33827, 33852, 33868, 33842, 33881, 33897, 33909, 18662, 20261",
      /* 13076 */ "34026, 21144, 33925, 33941, 24718, 40046, 21673, 36212, 33976, 34011, 36220, 34061, 34098, 34114",
      /* 13090 */ "34152, 34190, 34231, 22546, 29556, 22630, 24718, 24718, 34265, 21002, 24718, 34288, 34322, 34359",
      /* 13104 */ "34378, 34414, 41292, 43867, 34449, 34468, 25378, 34488, 39336, 45190, 19929, 34524, 37333, 29767",
      /* 13118 */ "43185, 34616, 24209, 24718, 18611, 34573, 24718, 24718, 29259, 24718, 24718, 41503, 41289, 27606",
      /* 13132 */ "35856, 35856, 35856, 39044, 36805, 45190, 45190, 45190, 19835, 34590, 32522, 29767, 29767, 29767",
      /* 13146 */ "28312, 22868, 24718, 24718, 24718, 24718, 34639, 24718, 34721, 36355, 34658, 35914, 35856, 35856",
      /* 13160 */ "31519, 43086, 40086, 45190, 45190, 42463, 32473, 39894, 29767, 29767, 33233, 33468, 20028, 23040",
      /* 13174 */ "37506, 34675, 27800, 34715, 34737, 17803, 34753, 43212, 34779, 34825, 25376, 34880, 34919, 34948",
      /* 13188 */ "37893, 34972, 32202, 34988, 29532, 38259, 35011, 41347, 35044, 42565, 38114, 35078, 41990, 33047",
      /* 13202 */ "35116, 35150, 44508, 37924, 35184, 39446, 35223, 24718, 44611, 29637, 35243, 35100, 37038, 35281",
      /* 13216 */ "31685, 35297, 31757, 35331, 22045, 35351, 35389, 35434, 35477, 35505, 35534, 35576, 35611, 35635",
      /* 13230 */ "35654, 35678, 27001, 40834, 23238, 32679, 35704, 35753, 35769, 35813, 35850, 35873, 36928, 44068",
      /* 13244 */ "37664, 33358, 20352, 33795, 43174, 38028, 37716, 35889, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13258 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13272 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13286 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13300 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718",
      /* 13314 */ "24718, 19066, 35910, 29999, 24718, 29004, 35930, 24718, 35947, 35963, 35968, 35984, 35995, 36011",
      /* 13328 */ "36026, 36038, 36054, 36089, 36112, 21029, 32313, 36138, 36162, 34398, 36181, 36203, 36236, 36266",
      /* 13342 */ "36305, 36341, 36250, 36377, 36393, 36409, 36425, 42304, 36455, 24718, 18502, 29680, 36489, 28726",
      /* 13356 */ "24718, 36511, 26871, 24718, 24718, 36546, 41292, 35856, 36566, 36600, 25378, 38839, 34932, 36616",
      /* 13370 */ "19929, 30611, 32812, 36643, 23035, 44203, 24718, 22086, 24718, 41672, 24718, 36679, 36714, 41960",
      /* 13384 */ "36731, 20241, 43531, 37825, 34136, 36768, 35856, 36790, 36835, 36627, 36855, 45190, 36876, 36909",
      /* 13398 */ "38214, 27721, 29767, 31305, 28312, 31024, 36944, 36979, 41129, 36998, 24718, 24718, 24718, 24718",
      /* 13412 */ "21398, 37018, 35856, 32421, 35619, 35856, 25378, 45190, 27636, 37054, 45190, 37074, 29767, 37982",
      /* 13426 */ "32989, 29767, 23458, 37114, 24859, 24718, 41511, 37646, 24718, 24718, 19350, 35856, 35856, 35856",
      /* 13440 */ "26698, 45190, 45190, 45190, 37136, 29767, 29767, 29767, 37159, 24718, 37229, 24718, 24718, 37737",
      /* 13454 */ "35856, 27835, 43841, 45190, 37249, 30497, 29767, 37270, 35683, 34205, 24718, 24718, 24718, 43371",
      /* 13468 */ "37289, 35638, 22754, 25253, 37311, 37332, 29195, 24718, 24718, 44067, 35856, 45187, 25252, 29767",
      /* 13482 */ "38873, 37349, 18025, 38136, 43910, 37370, 34539, 20325, 31384, 37391, 21556, 37431, 37455, 37479",
      /* 13496 */ "44069, 45187, 33356, 44068, 37664, 33358, 20352, 19815, 22704, 38028, 42067, 37502, 24718, 24718",
      /* 13510 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13524 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13538 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13552 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13566 */ "24718, 24718, 21520, 24718, 24718, 24718, 24718, 29999, 24718, 21842, 37522, 33387, 37541, 37578",
      /* 13580 */ "24718, 43432, 19153, 37596, 37611, 37627, 18662, 24718, 20459, 24404, 24717, 24718, 24718, 43635",
      /* 13594 */ "24718, 37643, 24718, 22110, 20460, 24718, 28669, 19898, 37662, 37680, 41762, 22546, 29556, 20610",
      /* 13608 */ "37732, 24718, 24043, 24718, 37753, 37769, 24718, 37789, 24718, 37773, 41292, 44135, 40733, 37810",
      /* 13622 */ "25378, 37846, 37869, 41830, 19929, 37916, 37940, 31667, 40643, 35489, 37956, 34249, 39606, 24718",
      /* 13636 */ "28056, 25182, 24718, 24718, 24718, 24718, 31052, 35856, 35856, 35265, 35856, 39044, 45190, 45190",
      /* 13650 */ "28106, 45190, 36839, 37977, 29767, 37273, 29767, 29767, 32569, 37120, 28152, 24718, 37998, 24718",
      /* 13664 */ "34433, 45237, 27807, 25561, 24718, 38017, 35856, 31176, 35856, 35856, 25378, 45190, 38044, 45190",
      /* 13678 */ "45190, 38078, 29767, 35315, 29767, 29767, 23353, 23040, 24859, 30567, 24718, 24718, 33988, 24718",
      /* 13692 */ "19350, 35856, 35856, 38113, 25376, 45190, 27894, 45190, 37893, 29767, 32528, 29767, 37706, 24718",
      /* 13706 */ "24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859",
      /* 13720 */ "33009, 24718, 40583, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 24491, 24718, 24718, 44067",
      /* 13734 */ "35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 40907, 38130, 38152, 38173",
      /* 13748 */ "40704, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028",
      /* 13762 */ "37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13776 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13790 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13804 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13818 */ "24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718, 24718, 29999, 24718, 24718",
      /* 13832 */ "24718, 24718, 17792, 24718, 24718, 24718, 24718, 34763, 29094, 29106, 18662, 24718, 24718, 24404",
      /* 13846 */ "24717, 24718, 24718, 38193, 24718, 24718, 23072, 23075, 18667, 23069, 27437, 25514, 28243, 34809",
      /* 13860 */ "38211, 38230, 37463, 38256, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 13874 */ "30422, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 27295, 29767, 29767, 29767, 42981, 44203",
      /* 13888 */ "24718, 24718, 43994, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856",
      /* 13902 */ "35856, 39044, 45190, 45190, 45190, 45190, 19835, 19630, 29767, 29767, 29767, 29767, 28312, 22868",
      /* 13916 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 19351, 35856, 35856, 35856, 35856",
      /* 13930 */ "25378, 45190, 45190, 45190, 45190, 32293, 29767, 29767, 29767, 29767, 20028, 23040, 24859, 24718",
      /* 13944 */ "24718, 24718, 24718, 24718, 19350, 35856, 35856, 35856, 25376, 45190, 45190, 45190, 37893, 29767",
      /* 13958 */ "29767, 29767, 37706, 24718, 24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774",
      /* 13972 */ "29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767",
      /* 13986 */ "35688, 24718, 24718, 44067, 38275, 38758, 25252, 27930, 38873, 41533, 44067, 25374, 25254, 24644",
      /* 14000 */ "26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358",
      /* 14014 */ "20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14028 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14042 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14056 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14070 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718",
      /* 14084 */ "41034, 32280, 24718, 24718, 32289, 24718, 38299, 38315, 26009, 38355, 38364, 38380, 38395, 38407",
      /* 14098 */ "18662, 23094, 27118, 24404, 24047, 41493, 39866, 38634, 44736, 26890, 33960, 42188, 38423, 41567",
      /* 14112 */ "38459, 38475, 38505, 38544, 42938, 36439, 38560, 24718, 24718, 24718, 38594, 38195, 38610, 36963",
      /* 14126 */ "24155, 38650, 24718, 28009, 38667, 25020, 38705, 38722, 38755, 32480, 45128, 31606, 19929, 37316",
      /* 14140 */ "27343, 26970, 42159, 38774, 24718, 24718, 24718, 38797, 28442, 24718, 31802, 24718, 38802, 19869",
      /* 14154 */ "41289, 38818, 28588, 35856, 26670, 42335, 38837, 34801, 45190, 24322, 38855, 38889, 44029, 29767",
      /* 14168 */ "44847, 38915, 38950, 22868, 24718, 24718, 29872, 30455, 38986, 24718, 24718, 39002, 39014, 45803",
      /* 14182 */ "39041, 27560, 39061, 35856, 33565, 45190, 39077, 39127, 29908, 45839, 39161, 26378, 39180, 29767",
      /* 14196 */ "31334, 23040, 31002, 24718, 24718, 39196, 38001, 34659, 35588, 23175, 33611, 35856, 25376, 39212",
      /* 14210 */ "39137, 45190, 37893, 39236, 36655, 29767, 35560, 39260, 39277, 39296, 24718, 19349, 39314, 35856",
      /* 14224 */ "40557, 39334, 45190, 36819, 29767, 29767, 39352, 24859, 36066, 24718, 24718, 33093, 35856, 24269",
      /* 14238 */ "45190, 24586, 29767, 29767, 35688, 33272, 24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533",
      /* 14252 */ "44067, 25374, 25254, 24644, 31716, 39373, 39389, 39432, 40775, 39044, 25254, 33358, 39475, 41822",
      /* 14266 */ "39510, 22308, 37664, 33358, 20352, 31879, 30812, 39548, 37716, 24855, 24718, 24718, 24718, 24718",
      /* 14280 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14294 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14308 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14322 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14336 */ "21520, 24718, 24718, 24718, 26474, 41638, 24718, 39587, 39622, 39666, 39697, 39728, 39764, 39779",
      /* 14350 */ "39809, 39793, 39825, 39841, 39857, 24718, 24718, 25916, 24717, 24718, 18841, 24718, 24718, 39890",
      /* 14364 */ "34076, 19302, 20173, 39910, 39917, 39933, 38240, 31255, 42128, 22546, 29556, 39967, 39990, 24718",
      /* 14378 */ "25778, 40010, 24718, 24718, 24718, 22609, 40033, 24718, 40068, 40102, 23166, 35856, 25438, 40136",
      /* 14392 */ "40158, 45190, 23013, 40178, 40202, 29767, 23035, 44203, 41155, 24718, 30666, 25858, 40223, 24718",
      /* 14406 */ "24718, 24718, 24718, 33294, 41289, 29030, 29716, 35856, 35856, 28612, 27692, 39111, 45190, 45190",
      /* 14420 */ "24802, 19630, 40247, 40267, 29767, 45091, 24827, 22868, 24718, 24718, 34336, 40287, 24718, 25189",
      /* 14434 */ "40308, 36096, 21082, 37002, 35856, 35856, 42372, 40336, 35401, 45190, 45190, 40371, 27888, 39994",
      /* 14448 */ "29767, 29767, 32214, 40399, 20028, 30981, 40427, 23898, 37525, 24718, 23804, 18310, 40460, 35856",
      /* 14462 */ "38821, 35365, 25376, 45190, 31210, 40489, 29599, 29767, 38899, 29767, 45388, 24718, 39974, 24718",
      /* 14476 */ "40506, 19349, 35856, 40533, 39045, 40490, 42468, 33774, 40251, 44157, 35683, 24859, 24718, 40582",
      /* 14490 */ "40599, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 40633, 18008, 41204, 40659, 44012, 45187",
      /* 14504 */ "31407, 29767, 40683, 40699, 40720, 40739, 40795, 40755, 40771, 28190, 26705, 40186, 40775, 39044",
      /* 14518 */ "25254, 33358, 22797, 40791, 40811, 40829, 40850, 29607, 40892, 40938, 32922, 38028, 37716, 24855",
      /* 14532 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14546 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14560 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14574 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14588 */ "24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718, 22905, 29999, 24718, 24718, 43032, 22333",
      /* 14602 */ "40963, 40994, 41019, 41057, 41003, 41071, 41087, 41103, 41119, 30880, 41153, 41171, 41250, 23500",
      /* 14616 */ "42535, 24543, 41286, 28855, 41308, 41317, 41333, 21729, 41421, 41437, 22661, 30544, 41453, 30798",
      /* 14630 */ "41482, 18017, 24567, 41527, 41550, 24718, 24718, 41583, 41612, 22381, 27201, 41654, 41688, 32401",
      /* 14644 */ "29328, 41704, 32710, 39220, 41728, 45191, 24469, 41744, 41778, 41794, 41811, 28142, 41846, 41868",
      /* 14658 */ "20835, 18351, 41892, 24718, 24718, 38325, 41405, 41942, 41976, 21605, 38678, 39563, 19614, 39044",
      /* 14672 */ "30263, 38518, 42019, 25415, 31575, 42042, 42083, 42113, 29767, 27734, 20380, 42150, 24718, 34272",
      /* 14686 */ "24718, 31117, 24718, 42175, 27428, 20972, 32853, 19351, 31483, 42204, 35856, 26646, 25378, 39404",
      /* 14700 */ "42241, 45190, 42265, 32293, 27965, 42290, 29767, 19729, 20028, 23040, 22785, 38437, 18166, 19878",
      /* 14714 */ "24718, 18074, 42320, 35257, 42361, 42396, 40667, 42432, 42448, 23200, 26304, 44952, 42484, 23704",
      /* 14728 */ "37706, 42524, 17870, 24718, 42551, 19493, 19700, 42581, 38739, 42599, 45190, 37193, 42635, 29767",
      /* 14742 */ "34603, 24859, 32362, 42672, 24718, 33733, 34847, 42695, 39091, 38062, 42729, 42764, 35688, 42836",
      /* 14756 */ "36278, 42859, 41712, 37183, 42895, 42923, 42968, 43017, 43066, 22982, 43102, 43160, 26439, 35854",
      /* 14770 */ "45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187, 33669, 43201, 43228, 43264, 43315, 43361",
      /* 14784 */ "32922, 38028, 37098, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14798 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14812 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14826 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 14840 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718, 24065, 29999",
      /* 14854 */ "24718, 24718, 43396, 24718, 43413, 43448, 43455, 43471, 43453, 43484, 43500, 43512, 18662, 24718",
      /* 14868 */ "24718, 24404, 43528, 20399, 24718, 24718, 24718, 24718, 20399, 24718, 44335, 24718, 28669, 29457",
      /* 14882 */ "43547, 40383, 43584, 22690, 43624, 19665, 24718, 24718, 24043, 24718, 24718, 21388, 26052, 24718",
      /* 14896 */ "24718, 26045, 41292, 43658, 35856, 35856, 26281, 43691, 45190, 45190, 43709, 43745, 29767, 29767",
      /* 14910 */ "43764, 23286, 43791, 26054, 28812, 24718, 28028, 24718, 34215, 43814, 24718, 30862, 19205, 35856",
      /* 14924 */ "43837, 43857, 40548, 40079, 45190, 43890, 24287, 43906, 26408, 43926, 24757, 26835, 43947, 28651",
      /* 14938 */ "28768, 22868, 24718, 27135, 24718, 43975, 24718, 24718, 24718, 43992, 24718, 19351, 35856, 44010",
      /* 14952 */ "35856, 35856, 25378, 42026, 45190, 45190, 45190, 32293, 29767, 44028, 29767, 29767, 20028, 23040",
      /* 14966 */ "23794, 24718, 44045, 24718, 24718, 24718, 44062, 44085, 35856, 35856, 19789, 45190, 45190, 45190",
      /* 14980 */ "23679, 29767, 29767, 29767, 37706, 44104, 24718, 31340, 24718, 19349, 44125, 35856, 39318, 34166",
      /* 14994 */ "45190, 31842, 44151, 29767, 35683, 20033, 24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253",
      /* 15008 */ "29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533, 44067, 44173",
      /* 15022 */ "44193, 35518, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187, 33356, 44226",
      /* 15036 */ "44248, 34995, 20352, 25483, 28798, 21569, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15050 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15064 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15078 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15092 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718",
      /* 15106 */ "24718, 24718, 24718, 30386, 24718, 44284, 24718, 24718, 44316, 24718, 44351, 44363, 44293, 44382",
      /* 15120 */ "44397, 44409, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15134 */ "24718, 24718, 28669, 34838, 37439, 34508, 44425, 22546, 29556, 24718, 23537, 21172, 24043, 24718",
      /* 15148 */ "24718, 24718, 24718, 24718, 44444, 24718, 41292, 22805, 35856, 44463, 25378, 44483, 43693, 45190",
      /* 15162 */ "19929, 44503, 41795, 29767, 23035, 44203, 24718, 24718, 24718, 24718, 24718, 20918, 24718, 24718",
      /* 15176 */ "45670, 24718, 41289, 35856, 35856, 44524, 35856, 39044, 45190, 45190, 44544, 45190, 19835, 19630",
      /* 15190 */ "29767, 42656, 29767, 29767, 28312, 22868, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15204 */ "24718, 19351, 35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 45190, 32293, 29767, 29767",
      /* 15218 */ "29767, 29767, 20028, 23040, 24859, 24718, 24718, 24718, 24718, 24718, 19350, 35856, 35856, 35856",
      /* 15232 */ "25376, 45190, 45190, 45190, 37893, 29767, 29767, 29767, 37706, 24718, 38651, 24718, 24718, 19349",
      /* 15246 */ "35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859, 39874, 24718, 24718, 35855",
      /* 15260 */ "35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767",
      /* 15274 */ "38873, 41215, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358",
      /* 15288 */ "44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718",
      /* 15302 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15316 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15330 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15344 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15358 */ "24718, 24718, 21520, 24718, 24718, 24718, 24718, 44561, 24718, 18631, 24718, 30841, 44597, 44627",
      /* 15372 */ "24860, 44648, 44677, 44661, 44693, 44709, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718",
      /* 15386 */ "24718, 24718, 24718, 24718, 24718, 24718, 28669, 22456, 25379, 31286, 28707, 31370, 44725, 24718",
      /* 15400 */ "24718, 24718, 24043, 24718, 24718, 24718, 24718, 44770, 24718, 24718, 41292, 35856, 35856, 35856",
      /* 15414 */ "25378, 45190, 45190, 45190, 19929, 29767, 29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718",
      /* 15428 */ "24718, 24718, 24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190",
      /* 15442 */ "45190, 45190, 19835, 19630, 29767, 29767, 29767, 29767, 28312, 22868, 24718, 24718, 24718, 24718",
      /* 15456 */ "24718, 36319, 24718, 24718, 24718, 37233, 35856, 35856, 35856, 35856, 37030, 45190, 45190, 45190",
      /* 15470 */ "45190, 44774, 29767, 29767, 29767, 29767, 20028, 23040, 24859, 24718, 44790, 24718, 24718, 24718",
      /* 15484 */ "19350, 35856, 22973, 35856, 44810, 45190, 44828, 31823, 37893, 29767, 44846, 43931, 37706, 24718",
      /* 15498 */ "24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859",
      /* 15512 */ "24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067",
      /* 15526 */ "35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768",
      /* 15540 */ "40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028",
      /* 15554 */ "37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15568 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15582 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15596 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15610 */ "24718, 24718, 24718, 24718, 24718, 24718, 21724, 24718, 24718, 24718, 24718, 29999, 24718, 24718",
      /* 15624 */ "24718, 24718, 17792, 24718, 24718, 24718, 24718, 44863, 44878, 44890, 18662, 24718, 24718, 24404",
      /* 15638 */ "44906, 24718, 44928, 24718, 24718, 24718, 45597, 45600, 21301, 45594, 40617, 35091, 22556, 34508",
      /* 15652 */ "44949, 22546, 29556, 24718, 24718, 28392, 24043, 17896, 29854, 44968, 24718, 24718, 24718, 24718",
      /* 15666 */ "41292, 35856, 39571, 27222, 25378, 45190, 44987, 35127, 19929, 29767, 45007, 27048, 23035, 45465",
      /* 15680 */ "45028, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 33551, 35856, 35856, 35856",
      /* 15694 */ "35856, 39044, 45190, 45190, 45190, 45190, 40162, 45048, 29767, 29767, 29767, 29767, 31632, 22868",
      /* 15708 */ "24718, 24718, 24718, 24718, 24718, 34045, 24718, 24718, 24718, 19351, 35856, 35856, 45070, 35856",
      /* 15722 */ "25378, 45190, 26795, 45190, 45190, 32293, 29767, 29767, 45090, 29767, 20028, 23040, 24859, 45107",
      /* 15736 */ "24718, 24718, 24718, 24718, 19350, 25522, 35856, 35856, 25376, 45124, 45190, 45190, 37893, 45144",
      /* 15750 */ "29767, 29767, 37706, 24718, 24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774",
      /* 15764 */ "29767, 29767, 35683, 24859, 24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767",
      /* 15778 */ "35688, 24718, 24718, 44067, 35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644",
      /* 15792 */ "26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358",
      /* 15806 */ "20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15820 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15834 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15848 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 15862 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 21520, 24718, 24718, 24718",
      /* 15876 */ "24718, 29999, 24718, 24718, 24718, 24718, 17792, 24718, 24718, 24718, 24718, 34763, 29094, 29106",
      /* 15890 */ "45163, 24718, 24718, 24404, 24717, 24718, 23742, 24718, 24718, 24718, 24718, 36957, 24718, 24718",
      /* 15904 */ "45169, 35856, 45185, 39416, 45420, 42952, 45207, 24718, 38578, 24718, 24043, 24718, 24718, 24718",
      /* 15918 */ "24718, 24718, 24718, 18291, 41292, 35856, 35856, 23763, 25378, 45190, 45190, 30935, 19929, 29767",
      /* 15932 */ "29767, 23713, 23035, 44203, 24718, 45234, 24718, 24718, 24718, 24718, 24718, 24718, 45253, 24718",
      /* 15946 */ "41289, 44088, 35856, 45074, 35856, 39044, 37254, 45190, 23435, 45190, 19835, 19630, 45273, 29767",
      /* 15960 */ "45295, 29767, 28312, 22868, 24718, 24718, 45315, 24718, 24718, 24718, 24718, 24718, 24718, 19351",
      /* 15974 */ "35856, 24260, 35856, 35856, 25378, 44545, 45333, 45190, 45190, 32293, 29767, 42648, 29767, 29767",
      /* 15988 */ "20028, 23040, 24859, 24718, 24718, 24718, 24718, 29863, 19350, 35856, 42583, 35856, 23404, 45190",
      /* 16002 */ "23412, 45190, 45351, 29767, 45359, 29767, 45375, 24718, 24718, 21179, 24718, 19349, 35856, 35856",
      /* 16016 */ "39045, 45190, 45190, 33774, 29767, 29767, 35683, 34246, 24718, 18273, 24718, 21596, 35856, 29148",
      /* 16030 */ "45190, 25253, 45417, 29767, 35688, 24718, 45436, 44067, 23395, 45187, 45453, 45299, 38873, 41533",
      /* 16044 */ "44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044, 25254, 33358, 44069, 45187",
      /* 16058 */ "33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855, 24718, 24718, 24718, 24718",
      /* 16072 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16086 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16100 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16114 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16128 */ "21520, 24718, 24718, 24718, 24718, 29999, 24718, 24718, 24718, 24718, 17792, 45481, 24718, 24718",
      /* 16142 */ "24718, 34763, 29094, 29106, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718",
      /* 16156 */ "24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508, 29767, 22546, 29556, 24718, 24718, 24718",
      /* 16170 */ "24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41292, 35856, 35856, 35856, 25378, 45190",
      /* 16184 */ "45190, 45190, 19929, 29767, 29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16198 */ "24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190, 45190, 45190",
      /* 16212 */ "19835, 19630, 29767, 29767, 29767, 29767, 28312, 22868, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16226 */ "24718, 24718, 24718, 19351, 35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190, 45190, 32293",
      /* 16240 */ "29767, 29767, 29767, 29767, 20028, 23040, 24859, 24718, 24718, 24718, 24718, 24718, 19350, 35856",
      /* 16254 */ "35856, 35856, 25376, 45190, 45190, 45190, 37893, 29767, 29767, 29767, 37706, 24718, 24718, 24718",
      /* 16268 */ "24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859, 24718, 24718",
      /* 16282 */ "24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067, 35856, 45187",
      /* 16296 */ "25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768, 40775, 39044",
      /* 16310 */ "25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028, 37716, 24855",
      /* 16324 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16338 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16352 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16366 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16380 */ "24718, 24718, 24718, 24718, 17773, 24718, 24718, 24718, 24718, 45499, 45565, 45506, 45558, 45526",
      /* 16394 */ "45583, 45567, 41926, 24718, 45551, 45540, 45617, 45629, 18662, 24718, 24718, 24404, 24717, 24718",
      /* 16408 */ "24718, 45645, 24718, 24718, 24718, 24718, 24718, 24718, 28669, 24718, 24718, 43299, 24718, 17753",
      /* 16422 */ "24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16436 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16450 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16464 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16478 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16492 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16506 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16520 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16534 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16548 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718",
      /* 16562 */ "24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16576 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16590 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16604 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16618 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16632 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 24718, 24718, 24718, 24718, 24711",
      /* 16646 */ "24718, 24718, 45664, 24718, 17792, 21057, 21063, 45686, 21062, 45714, 21051, 45698, 18662, 24718",
      /* 16660 */ "24718, 24404, 24717, 24718, 24718, 24718, 24718, 24718, 18801, 24718, 24718, 24718, 28669, 24718",
      /* 16674 */ "24718, 43299, 24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718",
      /* 16688 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16702 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16716 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16730 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16744 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16758 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16772 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16786 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16800 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 41533, 24718, 24718",
      /* 16814 */ "24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16828 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16842 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16856 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16870 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16884 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 17773, 24718",
      /* 16898 */ "24718, 24718, 24718, 37556, 24718, 24718, 24718, 24718, 45747, 45734, 45784, 30016, 30019, 45799",
      /* 16912 */ "30008, 45819, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 45835, 24718, 24718, 24718, 24718",
      /* 16926 */ "24718, 24718, 28669, 24718, 24718, 43299, 24718, 17753, 24718, 24718, 24718, 24718, 24043, 24718",
      /* 16940 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16954 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16968 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16982 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 16996 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17010 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17024 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17038 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17052 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17066 */ "24718, 41533, 24718, 24718, 24718, 24718, 41534, 24718, 24718, 24718, 26443, 24718, 24718, 24718",
      /* 17080 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17094 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17108 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17122 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17136 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17150 */ "24718, 24718, 17773, 24718, 24718, 24718, 24718, 24711, 24718, 24718, 24718, 24718, 17792, 24718",
      /* 17164 */ "24718, 24718, 24718, 24718, 24718, 39712, 18662, 24718, 24718, 24404, 24717, 24718, 24718, 24718",
      /* 17178 */ "24718, 24718, 24718, 24718, 24718, 24718, 28669, 35856, 25379, 34508, 29767, 22546, 25462, 24718",
      /* 17192 */ "24718, 24718, 24043, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 19352, 35856, 35856, 35856",
      /* 17206 */ "25378, 45190, 45190, 45190, 38866, 29767, 29767, 29767, 23035, 44203, 24718, 24718, 24718, 24718",
      /* 17220 */ "24718, 24718, 24718, 24718, 24718, 24718, 41289, 35856, 35856, 35856, 35856, 39044, 45190, 45190",
      /* 17234 */ "45190, 45190, 19835, 19630, 29767, 29767, 29767, 29767, 28312, 22868, 24718, 24718, 24718, 24718",
      /* 17248 */ "24718, 24718, 24718, 24718, 24718, 19351, 35856, 35856, 35856, 35856, 25378, 45190, 45190, 45190",
      /* 17262 */ "45190, 32293, 29767, 29767, 29767, 29767, 20028, 23040, 24859, 24718, 24718, 24718, 24718, 24718",
      /* 17276 */ "19350, 35856, 35856, 35856, 25376, 45190, 45190, 45190, 37893, 29767, 29767, 29767, 37706, 24718",
      /* 17290 */ "24718, 24718, 24718, 19349, 35856, 35856, 39045, 45190, 45190, 33774, 29767, 29767, 35683, 24859",
      /* 17304 */ "24718, 24718, 24718, 35855, 35856, 25377, 45190, 25253, 29767, 29767, 35688, 24718, 24718, 44067",
      /* 17318 */ "35856, 45187, 25252, 29767, 38873, 41533, 44067, 25374, 25254, 24644, 26439, 35854, 45189, 29768",
      /* 17332 */ "40775, 39044, 25254, 33358, 44069, 45187, 33356, 44068, 37664, 33358, 20352, 25483, 32922, 38028",
      /* 17346 */ "37716, 24855, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17360 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17374 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17388 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17402 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17416 */ "18378, 24718, 24718, 45855, 42819, 42820, 42820, 45870, 42809, 45869, 24718, 24718, 24718, 24718",
      /* 17430 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17444 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17458 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17472 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17486 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17500 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17514 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17528 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17542 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17556 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17570 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17584 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17598 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17612 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17626 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17640 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718",
      /* 17654 */ "24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 24718, 1, 12290, 3, 0, 0, 0, 0, 0, 0",
      /* 17673 */ "0, 90398, 90398, 90398, 90398, 0, 94495, 94495, 90398, 90398, 94495, 94495, 94495, 94495, 94495",
      /* 17688 */ "94495, 94495, 94495, 94495, 94495, 94495, 94495, 94495, 94495, 94495, 94495, 94495, 94495, 94495",
      /* 17702 */ "69632, 73728, 94495, 94495, 94495, 94495, 94495, 65536, 94495, 94495, 94495, 94495, 94495, 1, 12290",
      /* 17717 */ "3, 0, 0, 0, 0, 0, 0, 90398, 94495, 288, 94495, 94495, 94495, 0, 90398, 94495, 94495, 94495, 94495",
      /* 17736 */ "94495, 94495, 94495, 94495, 94495, 94495, 94495, 351, 94495, 90398, 94495, 94495, 94495, 94495",
      /* 17750 */ "94495, 94495, 94495, 0, 0, 595, 596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1131, 1, 12290, 3",
      /* 17776 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1907, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0",
      /* 17804 */ "0, 0, 0, 0, 0, 0, 2259, 0, 0, 0, 0, 0, 2263, 0, 0, 445, 445, 111037, 445, 445, 445, 445, 445, 445",
      /* 17828 */ "445, 445, 445, 445, 445, 445, 445, 111037, 111037, 111037, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 17852 */ "1944, 0, 111037, 111037, 111037, 445, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0",
      /* 17877 */ "0, 0, 0, 634880, 0, 0, 0, 0, 0, 0, 0, 595, 596, 0, 999, 0, 0, 0, 999, 0, 0, 0, 0, 0, 0, 0, 1094, 0",
      /* 17905 */ "0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 17934 */ "118784, 288, 0, 292, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1954, 0, 0, 0, 292, 119185",
      /* 17959 */ "73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 2476, 2477, 0, 0, 0, 0, 0, 29201, 29201, 0, 0, 0",
      /* 17985 */ "527, 527, 527, 0, 571, 527, 0, 527, 527, 527, 292, 0, 527, 0, 0, 0, 527, 0, 528, 0, 0, 0, 528, 0, 0",
      /* 18010 */ "0, 0, 0, 0, 0, 978944, 1069056, 0, 0, 0, 0, 0, 0, 0, 1035, 0, 0, 0, 0, 0, 0, 0, 0, 31507, 29201",
      /* 18035 */ "29201, 29201, 29201, 31511, 29201, 29201, 527, 0, 595, 595, 595, 595, 595, 595, 595, 595, 595, 571",
      /* 18053 */ "527, 0, 527, 595, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 33389, 289, 0, 0, 49777, 293, 0, 0, 0, 0, 0",
      /* 18079 */ "0, 0, 0, 0, 0, 0, 0, 528384, 0, 0, 0, 57344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0",
      /* 18109 */ "50147, 596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 288, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18138 */ "0, 0, 0, 0, 0, 0, 314, 0, 571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282624, 0, 0, 595, 0, 0",
      /* 18168 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2222, 0, 2105621, 12290, 3, 0, 0, 283, 0, 0, 0, 0, 283, 0, 0, 0",
      /* 18196 */ "0, 0, 0, 0, 2629, 0, 0, 0, 0, 0, 0, 0, 0, 1066, 0, 0, 1069, 1070, 0, 0, 1073, 122880, 122880",
      /* 18219 */ "122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880",
      /* 18231 */ "122880, 0, 122880, 0, 0, 0, 122880, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 122880",
      /* 18253 */ "122880, 122880, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 122880, 0, 351, 0, 0, 0, 147456, 0, 0, 0, 0",
      /* 18277 */ "0, 0, 0, 0, 0, 0, 0, 0, 630784, 0, 0, 0, 0, 723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18306 */ "311296, 0, 1024, 1028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2264, 0, 0, 0, 1357, 1361, 0, 0, 0",
      /* 18333 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 328, 329, 0, 0, 0, 0, 1445, 1449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18362 */ "0, 679936, 0, 0, 0, 131072, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 106496",
      /* 18386 */ "0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 131072, 0",
      /* 18413 */ "0, 131072, 0, 0, 0, 0, 0, 0, 368640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1597, 0, 0, 1599, 0, 0, 0, 0",
      /* 18439 */ "131072, 0, 0, 131072, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 782336, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18464 */ "131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 0, 0, 0, 0, 131072, 1",
      /* 18479 */ "12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 69632, 73728, 0, 135168, 135168, 0, 0, 65536",
      /* 18501 */ "135168, 0, 0, 0, 0, 0, 0, 1049, 0, 0, 0, 0, 0, 1054, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18529 */ "0, 0, 0, 0, 0, 0, 2453, 0, 135168, 0, 135168, 135168, 135168, 135168, 135168, 135168, 135168",
      /* 18546 */ "135168, 135168, 0, 0, 0, 0, 135168, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 402, 402, 0",
      /* 18571 */ "0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18600 */ "0, 278528, 278528, 278528, 278528, 0, 623, 0, 0, 626, 627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18623 */ "974848, 0, 0, 1522, 0, 0, 996, 997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0, 1, 12290, 3",
      /* 18650 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 289, 0, 0, 292, 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18679 */ "516096, 0, 516096, 0, 0, 293, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2467, 0, 0, 0, 293",
      /* 18705 */ "69632, 139669, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18732 */ "0, 0, 0, 528, 528, 528, 0, 572, 528, 0, 528, 528, 528, 293, 0, 528, 0, 596, 596, 596, 596, 596, 596",
      /* 18755 */ "596, 596, 596, 572, 528, 0, 528, 596, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 33392, 0, 0, 292",
      /* 18779 */ "49780, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 61440, 0, 0, 0, 0, 0, 0, 0",
      /* 18808 */ "0, 0, 0, 0, 0, 1114112, 0, 0, 0, 0, 0, 595, 50150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372, 0, 0, 0",
      /* 18837 */ "0, 0, 0, 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 315392, 0, 0, 0, 0, 572, 0, 0, 0, 0, 0",
      /* 18867 */ "0, 0, 0, 0, 0, 0, 295, 296, 0, 295, 296, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 290",
      /* 18895 */ "0, 0, 290, 290, 143650, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290",
      /* 18915 */ "290, 290, 290, 290, 352, 290, 0, 143650, 290, 290, 290, 290, 290, 290, 290, 290, 143650, 290, 290",
      /* 18934 */ "143650, 290, 290, 290, 290, 290, 290, 143717, 69632, 73728, 290, 290, 143650, 290, 290, 65536, 290",
      /* 18951 */ "290, 290, 290, 290, 290, 290, 143717, 290, 290, 290, 290, 290, 290, 290, 143717, 290, 290, 290, 290",
      /* 18970 */ "290, 143650, 290, 143650, 143650, 143650, 143650, 290, 143650, 143650, 143650, 143650, 1, 12290, 3",
      /* 18985 */ "0, 0, 0, 0, 0, 0, 0, 0, 288, 143650, 143650, 143650, 0, 0, 290, 290, 290, 290, 290, 290, 143650",
      /* 19006 */ "290, 290, 290, 143650, 357, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290",
      /* 19025 */ "290, 290, 143650, 143650, 143650, 143650, 143717, 143717, 143717, 143717, 143717, 143717, 143717",
      /* 19038 */ "143650, 143650, 143650, 143650, 143650, 143650, 143650, 143650, 143650, 143650, 143650, 143650",
      /* 19050 */ "143650, 143650, 143650, 290, 290, 143650, 290, 290, 143650, 143650, 143650, 0, 0, 0, 2200228",
      /* 19065 */ "2200228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330, 155648, 155648, 0, 155648, 155648",
      /* 19087 */ "155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648",
      /* 19099 */ "155648, 155648, 155648, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0",
      /* 19121 */ "0, 0, 0, 0, 0, 0, 644, 0, 644, 0, 155648, 155648, 155648, 155648, 0, 12290, 3, 0, 0, 0, 126976, 0",
      /* 19143 */ "0, 0, 0, 288, 0, 289, 0, 292, 0, 293, 0, 0, 0, 0, 0, 0, 0, 0, 507, 507, 507, 507, 507, 507, 507",
      /* 19168 */ "507, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 437, 0, 0, 0, 69632, 73728, 163840, 0, 0",
      /* 19194 */ "0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 557056, 0, 0, 0, 0, 0, 0, 0, 0, 1622, 0, 0, 0, 1628, 29870, 29201",
      /* 19220 */ "29201, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744",
      /* 19232 */ "159744, 163840, 159744, 159744, 163840, 159744, 159744, 159744, 0, 0, 0, 0, 25149, 0, 0, 0, 0",
      /* 19249 */ "159744, 0, 0, 0, 0, 0, 0, 159744, 0, 159744, 159744, 159744, 159744, 159744, 0, 0, 25149, 25149",
      /* 19267 */ "25149, 25149, 25149, 25149, 25149, 25149, 25149, 25149, 159744, 159744, 159744, 25149, 1, 12290, 3",
      /* 19282 */ "0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 69632, 73728, 167936, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0",
      /* 19309 */ "663552, 0, 0, 316151, 0, 0, 0, 0, 663552, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 167936, 0, 167936, 167936",
      /* 19331 */ "167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936",
      /* 19343 */ "167936, 167936, 0, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 29201",
      /* 19365 */ "29201, 29201, 29201, 167936, 167936, 167936, 167936, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0",
      /* 19386 */ "172032, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 297, 0, 0, 0, 0, 0, 0, 69632, 73728",
      /* 19410 */ "172032, 0, 0, 0, 0, 65536, 0, 172032, 172032, 0, 0, 172032, 172032, 0, 172032, 0, 0, 0, 0, 172032",
      /* 19430 */ "172032, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032",
      /* 19443 */ "172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 19463 */ "0, 0, 135168, 0, 0, 0, 135168, 172032, 172032, 172032, 172032, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 19485 */ "288, 1, 278, 3, 0, 0, 0, 284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1081344, 0, 0, 0, 29201, 29201, 0, 0",
      /* 19511 */ "176128, 0, 0, 0, 0, 0, 0, 176128, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128",
      /* 19528 */ "176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0, 176128, 176128, 176128, 0, 0, 0",
      /* 19543 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 217088, 217088, 217088, 217088, 176128, 176128, 176128",
      /* 19562 */ "176128, 1, 0, 3, 78104, 78104, 86298, 0, 620, 0, 0, 0, 288, 0, 0, 0, 1090, 0, 0, 0, 0, 1095, 0, 0",
      /* 19586 */ "0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 718, 0, 0, 0, 0, 0, 0, 29201, 29903",
      /* 19614 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 19628 */ "30361, 971281, 0, 0, 0, 0, 25941, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 19644 */ "29246, 29246, 2990, 2991, 0, 0, 0, 0, 0, 0, 1898, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1906, 0, 0, 0, 0, 0",
      /* 19670 */ "1033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2826, 0, 0, 0, 0, 0, 29201, 30674, 29201, 29201, 29201, 29201",
      /* 19693 */ "29201, 29201, 29201, 29201, 29201, 29201, 30683, 29201, 29201, 29201, 29201, 29201, 29201, 385553",
      /* 19707 */ "29201, 406033, 29201, 29201, 29201, 29201, 438801, 29201, 29201, 29246, 30796, 29246, 29246, 29246",
      /* 19721 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 30805, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 19735 */ "946750, 29246, 29246, 991806, 29246, 29246, 29246, 29246, 30846, 29246, 29201, 29201, 30962, 29201",
      /* 19749 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30332, 29201",
      /* 19763 */ "29201, 0, 0, 0, 0, 2458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 29201, 29201, 29201",
      /* 19788 */ "31185, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 84241",
      /* 19802 */ "82470, 82470, 82470, 82470, 84471, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 29246",
      /* 19816 */ "29246, 29246, 29246, 29246, 29246, 0, 0, 3087, 0, 3089, 29201, 29201, 29201, 29201, 29201, 82470",
      /* 19832 */ "82470, 82470, 84604, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 19846 */ "82470, 0, 0, 0, 0, 0, 0, 0, 2748, 0, 0, 0, 0, 2753, 0, 0, 0, 0, 0, 0, 0, 0, 573440, 0, 0, 0, 0, 0",
      /* 19874 */ "0, 0, 0, 581632, 0, 0, 0, 0, 0, 0, 0, 0, 618496, 0, 0, 0, 958464, 0, 0, 0, 29201, 29201, 29201",
      /* 19897 */ "31441, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29520",
      /* 19911 */ "29201, 29201, 29201, 29201, 29201, 29201, 84699, 82470, 82470, 84700, 82470, 82470, 82470, 82470",
      /* 19925 */ "82470, 82470, 82470, 84707, 82470, 0, 0, 0, 0, 25941, 29870, 29246, 29246, 29246, 29246, 29246",
      /* 19941 */ "29246, 29246, 29246, 29246, 29246, 31549, 29246, 29246, 29246, 29201, 82470, 29246, 31470, 29246",
      /* 19955 */ "29246, 29246, 29246, 29246, 29246, 29246, 31477, 29246, 29246, 29246, 29246, 29246, 29246, 0, 2179",
      /* 19970 */ "0, 0, 0, 0, 0, 2181, 0, 0, 29201, 29201, 31515, 31516, 31517, 29201, 29201, 29201, 29201, 29201",
      /* 19988 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82816, 82470, 82470, 82470, 82470, 82470",
      /* 20002 */ "82470, 84778, 84779, 84780, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 29246",
      /* 20016 */ "280, 87031, 0, 0, 0, 0, 0, 29246, 29246, 29246, 31730, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 20033 */ "29246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2616, 0, 0, 184917, 184917, 184917, 184917, 184917",
      /* 20056 */ "184917, 184917, 184917, 184917, 0, 0, 0, 0, 184917, 1, 12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0",
      /* 20076 */ "288, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 645, 0, 645, 0, 192958, 192958, 192958",
      /* 20100 */ "192958, 192958, 192958, 192958, 192958, 192958, 192958, 192958, 192958, 192958, 192958, 192958, 0",
      /* 20113 */ "192958, 192958, 0, 0, 0, 192958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233472, 0, 192958",
      /* 20136 */ "192958, 192958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 262144, 192958, 192958",
      /* 20158 */ "192958, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 37155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20186 */ "0, 0, 671, 0, 0, 37258, 37258, 37258, 37258, 37258, 37258, 37258, 37258, 37258, 0, 0, 0, 0, 37258",
      /* 20205 */ "1, 12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 289, 0, 37155, 292, 293, 0, 0, 0, 0, 0, 0, 0",
      /* 20229 */ "0, 0, 0, 0, 326, 0, 0, 0, 0, 0, 0, 1118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 659456, 0, 0, 0",
      /* 20259 */ "0, 1486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 646, 0, 0, 622592, 1783, 0, 0, 0, 25941, 29246, 29246",
      /* 20284 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 668222, 29246, 29246",
      /* 20298 */ "0, 1474, 1892, 0, 0, 0, 0, 1480, 1894, 0, 0, 0, 0, 1486, 1896, 0, 0, 0, 0, 0, 2747, 0, 0, 2946",
      /* 20322 */ "2947, 0, 0, 0, 0, 29201, 29201, 31569, 29201, 29201, 29201, 31573, 29201, 29201, 29201, 29201",
      /* 20338 */ "29201, 31579, 29201, 1617, 1994, 0, 0, 0, 0, 1623, 1996, 0, 0, 0, 0, 29201, 29201, 29201, 29201",
      /* 20357 */ "29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 1777, 2116, 0, 0, 0, 0",
      /* 20374 */ "1783, 2118, 0, 0, 0, 0, 29246, 29246, 29246, 29246, 0, 0, 1867, 0, 0, 0, 1873, 0, 30547, 30548",
      /* 20394 */ "83797, 29201, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 707, 0, 0, 295, 0, 1, 12290",
      /* 20421 */ "3, 0, 0, 619, 0, 0, 0, 0, 0, 288, 289, 151552, 0, 292, 293, 0, 208896, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20447 */ "528, 0, 0, 0, 0, 0, 0, 2200229, 0, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 658, 0, 0, 0, 0",
      /* 20475 */ "0, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 0, 935, 935, 595",
      /* 20496 */ "596, 0, 0, 935, 811, 0, 0, 811, 811, 811, 811, 811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 935, 935",
      /* 20522 */ "935, 935, 935, 935, 935, 935, 935, 935, 935, 0, 0, 0, 0, 935, 935, 935, 935, 935, 0, 0, 0, 0, 0, 0",
      /* 20546 */ "0, 0, 935, 811, 0, 811, 0, 0, 0, 0, 2200229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 673, 674, 0, 351, 351",
      /* 20573 */ "0, 935, 0, 0, 935, 0, 0, 935, 935, 935, 935, 935, 935, 935, 935, 935, 811, 811, 0, 0, 935, 935, 0",
      /* 20596 */ "935, 935, 935, 0, 0, 935, 0, 935, 811, 0, 811, 811, 811, 811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20623 */ "0, 0, 1043, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 0, 0, 0, 0, 811, 811",
      /* 20645 */ "811, 0, 0, 0, 0, 935, 935, 935, 935, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 935, 811, 0, 811, 811, 811",
      /* 20672 */ "811, 0, 0, 0, 0, 935, 935, 935, 935, 0, 0, 811, 935, 935, 0, 0, 0, 0, 935, 811, 0, 811, 811, 0, 0",
      /* 20697 */ "935, 935, 0, 811, 0, 935, 0, 811, 0, 935, 0, 811, 0, 811, 811, 811, 811, 811, 811, 811, 811, 811",
      /* 20719 */ "811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935",
      /* 20743 */ "935, 935, 811, 0, 811, 811, 0, 0, 935, 935, 0, 0, 0, 0, 935, 0, 0, 0, 0, 0, 0, 0, 0, 2747, 0, 0, 0",
      /* 20770 */ "0, 0, 0, 0, 0, 811, 811, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 935, 0, 0, 0",
      /* 20793 */ "0, 0, 935, 935, 935, 935, 935, 935, 0, 0, 0, 0, 0, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811",
      /* 20816 */ "811, 811, 811, 811, 811, 811, 811, 0, 0, 0, 0, 0, 0, 935, 935, 935, 935, 935, 935, 0, 0, 0, 0, 0, 0",
      /* 20841 */ "0, 0, 0, 0, 0, 970752, 0, 0, 0, 0, 935, 0, 811, 0, 935, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20871 */ "736, 0, 0, 0, 0, 217088, 217088, 0, 0, 217088, 217088, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20895 */ "0, 0, 815104, 0, 0, 0, 0, 69632, 73728, 217088, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 729088, 0",
      /* 20919 */ "0, 0, 0, 0, 0, 0, 0, 1557, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 217088, 217088, 217088, 217088",
      /* 20942 */ "217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088",
      /* 20954 */ "217088, 217088, 217088, 217088, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 53248, 0, 0, 0, 0, 0",
      /* 20977 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 991232, 0, 289, 0, 0, 0, 289, 0, 292, 0, 0, 0, 292, 0, 293, 0, 0, 0",
      /* 21005 */ "0, 0, 1092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102, 571, 0, 0, 0, 571, 0, 572, 0, 0, 0, 572, 0, 0, 0, 0, 0",
      /* 21034 */ "0, 0, 987136, 0, 0, 0, 0, 0, 675, 351, 351, 0, 0, 0, 571, 0, 572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21062 */ "1110477, 1110477, 1110477, 1110477, 1110477, 1110477, 1110477, 1110477, 1110477, 1110477, 1110477",
      /* 21073 */ "1110477, 1110477, 1110477, 1110477, 1110477, 0, 221631, 221631, 221631, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21091 */ "0, 0, 0, 0, 0, 983040, 1993, 0, 0, 221782, 221782, 221782, 221782, 221782, 221782, 221782, 221782",
      /* 21108 */ "221782, 221631, 221631, 221631, 221631, 221786, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 595",
      /* 21129 */ "596, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 0, 0, 0, 0, 1110, 0, 0, 0, 0, 0, 0, 0, 0, 670, 0, 0, 0, 0, 0",
      /* 21158 */ "351, 351, 1, 12290, 3, 0, 0, 0, 0, 245760, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 1064, 0, 0, 0, 0, 0",
      /* 21184 */ "0, 0, 0, 0, 524288, 0, 0, 0, 0, 0, 0, 245760, 245760, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21211 */ "0, 2200228, 2200228, 245760, 245760, 245760, 245760, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 289",
      /* 21231 */ "0, 0, 292, 293, 0, 0, 212992, 0, 0, 0, 0, 0, 0, 0, 0, 645, 0, 0, 0, 0, 0, 527, 528, 0, 0, 595, 596",
      /* 21258 */ "0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 1582, 0, 0, 0, 0, 0, 0, 0",
      /* 21288 */ "1, 12290, 3, 0, 0, 0, 0, 0, 249856, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 712, 0",
      /* 21315 */ "772, 0, 250304, 250304, 250304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200229, 151552, 250304",
      /* 21337 */ "250304, 250304, 250304, 1, 12290, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 288, 289, 0, 0, 292, 293, 200704",
      /* 21358 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 295, 296, 0, 0, 0, 0, 1, 12290, 2113815, 0, 0, 0, 0, 0, 0, 285, 0, 0",
      /* 21386 */ "0, 285, 0, 0, 0, 0, 0, 1123, 0, 0, 0, 1127, 0, 0, 0, 0, 0, 0, 0, 1987, 0, 0, 0, 0, 0, 0, 0, 0, 2448",
      /* 21415 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 262144, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 289, 0, 0",
      /* 21442 */ "0, 0, 0, 0, 0, 0, 0, 0, 722051, 0, 0, 0, 0, 307200, 0, 0, 595, 596, 0, 241664, 0, 0, 0, 241664, 0",
      /* 21467 */ "0, 0, 0, 0, 0, 0, 1153, 0, 1045, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 355, 411, 0, 0, 270336",
      /* 21495 */ "270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336, 0, 0, 0, 0, 270336, 1, 12290, 3, 0",
      /* 21512 */ "0, 0, 0, 0, 0, 0, 0, 288, 1, 12290, 3, 78104, 86298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0",
      /* 21540 */ "0, 0, 0, 1892, 0, 0, 0, 0, 0, 1894, 0, 0, 0, 0, 0, 1896, 0, 0, 0, 0, 0, 2747, 0, 2945, 0, 0, 0, 0",
      /* 21568 */ "0, 0, 29201, 29201, 29201, 31777, 82470, 82470, 82470, 85027, 29246, 29246, 29246, 31781, 0, 0",
      /* 21584 */ "29201, 0, 1994, 0, 0, 0, 0, 0, 1996, 0, 0, 0, 0, 29201, 29201, 29201, 29201, 29201, 31324, 29201",
      /* 21604 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 357990, 29201, 29201, 29201, 29201, 30316",
      /* 21618 */ "29201, 29201, 29201, 0, 2116, 0, 0, 0, 0, 0, 2118, 0, 0, 0, 0, 29246, 29246, 29246, 29246, 0, 1865",
      /* 21639 */ "0, 0, 0, 1871, 0, 0, 29246, 29201, 82470, 29201, 0, 0, 2239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21665 */ "312, 313, 0, 0, 0, 0, 0, 2626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 749, 0, 0, 0, 0, 1955, 0, 0, 0, 0",
      /* 21694 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1132, 0, 425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 295, 0, 1",
      /* 21725 */ "12290, 3, 78105, 86298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 766, 0, 0, 323584, 0, 0, 0, 278528, 0, 0",
      /* 21750 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 313, 360, 278528, 278528, 278528, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21776 */ "0, 0, 0, 0, 314, 0, 0, 278528, 278528, 278528, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0",
      /* 21802 */ "0, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 767, 0, 0, 0, 0, 282624, 282624, 0, 282624, 282624",
      /* 21825 */ "282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624",
      /* 21837 */ "282624, 282624, 282624, 282624, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 0, 0, 282624",
      /* 21859 */ "282624, 282624, 282624, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 297, 297, 298, 298, 0, 0, 0, 0, 0",
      /* 21883 */ "297, 395, 298, 0, 0, 0, 0, 0, 297, 0, 297, 298, 0, 297, 297, 298, 0, 0, 298, 400, 0, 69632, 73728",
      /* 21906 */ "0, 0, 0, 0, 0, 65536, 0, 0, 0, 419, 0, 0, 0, 0, 0, 2747, 2944, 0, 0, 0, 0, 0, 0, 0, 29201, 29201",
      /* 21932 */ "29201, 29201, 29201, 29201, 31717, 29201, 31718, 0, 0, 0, 297, 436, 449, 449, 449, 449, 449, 449",
      /* 21950 */ "449, 449, 449, 449, 449, 449, 449, 449, 449, 475, 475, 475, 449, 475, 475, 475, 475, 475, 475, 500",
      /* 21970 */ "511, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 520, 500, 500, 520, 500, 500, 500",
      /* 21990 */ "29202, 29202, 29202, 82471, 29247, 29202, 82471, 29202, 29202, 29202, 82471, 82471, 29202, 82471",
      /* 22004 */ "29247, 29247, 29247, 29247, 29247, 29247, 29247, 29247, 29247, 29247, 29202, 82471, 29202, 29247, 1",
      /* 22019 */ "12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 289, 0, 0, 292, 293, 0, 0, 0, 0, 0, 629, 0, 0",
      /* 22043 */ "631, 632, 0, 0, 0, 0, 0, 2750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1979, 1980, 0, 1982, 0, 0, 351, 0, 0",
      /* 22070 */ "680, 0, 0, 0, 0, 0, 0, 0, 687, 0, 0, 0, 0, 0, 0, 1109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1507, 659456, 0",
      /* 22098 */ "0, 0, 0, 0, 0, 724, 0, 0, 0, 0, 0, 629, 0, 0, 0, 0, 0, 0, 0, 0, 658, 728, 0, 0, 0, 0, 0, 0, 755, 0",
      /* 22128 */ "0, 0, 0, 761, 0, 0, 0, 0, 765, 0, 0, 0, 0, 0, 0, 292, 292, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0",
      /* 22157 */ "713, 0, 769, 0, 0, 0, 0, 631, 0, 0, 0, 0, 0, 796, 765, 0, 0, 0, 0, 0, 0, 784, 0, 0, 0, 0, 769, 0, 0",
      /* 22186 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 655, 0, 0, 0, 803, 804, 765, 765, 0, 0, 0, 0, 765, 713, 765, 0, 527",
      /* 22213 */ "528, 29201, 29201, 29489, 29493, 29201, 29201, 29201, 29201, 29201, 29513, 29201, 29517, 29201",
      /* 22227 */ "29522, 29201, 29525, 29201, 29201, 29538, 29201, 29201, 82470, 82470, 82796, 82800, 82470, 82470",
      /* 22241 */ "82470, 82470, 82470, 82820, 82470, 0, 0, 0, 0, 25941, 29870, 29246, 29246, 29246, 29246, 29246",
      /* 22257 */ "29246, 29246, 29246, 30046, 82824, 82470, 82829, 82470, 82832, 82470, 82470, 82845, 82470, 82470",
      /* 22271 */ "571, 572, 0, 29246, 29246, 29613, 29617, 29246, 29246, 29246, 29246, 29246, 29637, 29246, 29641",
      /* 22286 */ "29246, 29646, 29246, 29649, 29246, 29246, 29662, 82927, 82832, 82470, 82470, 29613, 29683, 29649",
      /* 22300 */ "29246, 29246, 78104, 87031, 0, 0, 1017, 1021, 0, 0, 0, 0, 0, 3040, 0, 29201, 29201, 29201, 29201",
      /* 22319 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 31330, 29201, 0, 1025, 1029, 0, 0, 0",
      /* 22336 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 343, 0, 0, 1088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297",
      /* 22366 */ "298, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1158, 0, 0, 0, 0, 0, 1151, 0, 0, 1035, 0, 0, 0, 1157",
      /* 22394 */ "0, 1159, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 1504, 0, 0, 0, 0",
      /* 22424 */ "0, 0, 0, 0, 0, 0, 0, 790, 0, 0, 0, 0, 0, 0, 1616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29870, 29201, 29201",
      /* 22452 */ "307729, 29201, 29201, 30321, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 22466 */ "29201, 29201, 29201, 29201, 29201, 29531, 29201, 29201, 30350, 29201, 29201, 30353, 29201, 29201",
      /* 22480 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30357, 29201, 29201, 29201, 29201, 29201",
      /* 22494 */ "30362, 29201, 29201, 29201, 29201, 30367, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470",
      /* 22508 */ "82470, 82470, 82470, 332326, 82470, 82470, 82470, 84601, 82470, 83672, 82470, 82470, 83675, 82470",
      /* 22522 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83684, 0, 0, 0, 0, 25941, 29246",
      /* 22538 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 30469, 29246, 29246, 595, 596, 0, 0, 29246, 29201",
      /* 22554 */ "82470, 0, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82810, 82470, 82470",
      /* 22569 */ "82470, 82470, 82470, 29201, 29201, 29201, 83802, 82470, 82470, 82470, 30558, 29246, 29246, 29246, 0",
      /* 22584 */ "1890, 0, 0, 0, 0, 0, 0, 491520, 0, 0, 0, 0, 0, 1508, 0, 0, 1510, 1946, 0, 0, 0, 0, 0, 0, 1560, 0, 0",
      /* 22611 */ "0, 0, 0, 0, 0, 0, 1034, 1154, 0, 0, 0, 0, 0, 0, 0, 1980, 0, 0, 1985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 22640 */ "0, 1039, 1040, 1041, 1042, 0, 29201, 29201, 30700, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 22656 */ "29201, 29201, 29201, 29201, 30712, 29201, 29201, 29201, 29201, 29201, 82470, 324459, 82470, 82470",
      /* 22670 */ "82470, 82470, 82813, 606758, 82819, 713254, 82470, 0, 0, 0, 0, 25941, 29870, 29246, 29246, 29246",
      /* 22686 */ "29246, 29246, 29246, 30044, 29246, 29246, 595, 596, 0, 0, 29246, 29201, 82470, 0, 29201, 29201",
      /* 22702 */ "29201, 29534, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 29246",
      /* 22716 */ "29246, 0, 0, 3103, 29201, 30726, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470",
      /* 22731 */ "82470, 82470, 82470, 82470, 83984, 82470, 82470, 83985, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 22745 */ "83992, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83633, 82470, 82470, 82470, 82470, 82470",
      /* 22759 */ "82470, 82470, 82470, 82470, 82470, 84610, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 30822",
      /* 22773 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30834, 29246, 0, 0, 0",
      /* 22789 */ "0, 0, 0, 0, 0, 0, 0, 2194, 0, 0, 0, 0, 0, 0, 31672, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 22811 */ "29201, 29201, 475665, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29246, 30848, 29246, 29246",
      /* 22825 */ "29246, 29246, 0, 2179, 0, 0, 0, 0, 0, 2181, 0, 0, 0, 0, 0, 1158, 0, 1191, 1195, 0, 29870, 29201",
      /* 22847 */ "29201, 29201, 29201, 29201, 29201, 29908, 29201, 29201, 29201, 29201, 722138, 29201, 29916, 29201",
      /* 22861 */ "29201, 0, 0, 30855, 30856, 84105, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 29246",
      /* 22876 */ "29246, 29246, 29246, 0, 0, 0, 0, 0, 0, 0, 2201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 897024, 0, 0, 0, 0",
      /* 22903 */ "0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 341, 342, 343, 344, 0, 0, 0, 0, 2211, 0, 0, 0, 0, 0, 0, 0",
      /* 22931 */ "0, 0, 0, 0, 0, 0, 644, 0, 0, 0, 0, 2255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 645, 0, 0, 0, 0",
      /* 22961 */ "29201, 29201, 29201, 30948, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30956, 29201, 29201",
      /* 22975 */ "29201, 29201, 29201, 29201, 30965, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 22989 */ "31520, 29201, 29201, 82470, 82470, 389670, 82470, 82470, 82470, 29201, 29201, 29201, 29201, 30986",
      /* 23003 */ "29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 84242, 82470, 0, 0, 0, 0, 25941",
      /* 23019 */ "29870, 29246, 29246, 29246, 29246, 29246, 30043, 29246, 29246, 29246, 29246, 29246, 31731, 29246",
      /* 23033 */ "31732, 29246, 29246, 29246, 0, 0, 0, 0, 0, 29246, 29201, 82470, 29201, 29201, 29201, 29201, 82470",
      /* 23050 */ "82470, 82470, 82470, 29246, 29246, 29246, 0, 0, 0, 2422, 0, 0, 0, 2424, 0, 0, 0, 0, 2427, 0, 0, 0",
      /* 23072 */ "0, 0, 0, 516096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 516096, 0, 0, 0, 0, 2445, 0, 0, 0, 0, 0, 0, 0",
      /* 23101 */ "0, 0, 0, 0, 0, 0, 647, 0, 0, 0, 0, 2456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2468, 2469, 0, 0, 0, 0",
      /* 23131 */ "0, 0, 0, 0, 0, 0, 0, 2480, 0, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 29246, 29246",
      /* 23150 */ "29246, 29246, 3110, 0, 29201, 29201, 29201, 29201, 31171, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 23165 */ "31178, 29201, 29201, 29201, 29201, 29201, 29201, 29909, 29201, 29912, 29201, 29201, 29201, 29201",
      /* 23179 */ "29201, 29201, 29201, 30952, 29201, 29201, 29201, 29201, 30957, 29201, 29201, 29201, 82470, 84457",
      /* 23193 */ "82470, 82470, 82470, 82470, 82470, 82470, 84464, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 23207 */ "82470, 82470, 959014, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 31238, 29246",
      /* 23221 */ "29246, 31241, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31247, 31344, 29201, 29201",
      /* 23235 */ "29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84839",
      /* 23249 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84605, 82470, 82470, 82470, 82470",
      /* 23263 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84007, 82470, 82470, 82470, 82470, 82470",
      /* 23277 */ "82470, 82470, 84617, 82470, 84619, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246",
      /* 23291 */ "29246, 87031, 0, 0, 0, 1473, 0, 0, 0, 1479, 0, 0, 2941, 0, 0, 0, 2747, 0, 0, 0, 0, 2948, 0, 2950, 0",
      /* 23316 */ "29201, 31624, 29201, 31625, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 23330 */ "29201, 82470, 84885, 82470, 0, 0, 0, 0, 25941, 29870, 29246, 29246, 30040, 30041, 29246, 29246",
      /* 23346 */ "29246, 29246, 29246, 29246, 29246, 31604, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 0, 0",
      /* 23361 */ "1867, 0, 0, 0, 0, 0, 1873, 0, 84886, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 23379 */ "82470, 82470, 29246, 31650, 29246, 31651, 0, 0, 0, 0, 2998, 0, 29201, 29201, 29201, 31675, 29201",
      /* 23396 */ "29201, 29201, 29201, 29201, 29201, 29201, 651793, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 23410 */ "29201, 1094161, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 725542, 82470, 82470",
      /* 23424 */ "82470, 82470, 82470, 82470, 29201, 29201, 29201, 82470, 82470, 82470, 84935, 82470, 82470, 82470",
      /* 23438 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 791078, 82470, 82470, 82470, 82470, 29246",
      /* 23452 */ "29246, 29246, 31699, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 0, 0, 0, 2180",
      /* 23468 */ "0, 1447, 0, 0, 0, 2182, 0, 0, 0, 0, 3039, 0, 3041, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 23488 */ "29201, 29201, 30312, 30313, 29201, 29201, 29201, 29201, 30320, 299, 300, 301, 0, 0, 0, 0, 0, 0, 0",
      /* 23507 */ "0, 0, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 408, 0, 65536, 0, 0, 0, 0, 408, 0, 0",
      /* 23534 */ "0, 0, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1053, 0, 0, 0, 0, 437, 437, 408, 437, 437, 437, 437",
      /* 23560 */ "437, 437, 437, 437, 437, 437, 437, 437, 437, 519, 519, 519, 519, 437, 519, 519, 437, 519, 519, 437",
      /* 23580 */ "29203, 29203, 29203, 82472, 29248, 29203, 82472, 29203, 29203, 29203, 82472, 82472, 29203, 82472",
      /* 23594 */ "29248, 29248, 29248, 29248, 29248, 29248, 29248, 29248, 29248, 29248, 29203, 82472, 29203, 29248",
      /* 23608 */ "29275, 82528, 29275, 29285, 1, 12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 1550, 0, 0, 0, 0",
      /* 23629 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1560, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 30363, 29201, 29201, 29201, 29201",
      /* 23653 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 83204",
      /* 23667 */ "82470, 82470, 82470, 83685, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 23681 */ "82470, 0, 0, 0, 0, 29246, 29246, 29246, 29246, 31039, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 23697 */ "29246, 30518, 29246, 29246, 29246, 29246, 30523, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 23711 */ "29246, 959038, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 995902, 29246, 29246, 29246",
      /* 23725 */ "29246, 29246, 29246, 29246, 29246, 1020478, 29201, 29201, 82470, 82470, 29246, 29246, 0, 0, 0, 0",
      /* 23741 */ "2240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 720, 0, 0, 0, 30946, 29201, 29201, 29201, 30949, 29201",
      /* 23764 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 995857, 29201, 29201",
      /* 23778 */ "29201, 84281, 82470, 82470, 2116, 0, 2118, 0, 29246, 29246, 29246, 31038, 29246, 29246, 29246",
      /* 23793 */ "31041, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 2192, 0, 0, 0, 0, 0, 0, 0, 2244, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 23820 */ "31433, 29201, 29201, 31434, 29201, 29201, 29201, 29201, 0, 0, 2996, 0, 0, 0, 29201, 29201, 29201",
      /* 23837 */ "29201, 29201, 29201, 29201, 31678, 29201, 31680, 29201, 31682, 29201, 82470, 82470, 82470, 82470",
      /* 23851 */ "82470, 82470, 82470, 84938, 82470, 84940, 82470, 84942, 82470, 0, 0, 0, 0, 25941, 29870, 29246",
      /* 23867 */ "29246, 307774, 29246, 29246, 29246, 29246, 29246, 29246, 0, 901120, 0, 0, 0, 29201, 31762, 29201",
      /* 23883 */ "29201, 29201, 0, 0, 0, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 0, 0, 0, 0, 0, 0, 700416",
      /* 23905 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 2743, 2744, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 305, 306, 306, 409",
      /* 23930 */ "410, 65536, 417, 410, 418, 420, 409, 418, 0, 302, 418, 438, 450, 450, 450, 450, 450, 450, 450, 450",
      /* 23950 */ "450, 450, 450, 450, 450, 450, 471, 476, 476, 476, 488, 476, 476, 476, 476, 476, 476, 501, 476, 501",
      /* 23970 */ "501, 515, 515, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 501, 516, 516, 501, 516",
      /* 23990 */ "516, 516, 29204, 29204, 29204, 82473, 29249, 29204, 82473, 29204, 29204, 29204, 82473, 82473, 29204",
      /* 24005 */ "82473, 29249, 29249, 29249, 29249, 29249, 29249, 29249, 29249, 29249, 29271, 29272, 82521, 29272",
      /* 24019 */ "29271, 1, 12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 0, 664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 24044 */ "0, 0, 351, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 689, 0, 0, 351, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 24074 */ "0, 0, 0, 0, 0, 345, 346, 0, 0, 0, 711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0, 0, 0, 0, 0, 0",
      /* 24105 */ "678, 0, 0, 0, 0, 0, 678, 0, 0, 0, 527, 528, 82470, 82833, 82470, 82470, 29246, 29246, 29650, 29246",
      /* 24125 */ "29246, 78104, 87031, 0, 0, 0, 0, 0, 0, 313, 385, 0, 0, 0, 313, 0, 0, 0, 0, 0, 0, 0, 351, 351, 0, 0",
      /* 24151 */ "0, 0, 1081, 1044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1145, 0, 0, 0, 1106, 0, 0, 0, 0, 0",
      /* 24180 */ "0, 0, 0, 0, 0, 0, 0, 781, 0, 0, 0, 0, 0, 0, 0, 1135, 0, 0, 0, 0, 1139, 0, 0, 0, 0, 0, 0, 0, 1166, 0",
      /* 24210 */ "0, 0, 0, 0, 0, 0, 0, 1493, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 24241 */ "1142, 0, 0, 0, 0, 0, 0, 0, 1162, 0, 0, 0, 0, 0, 29870, 29201, 29201, 29873, 29874, 29201, 29201",
      /* 24262 */ "29201, 29201, 29201, 497635, 29201, 520721, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 24276 */ "82470, 301684, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 913958, 82470, 82470, 82470",
      /* 24290 */ "82470, 82470, 82470, 82470, 82470, 83664, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 24304 */ "83991, 82470, 82470, 82470, 82470, 83996, 82470, 82470, 82470, 82470, 83215, 82470, 83219, 82470",
      /* 24318 */ "82470, 83223, 82470, 83225, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83678, 82470, 82470",
      /* 24332 */ "82470, 83681, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 30055, 29246, 30059, 29246, 29246",
      /* 24346 */ "30063, 29246, 30065, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31702, 29246, 31704, 29246",
      /* 24360 */ "31706, 29246, 0, 0, 0, 1574, 0, 0, 0, 0, 0, 0, 0, 1583, 0, 1585, 0, 0, 0, 0, 0, 0, 327, 0, 0, 328",
      /* 24386 */ "0, 0, 0, 0, 0, 0, 0, 1529, 0, 0, 0, 0, 0, 1534, 0, 0, 0, 1592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 24416 */ "0, 0, 351, 351, 29201, 29201, 30323, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 24432 */ "29201, 29201, 29201, 30334, 30348, 30349, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 24446 */ "29201, 29201, 29201, 29201, 29201, 29201, 30684, 29201, 82470, 83645, 82470, 82470, 82470, 82470",
      /* 24460 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83656, 82470, 0, 0, 0, 0, 25941, 29870",
      /* 24476 */ "30038, 29246, 29246, 29246, 30042, 29246, 29246, 29246, 29246, 29246, 29246, 31545, 31546, 31547",
      /* 24490 */ "29246, 29246, 29246, 29246, 29246, 29201, 82470, 31402, 29201, 84652, 82470, 31406, 29246, 0, 0, 0",
      /* 24506 */ "0, 83671, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 24521 */ "82470, 82470, 83670, 0, 0, 0, 0, 25941, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 24537 */ "29246, 29246, 30471, 0, 0, 1923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 1949, 0",
      /* 24564 */ "0, 0, 1560, 0, 0, 0, 0, 0, 0, 0, 0, 1051, 0, 0, 0, 0, 0, 0, 0, 82470, 84026, 84027, 82470, 82470",
      /* 24588 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 301711, 29246",
      /* 24602 */ "0, 0, 0, 2256, 2257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1098, 0, 0, 0, 0, 82470, 82470, 84270, 82470",
      /* 24627 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84024",
      /* 24641 */ "82470, 29246, 31068, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 24655 */ "29246, 29246, 29246, 29201, 82470, 0, 0, 0, 2446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1170, 0, 0, 0",
      /* 24680 */ "29246, 29246, 29246, 31251, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 24694 */ "29246, 29246, 29246, 30070, 29246, 29246, 31276, 0, 0, 0, 0, 0, 2609, 0, 0, 0, 2613, 0, 0, 0, 0, 0",
      /* 24716 */ "0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 289, 84602, 82470, 82470, 82470, 82470",
      /* 24740 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84612, 84613, 29246, 29246, 29246",
      /* 24754 */ "29246, 31391, 31392, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30484",
      /* 24768 */ "29246, 29246, 29246, 29246, 29246, 29201, 31450, 29201, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 24782 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84257, 82470, 29201, 29201, 29201, 82470",
      /* 24796 */ "84933, 84934, 82470, 82470, 82470, 84937, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83693",
      /* 24810 */ "82470, 82470, 82470, 82470, 0, 0, 0, 0, 29246, 31697, 31698, 29246, 29246, 29246, 31701, 29246",
      /* 24826 */ "29246, 29246, 29246, 29246, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 30475, 30315, 83637, 29201, 31783, 82470",
      /* 24845 */ "85032, 29246, 31785, 0, 29201, 82470, 29246, 0, 29201, 82470, 29246, 0, 29201, 82470, 29246, 0, 0",
      /* 24862 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 69632, 73728, 0, 0, 0, 360, 0, 65536, 0, 0, 0",
      /* 24890 */ "421, 360, 0, 426, 432, 0, 439, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451",
      /* 24911 */ "451, 477, 477, 477, 489, 477, 477, 477, 477, 477, 477, 502, 477, 502, 502, 502, 502, 502, 502, 502",
      /* 24931 */ "502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 29205, 29205, 29205, 82474, 29250",
      /* 24948 */ "29205, 82474, 29205, 29205, 29205, 82474, 82474, 29205, 82474, 29250, 29250, 29250, 29250, 29250",
      /* 24962 */ "29250, 29250, 29250, 29250, 29250, 29205, 82474, 29205, 29250, 1, 12290, 3, 78104, 78104, 86298, 0",
      /* 24978 */ "0, 0, 0, 0, 288, 773, 0, 0, 0, 0, 0, 0, 0, 0, 773, 0, 0, 0, 0, 527, 528, 1058, 0, 1060, 1061, 0, 0",
      /* 25005 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1496, 1497, 0, 0, 29919, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 25026 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29901, 29942, 29201, 29201, 29201",
      /* 25040 */ "29201, 29201, 82470, 82470, 307750, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82847",
      /* 25054 */ "82470, 571, 572, 0, 29246, 29246, 29246, 82470, 83235, 82470, 82470, 82470, 82470, 722217, 82470",
      /* 25069 */ "83243, 82470, 82470, 83246, 82470, 82470, 82470, 82470, 82470, 82470, 84250, 82470, 82470, 82470",
      /* 25083 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84896, 29246, 29246, 29246, 29246, 29246",
      /* 25097 */ "29246, 30075, 29246, 29246, 29246, 29246, 722305, 29246, 30083, 29246, 29246, 30086, 29246, 29246",
      /* 25111 */ "29246, 29246, 29246, 30100, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 25125 */ "30084, 29246, 29246, 29246, 29246, 29246, 0, 1523, 1524, 1525, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25147 */ "1546, 0, 0, 0, 29246, 30517, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 25163 */ "29246, 29246, 29246, 29246, 29246, 31079, 29201, 29201, 30553, 82470, 82470, 82470, 83805, 29246",
      /* 25177 */ "29246, 29246, 30561, 0, 1890, 0, 0, 0, 0, 0, 0, 929792, 0, 0, 0, 0, 0, 0, 0, 0, 1122, 0, 0, 0, 0, 0",
      /* 25203 */ "0, 0, 0, 0, 0, 0, 1899, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1113, 718, 0, 0, 0, 29201, 29201, 29201",
      /* 25229 */ "30676, 29201, 29201, 29201, 373265, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30311",
      /* 25243 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 373286, 82470, 82470, 82470, 82470, 82470",
      /* 25257 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 83999",
      /* 25271 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 25285 */ "82470, 84011, 29246, 29246, 29246, 30798, 29246, 29246, 29246, 373310, 29246, 29246, 29246, 29246",
      /* 25299 */ "29246, 29246, 29246, 29246, 30104, 29246, 29246, 29246, 29246, 29246, 29246, 30113, 2253, 0, 0, 0",
      /* 25315 */ "0, 2258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 930, 572, 0, 0, 0, 0, 806912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25344 */ "0, 0, 0, 0, 0, 1174, 0, 0, 2471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 29201, 29201, 31509, 29201",
      /* 25369 */ "29201, 29201, 29201, 29201, 31183, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 25383 */ "29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 2617, 0, 0, 0",
      /* 25399 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1549, 29201, 29201, 1020433, 82470, 82470, 82470, 82470, 82470",
      /* 25420 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83683, 971302, 82470, 29201, 29201, 29201",
      /* 25434 */ "29201, 31628, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470",
      /* 25448 */ "82470, 83203, 82470, 82470, 82470, 83207, 82470, 82470, 82470, 84889, 82470, 82470, 82470, 82470",
      /* 25462 */ "82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 29246, 78104, 0, 0, 0, 0, 0, 0, 29246",
      /* 25479 */ "29246, 31654, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 0, 0, 0, 0, 0, 29201, 29201",
      /* 25496 */ "29201, 29201, 29201, 2994, 0, 0, 0, 0, 0, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 25513 */ "31679, 29201, 29201, 29201, 29201, 29201, 516625, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 25527 */ "29201, 29201, 29201, 30953, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 315, 316, 317, 0, 0, 0",
      /* 25544 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1016, 1020, 0, 314, 359, 317, 358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25573 */ "1981, 0, 0, 0, 358, 358, 389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 1077248, 0, 0, 0, 0",
      /* 25601 */ "0, 0, 0, 0, 0, 1519, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 314, 0",
      /* 25629 */ "0, 0, 0, 0, 111037, 111037, 111037, 111037, 111037, 111037, 111037, 111037, 111037, 111037, 111037",
      /* 25644 */ "111037, 111037, 111037, 111037, 445, 111037, 111037, 445, 316, 0, 0, 0, 440, 452, 452, 452, 452",
      /* 25661 */ "452, 452, 452, 452, 452, 452, 452, 465, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 478",
      /* 25681 */ "478, 478, 452, 478, 493, 495, 478, 478, 493, 503, 478, 503, 503, 503, 503, 503, 503, 503, 503, 503",
      /* 25701 */ "503, 503, 503, 521, 503, 503, 521, 503, 503, 503, 29206, 29206, 29206, 82475, 29251, 29206, 82475",
      /* 25718 */ "29206, 29206, 29206, 82475, 82475, 29206, 82475, 29251, 29251, 29251, 29251, 29251, 29251, 29251",
      /* 25732 */ "29251, 29251, 29251, 29206, 82475, 29206, 29251, 1, 12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0",
      /* 25750 */ "288, 0, 0, 651, 652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 661, 662, 663, 0, 0, 0, 667, 0, 0, 0, 0, 0, 0, 0",
      /* 25779 */ "0, 0, 351, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085, 0, 351, 0, 0, 0, 0, 0, 0, 683, 684, 0, 0, 0, 0, 0",
      /* 25808 */ "690, 0, 0, 0, 0, 0, 122880, 0, 122880, 122880, 122880, 122880, 122880, 0, 122880, 122880, 122880, 0",
      /* 25826 */ "2105621, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 694, 0, 696, 0, 0, 0, 0, 0, 0, 0, 704, 0, 0",
      /* 25853 */ "0, 0, 0, 0, 1078856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1531, 0, 1533, 0, 0, 0, 1536, 708, 0, 0, 0, 0, 0, 0",
      /* 25881 */ "0, 0, 718, 0, 0, 0, 0, 0, 0, 0, 1190, 1194, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 217088, 0, 0, 0, 0, 0",
      /* 25908 */ "0, 0, 0, 0, 0, 760, 0, 762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 671, 0, 0, 0, 0, 351, 351, 0, 0, 0, 0",
      /* 25936 */ "589824, 0, 688128, 0, 745472, 0, 0, 0, 0, 688128, 745472, 0, 0, 0, 0, 0, 159744, 159744, 159744",
      /* 25955 */ "159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 0",
      /* 25968 */ "0, 0, 745472, 745472, 688128, 0, 0, 0, 0, 0, 0, 0, 762, 0, 589824, 0, 0, 0, 0, 0, 167936, 167936",
      /* 25990 */ "167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 688861, 0, 0, 0, 0",
      /* 26005 */ "745472, 788, 0, 683, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 335, 788, 788, 792, 0, 0, 762",
      /* 26031 */ "0, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 0, 1124, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 1127, 0, 0, 0, 0, 0, 0, 0",
      /* 26061 */ "0, 0, 0, 0, 0, 0, 0, 1509, 0, 29201, 29201, 29490, 29201, 29496, 29201, 29201, 590353, 29201",
      /* 26079 */ "688970, 29201, 746001, 29201, 29201, 29524, 29527, 29532, 29201, 29539, 29201, 29201, 82470, 82470",
      /* 26093 */ "82797, 82470, 82803, 82470, 82470, 590374, 82470, 689029, 82470, 0, 1358, 1362, 0, 25941, 29870",
      /* 26108 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31661, 0, 0, 0, 0, 483328",
      /* 26124 */ "746022, 82470, 82470, 82831, 82834, 82839, 82470, 82846, 82470, 82470, 571, 572, 0, 29246, 29246",
      /* 26139 */ "29614, 29246, 29620, 29246, 29246, 590398, 29246, 689094, 29246, 746046, 29246, 29246, 29648, 29651",
      /* 26153 */ "29656, 29246, 29663, 82470, 82928, 82839, 82470, 29614, 29246, 29684, 29656, 29246, 78104, 87031, 0",
      /* 26168 */ "0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 135168, 135168, 0, 0, 1046, 0, 0, 0, 0, 0, 0, 1052, 0, 0",
      /* 26195 */ "0, 0, 0, 0, 0, 1192, 1196, 0, 29870, 29201, 29201, 29201, 29201, 29201, 1087, 0, 0, 0, 0, 0, 0, 0",
      /* 26217 */ "0, 1096, 0, 0, 0, 0, 0, 0, 0, 1192, 1196, 0, 29870, 29201, 29872, 29201, 29201, 29201, 1066, 0, 0",
      /* 26238 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1130, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128",
      /* 26260 */ "176128, 176128, 176128, 176128, 176128, 176128, 176128, 29201, 29201, 29201, 29879, 29201, 29201",
      /* 26273 */ "29201, 29201, 29201, 29201, 29893, 29201, 29201, 29897, 29201, 29201, 29201, 29201, 29201, 29949",
      /* 26287 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 83205, 82470, 82470, 82470, 82470, 82470, 83690",
      /* 26301 */ "83692, 82470, 82470, 82470, 82470, 82470, 0, 0, 0, 0, 29246, 31036, 29246, 29246, 29246, 29246",
      /* 26317 */ "29246, 29246, 31042, 29201, 29201, 29921, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 26331 */ "29201, 29937, 29201, 29201, 29201, 29201, 29201, 29201, 668177, 29201, 29201, 29201, 29201, 29201",
      /* 26345 */ "29201, 29201, 29201, 29201, 740052, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 26359 */ "29946, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83206, 82470, 0, 1359",
      /* 26374 */ "1363, 0, 25941, 29870, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30816, 29246",
      /* 26389 */ "29246, 29246, 29246, 29246, 30820, 82470, 82470, 83238, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 26403 */ "82470, 82470, 82470, 82470, 83248, 82470, 82470, 82470, 82470, 82470, 83691, 82470, 82470, 82470",
      /* 26417 */ "82470, 82470, 82470, 0, 0, 0, 1782, 29246, 29246, 29246, 30078, 29246, 29246, 29246, 29246, 29246",
      /* 26433 */ "29246, 29246, 29246, 29246, 29246, 30088, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 2747, 0, 0, 0, 0, 0, 0, 0",
      /* 26456 */ "0, 0, 0, 0, 0, 0, 0, 296, 0, 765952, 1511, 0, 1513, 1514, 0, 0, 0, 1518, 0, 0, 0, 0, 0, 0, 0, 338",
      /* 26482 */ "339, 340, 0, 0, 0, 0, 0, 0, 1537, 0, 1539, 0, 0, 0, 0, 0, 767463, 0, 1544, 0, 0, 0, 0, 0, 0, 351, 0",
      /* 26509 */ "0, 0, 0, 131072, 131072, 131072, 0, 0, 0, 0, 0, 1553, 1554, 0, 0, 0, 0, 0, 0, 1003520, 0, 0, 1560",
      /* 26532 */ "0, 0, 0, 0, 0, 192958, 192958, 192958, 192958, 192958, 192958, 192958, 192958, 192958, 192958",
      /* 26547 */ "192958, 192958, 0, 0, 0, 0, 1562, 1563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1573, 0, 1575, 0, 0, 0, 0, 0",
      /* 26573 */ "0, 0, 0, 0, 0, 1587, 1588, 1589, 1590, 1603, 0, 0, 0, 1607, 888832, 0, 0, 0, 0, 0, 0, 0, 0, 1599, 0",
      /* 26598 */ "0, 0, 0, 0, 221631, 221631, 221631, 221631, 221631, 221631, 221631, 221631, 221631, 221631, 221631",
      /* 26613 */ "221631, 221631, 221631, 221631, 221631, 0, 1615, 0, 352256, 352256, 0, 0, 0, 0, 0, 0, 0, 0, 29870",
      /* 26632 */ "30301, 29201, 29201, 29201, 29201, 29201, 547539, 29201, 29201, 29201, 29201, 846549, 29201, 881169",
      /* 26646 */ "29201, 29201, 29201, 29201, 29201, 29201, 946705, 29201, 29201, 991761, 29201, 29201, 29201, 29201",
      /* 26660 */ "30724, 29201, 30303, 30304, 29201, 30306, 29201, 29201, 29201, 352785, 29201, 29201, 29201, 29201",
      /* 26674 */ "29201, 29201, 29201, 29201, 30356, 29201, 29201, 29201, 30359, 29201, 29201, 29201, 29201, 30322",
      /* 26688 */ "29201, 29201, 29201, 492049, 29201, 29201, 29201, 30329, 29201, 30330, 29201, 29201, 29201, 29201",
      /* 26702 */ "29201, 29201, 30988, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84838, 82470",
      /* 26716 */ "84840, 82470, 82470, 82470, 82470, 29201, 29201, 29201, 30337, 30338, 30340, 29201, 29201, 29201",
      /* 26730 */ "29201, 30343, 767624, 29201, 29201, 30346, 30347, 29201, 29201, 1005212, 29201, 29201, 29201, 29201",
      /* 26744 */ "29201, 29201, 29201, 29201, 29201, 30374, 83623, 82470, 83625, 83626, 82470, 83628, 82470, 82470",
      /* 26758 */ "82470, 352806, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 1008166",
      /* 26772 */ "29246, 29246, 29246, 29246, 83644, 82470, 82470, 82470, 492070, 82470, 82470, 82470, 83651, 82470",
      /* 26786 */ "83652, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 504358, 82470, 82470, 82470, 82470, 82470",
      /* 26800 */ "82470, 82470, 82470, 82470, 82470, 627238, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83659",
      /* 26814 */ "83660, 83662, 82470, 82470, 82470, 82470, 83665, 767698, 82470, 82470, 83668, 83669, 82470, 0, 1359",
      /* 26829 */ "1363, 0, 25941, 29870, 29246, 30039, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30495, 29246",
      /* 26844 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 442942, 29246, 31052, 29246, 29246, 29246, 29246",
      /* 26858 */ "29246, 82470, 1005286, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83696, 0, 0",
      /* 26873 */ "0, 0, 0, 0, 1137, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 659, 0, 0, 0",
      /* 26903 */ "0, 0, 0, 0, 0, 0, 0, 25941, 30461, 29246, 30463, 30464, 29246, 30466, 29246, 29246, 29246, 352830",
      /* 26921 */ "29246, 0, 0, 0, 0, 0, 0, 0, 0, 2747, 0, 0, 2889, 0, 0, 0, 0, 0, 0, 434176, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 26949 */ "0, 746, 0, 0, 0, 752, 753, 0, 30489, 29246, 30490, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 26967 */ "30497, 30498, 30500, 29246, 29246, 29246, 29246, 29246, 30101, 29246, 29246, 29246, 29246, 29246",
      /* 26981 */ "29246, 29246, 30111, 30112, 29246, 29246, 30503, 767784, 29246, 29246, 30506, 30507, 29246, 29246",
      /* 26995 */ "29246, 29246, 29246, 29246, 29246, 30515, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 2747, 0, 2888, 0, 0, 0, 0",
      /* 27017 */ "0, 0, 2475, 0, 0, 2478, 0, 0, 0, 2481, 29201, 29201, 29246, 29246, 938558, 29246, 29246, 29246",
      /* 27035 */ "29246, 29246, 29246, 1005372, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30508, 30509, 29246",
      /* 27049 */ "29246, 29246, 29246, 29246, 29246, 29246, 30103, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 27063 */ "29246, 508478, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30534, 0, 0, 0",
      /* 27079 */ "0, 0, 0, 0, 0, 29246, 29201, 82470, 30347, 29201, 30552, 29201, 83669, 82470, 83804, 82470, 30507",
      /* 27096 */ "29246, 30560, 29246, 0, 1890, 0, 0, 0, 0, 0, 296, 296, 296, 0, 0, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0",
      /* 27122 */ "0, 0, 0, 0, 0, 0, 0, 0, 659, 660, 0, 0, 1909, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1908, 0",
      /* 27152 */ "0, 1957, 0, 0, 1960, 0, 0, 0, 0, 0, 0, 1966, 0, 1968, 0, 0, 0, 0, 0, 245760, 245760, 245760, 245760",
      /* 27175 */ "245760, 245760, 245760, 245760, 245760, 245760, 245760, 245760, 245760, 245760, 245760, 245760, 0",
      /* 27188 */ "1905, 0, 1984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1992, 0, 0, 0, 0, 0, 1165, 0, 0, 0, 0, 0, 1169, 0, 1172",
      /* 27215 */ "0, 1157, 29201, 29201, 30688, 29201, 30690, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 27230 */ "29201, 29201, 29201, 29936, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 909841, 29201, 29201",
      /* 27244 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29915, 29201, 29201, 29201",
      /* 27258 */ "1040913, 29201, 29201, 1061393, 1065489, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 27271 */ "82470, 82470, 82470, 571, 572, 0, 29246, 29608, 29246, 82470, 82470, 82470, 83986, 82470, 83988",
      /* 27286 */ "82470, 82470, 82470, 82470, 82470, 82470, 83995, 82470, 83997, 82470, 0, 1360, 1364, 0, 25941",
      /* 27301 */ "29870, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 967230, 29246, 29246, 29246",
      /* 27315 */ "29246, 29246, 29246, 29246, 29246, 30810, 29246, 30812, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 27329 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 1008190, 29201, 82470, 29246, 29246, 29246, 909886",
      /* 27343 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30087",
      /* 27357 */ "29246, 29246, 1040958, 29246, 29246, 1061438, 1065534, 29246, 0, 2179, 0, 0, 0, 0, 0, 2181, 0, 0, 0",
      /* 27376 */ "0, 0, 1180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 719, 0, 0, 0, 0, 719, 0, 0, 30803, 30681, 83988, 29201",
      /* 27401 */ "30859, 29201, 29201, 82470, 84109, 82470, 82470, 29246, 30863, 29246, 0, 0, 0, 0, 0, 0, 0, 2611, 0",
      /* 27420 */ "0, 0, 0, 0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 0, 0, 466944, 0, 0, 0, 0, 0, 0, 0, 0, 516096, 0, 0",
      /* 27448 */ "0, 0, 0, 527, 528, 0, 1015808, 0, 0, 0, 0, 0, 0, 0, 0, 2218, 0, 0, 0, 0, 2223, 0, 2225, 2226, 0, 0",
      /* 27474 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1071, 1072, 0, 0, 942080, 0, 0, 0, 2242, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 27503 */ "0, 1038, 0, 0, 0, 0, 0, 0, 512000, 0, 0, 0, 0, 0, 0, 839680, 1994, 0, 1996, 0, 29201, 29201, 29201",
      /* 27526 */ "29201, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 0, 0, 451089, 29201, 29201, 336401",
      /* 27541 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 442897, 29201, 29201",
      /* 27555 */ "29201, 29201, 29497, 29201, 29504, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 27569 */ "30694, 29201, 29201, 29201, 29201, 29201, 30698, 30960, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 27583 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 729617, 29201, 29201, 30972, 29201, 29201",
      /* 27597 */ "29201, 868881, 29201, 29201, 29201, 29201, 29201, 29201, 942609, 29201, 29201, 29201, 29201, 29201",
      /* 27611 */ "30308, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30318, 29201, 29201, 29201, 30984",
      /* 27625 */ "29201, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 336422, 82470, 82470, 82470",
      /* 27639 */ "82470, 82470, 84002, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 27653 */ "83680, 82470, 82470, 82470, 82470, 82470, 868902, 82470, 82470, 82470, 82470, 82470, 82470, 942630",
      /* 27667 */ "82470, 82470, 82470, 82470, 84278, 82470, 82470, 82470, 82470, 82470, 84016, 84017, 82470, 82470",
      /* 27681 */ "82470, 82470, 82470, 82470, 909862, 82470, 82470, 82470, 82470, 82470, 83989, 82470, 82470, 82470",
      /* 27695 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83637, 82470, 82470, 82470, 82470, 868926",
      /* 27709 */ "29246, 29246, 29246, 29246, 29246, 29246, 942654, 29246, 29246, 29246, 29246, 31076, 29246, 29246",
      /* 27723 */ "29246, 29246, 29246, 30493, 29246, 29246, 29246, 30496, 29246, 29246, 660030, 29246, 29246, 29246",
      /* 27737 */ "29246, 29246, 30521, 971326, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 434750",
      /* 27751 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 0, 0, 1044480, 0, 0, 0, 0, 0, 0, 2621, 851968",
      /* 27769 */ "2622, 0, 921600, 0, 2624, 0, 0, 675840, 0, 0, 0, 0, 2643, 360448, 0, 647168, 0, 0, 471040, 0, 0, 0",
      /* 27791 */ "0, 0, 1505, 0, 0, 565248, 0, 0, 667648, 0, 0, 0, 0, 0, 0, 2214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1963, 0",
      /* 27818 */ "0, 0, 0, 0, 0, 2648, 29201, 29201, 29201, 29201, 29201, 29201, 360977, 29201, 29201, 29201, 410129",
      /* 27835 */ "29201, 29201, 29201, 29201, 29201, 29201, 31174, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 27849 */ "29201, 29201, 1008145, 82470, 82470, 82470, 82470, 82470, 82470, 31333, 29201, 29201, 29201, 29201",
      /* 27863 */ "29201, 647697, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 31343, 31345, 29201, 29201",
      /* 27877 */ "31347, 29201, 1036817, 1045009, 82470, 82470, 82470, 82470, 82470, 82470, 360998, 82470, 82470",
      /* 27890 */ "82470, 82470, 82470, 84029, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 27904 */ "82470, 84265, 82470, 82470, 82470, 82470, 82470, 410150, 82470, 82470, 82470, 82470, 84608, 82470",
      /* 27918 */ "82470, 82470, 82470, 82470, 647718, 82470, 82470, 82470, 2116, 0, 2118, 0, 29246, 29246, 29246",
      /* 27933 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 31478, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 27947 */ "29246, 29246, 361022, 29246, 29246, 29246, 410174, 29246, 29246, 29246, 29246, 31387, 29246, 29246",
      /* 27961 */ "29246, 29246, 29246, 30826, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 27975 */ "30802, 29246, 29246, 422462, 29246, 29246, 29246, 29246, 647742, 29246, 29246, 29246, 29246, 29246",
      /* 27989 */ "29246, 29246, 29246, 31397, 31399, 29246, 29246, 31401, 29246, 1036862, 1045054, 29246, 29201",
      /* 28002 */ "82470, 29201, 31403, 82470, 84653, 29246, 31407, 0, 0, 0, 0, 0, 0, 1181, 0, 0, 0, 0, 1184, 0, 0, 0",
      /* 28024 */ "0, 0, 0, 1528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1543, 0, 0, 0, 0, 0, 0, 0, 2740, 0, 0, 737280, 0, 0, 0, 0",
      /* 28053 */ "0, 0, 917504, 0, 0, 0, 0, 0, 0, 1541, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1994, 0, 1996, 0, 29201, 29201",
      /* 28078 */ "29201, 0, 0, 327680, 0, 2749, 0, 0, 0, 0, 0, 0, 831488, 0, 0, 708608, 1028096, 29201, 29201, 29201",
      /* 28098 */ "82470, 82470, 328230, 82470, 82470, 82470, 82470, 84703, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 28112 */ "82470, 705062, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 1077798, 82470",
      /* 28126 */ "0, 0, 0, 0, 82470, 82470, 82470, 82470, 740070, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 28142 */ "82470, 82470, 29246, 29246, 29246, 29246, 87031, 0, 0, 1472, 0, 0, 0, 1478, 0, 0, 0, 0, 0, 1484, 0",
      /* 28163 */ "0, 0, 0, 0, 1490, 328254, 29246, 29246, 29246, 29246, 31473, 29246, 29246, 29246, 29246, 29246",
      /* 28179 */ "29246, 29246, 29246, 29246, 740088, 0, 0, 2833, 0, 0, 0, 0, 0, 29201, 29201, 29201, 29201, 29201",
      /* 28197 */ "29201, 29201, 29201, 31575, 29201, 31577, 29201, 29201, 29201, 0, 0, 0, 0, 2943, 2747, 0, 0, 0, 0",
      /* 28216 */ "0, 0, 0, 0, 29201, 29201, 328209, 29201, 29201, 29201, 29201, 31437, 0, 741376, 0, 0, 0, 0, 0",
      /* 28235 */ "31714, 340497, 31715, 29201, 29201, 500241, 29201, 741905, 29201, 29201, 29201, 29201, 29542, 82470",
      /* 28249 */ "82470, 82470, 82470, 82470, 516646, 82470, 82470, 82470, 82470, 82470, 82470, 83677, 82470, 82470",
      /* 28263 */ "82470, 938534, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 508454, 82470, 82470, 82470, 82470",
      /* 28277 */ "82470, 82470, 82470, 82470, 82470, 82470, 84784, 82470, 29246, 29246, 29246, 29246, 29201, 29201",
      /* 28291 */ "29201, 84969, 340518, 84970, 82470, 82470, 500262, 82470, 741926, 82470, 82470, 82470, 82470, 31728",
      /* 28305 */ "340542, 31729, 29246, 29246, 500286, 29246, 741950, 29246, 29246, 29246, 29246, 0, 0, 0, 0, 0, 0, 0",
      /* 28323 */ "0, 29246, 29201, 82470, 29201, 901649, 82470, 85014, 82470, 82470, 82470, 901670, 29246, 31770",
      /* 28337 */ "29246, 29246, 29246, 901694, 0, 0, 0, 0, 0, 320, 321, 322, 0, 0, 0, 0, 0, 0, 0, 0, 1901, 0, 0, 1904",
      /* 28361 */ "1905, 0, 0, 0, 0, 0, 0, 318, 319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1156, 0, 0, 0, 0, 355, 0, 0, 0",
      /* 28390 */ "363, 365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1068, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 28420 */ "0, 0, 0, 399, 69632, 73728, 0, 355, 355, 0, 411, 65536, 355, 411, 411, 0, 319, 411, 0, 0, 411, 411",
      /* 28442 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1545, 0, 0, 0, 0, 485, 485, 490, 485, 494, 485, 485, 485, 494, 411",
      /* 28468 */ "485, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411",
      /* 28488 */ "29207, 29207, 29207, 82476, 29252, 29207, 82476, 29207, 29207, 29207, 82476, 82476, 29207, 82476",
      /* 28502 */ "29252, 29252, 29252, 29252, 29252, 29252, 29252, 29252, 29252, 29252, 29207, 82476, 29207, 29252, 1",
      /* 28517 */ "12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 0, 0, 0, 758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 28544 */ "2220, 0, 0, 0, 0, 0, 0, 758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 758, 0, 0, 0, 0, 0, 0, 527, 528, 29201",
      /* 28572 */ "29484, 29201, 29201, 29201, 29201, 29201, 29201, 614929, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 28586 */ "29201, 29911, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30328, 29201, 29201, 29201",
      /* 28600 */ "29201, 29201, 29201, 29201, 29201, 29877, 29201, 29201, 29201, 29201, 29201, 29889, 29201, 29201",
      /* 28614 */ "29201, 29201, 29201, 29201, 29201, 29201, 30371, 29201, 29201, 29201, 29201, 82470, 82470, 82470",
      /* 28628 */ "82470, 82470, 83216, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 28642 */ "82470, 82470, 84008, 82470, 82470, 29246, 29246, 29246, 30056, 29246, 29246, 29246, 29246, 29246",
      /* 28656 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30529, 29246, 29246, 0, 1604, 0, 0, 0, 0, 0",
      /* 28674 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 527, 528, 913982, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 28694 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 2940, 29246, 29246, 29246, 29246, 31071, 29246",
      /* 28708 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29655, 29246, 29246",
      /* 28722 */ "29246, 0, 0, 2741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1100, 0, 0, 31438, 29201, 29201, 29201",
      /* 28746 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30319, 29201",
      /* 28760 */ "303654, 82470, 82470, 82470, 82470, 82470, 303678, 29246, 29246, 29246, 29246, 29246, 0, 0, 0, 1868",
      /* 28776 */ "0, 0, 0, 1874, 29246, 29201, 82470, 29201, 29201, 451110, 82470, 451134, 29246, 0, 29201, 82470",
      /* 28792 */ "29246, 0, 29201, 82470, 29246, 0, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246",
      /* 28807 */ "29246, 29246, 29246, 29246, 3102, 0, 0, 0, 0, 0, 1515, 1516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46170, 0, 0",
      /* 28831 */ "0, 1118, 1560, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 412, 65536, 0, 412, 412, 0, 0, 0, 0, 0, 1527",
      /* 28855 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 766, 0, 0, 0, 0, 0, 412, 427, 0, 412, 412, 453, 453, 453, 453, 453",
      /* 28881 */ "453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 479, 479, 479, 453, 479, 479, 479, 479, 479, 479",
      /* 28901 */ "479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 29208, 29208, 29208, 82477, 29253",
      /* 28919 */ "29208, 82477, 29208, 29208, 29208, 82477, 82477, 29208, 82477, 29253, 29253, 29253, 29253, 29253",
      /* 28933 */ "29253, 29253, 29253, 29253, 29253, 29208, 82477, 29208, 29253, 1, 12290, 3, 78104, 78104, 86298, 0",
      /* 28949 */ "0, 0, 0, 0, 288, 0, 1026, 1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1114, 0, 0, 0, 1032192, 0, 0",
      /* 28977 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 527, 810, 0, 0, 1952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1991, 0, 0, 0",
      /* 29007 */ "0, 0, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2206, 0, 0, 2208, 0, 2209, 29201, 29201, 29201, 30701",
      /* 29030 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30315, 29201",
      /* 29044 */ "29201, 29201, 29246, 29246, 29246, 30823, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 29058 */ "29246, 29246, 29246, 29246, 29246, 30833, 29246, 29246, 0, 0, 29246, 29201, 82470, 30858, 29201",
      /* 29073 */ "29201, 29201, 84108, 82470, 82470, 82470, 30862, 29246, 29246, 595, 596, 0, 0, 29246, 29201, 82470",
      /* 29089 */ "0, 29201, 29201, 29526, 29201, 29201, 82470, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 29104 */ "29246, 29246, 29201, 82470, 29201, 29246, 1, 12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 0",
      /* 29123 */ "0, 0, 0, 933888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1569, 0, 0, 0, 0, 29201, 29201, 29201, 29201",
      /* 29147 */ "934417, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 84599",
      /* 29161 */ "82470, 82470, 82470, 82470, 82470, 934438, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 29246",
      /* 29175 */ "29246, 29246, 29246, 29246, 29246, 29246, 30522, 29246, 29246, 29246, 29246, 30527, 29246, 29246",
      /* 29189 */ "29246, 934462, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29201, 82470, 29201, 29201",
      /* 29203 */ "82470, 82470, 29246, 29246, 0, 0, 2737, 0, 0, 0, 0, 0, 503808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 999424, 0",
      /* 29227 */ "0, 0, 0, 0, 250304, 250304, 250304, 250304, 250304, 250304, 250304, 250304, 250304, 250304, 250304",
      /* 29242 */ "250304, 250304, 250304, 250304, 250304, 0, 294912, 0, 1024000, 0, 0, 0, 0, 0, 0, 0, 2633, 0, 0, 0",
      /* 29262 */ "0, 0, 0, 1565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1940, 0, 0, 0, 0, 0, 0, 2637, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 29292 */ "0, 0, 0, 0, 0, 0, 1921, 0, 295441, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 29310 */ "29201, 29201, 29201, 29201, 29201, 31167, 29201, 29201, 504337, 29201, 29201, 29201, 29201, 29201",
      /* 29324 */ "29201, 29201, 29201, 811537, 29201, 29201, 29201, 29201, 29201, 29201, 29910, 29201, 29201, 696849",
      /* 29338 */ "29201, 29201, 29201, 29201, 29201, 29918, 29201, 999953, 29201, 29201, 1024529, 29201, 29201",
      /* 29351 */ "295462, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 434726, 82470, 82470",
      /* 29365 */ "82470, 82470, 82470, 811558, 82470, 82470, 82470, 82470, 82470, 82470, 999974, 82470, 82470",
      /* 29378 */ "1024550, 82470, 82470, 295486, 29246, 29246, 595, 596, 0, 0, 29246, 29201, 82470, 0, 29201, 29201",
      /* 29394 */ "29528, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84837, 82470, 82470, 82470",
      /* 29408 */ "82470, 82470, 82470, 82470, 82470, 83634, 83635, 82470, 82470, 82470, 82470, 83642, 82470, 1024574",
      /* 29422 */ "29246, 29246, 29246, 29201, 82470, 29201, 29201, 82470, 82470, 29246, 29246, 0, 0, 0, 0, 0, 30051",
      /* 29439 */ "29884, 83211, 29201, 29201, 30130, 29201, 82470, 82470, 319488, 0, 0, 0, 0, 0, 0, 0, 29201, 320017",
      /* 29457 */ "29201, 29201, 29201, 29201, 29201, 29201, 29507, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 29471 */ "29201, 29201, 31162, 29201, 29201, 31165, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 29485 */ "82470, 320038, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 29499 */ "84034, 82470, 82470, 82470, 547557, 82470, 82470, 82470, 82470, 846567, 82470, 881190, 82470, 82470",
      /* 29513 */ "82470, 82470, 82470, 82470, 29246, 320062, 846585, 29246, 881214, 29246, 29246, 29246, 29246, 29246",
      /* 29527 */ "29246, 29201, 29201, 82470, 82470, 29246, 29246, 0, 0, 0, 0, 29246, 29201, 82470, 29201, 31085",
      /* 29543 */ "82470, 84335, 29246, 31089, 0, 82470, 455206, 82470, 82470, 82470, 82470, 82470, 84781, 82470",
      /* 29557 */ "82470, 82470, 82470, 29246, 29246, 29246, 29246, 29246, 78104, 87031, 0, 0, 0, 0, 0, 29246, 29246",
      /* 29574 */ "29246, 455230, 29246, 29246, 29246, 29246, 29246, 31548, 29246, 29246, 29246, 29246, 29201, 82470",
      /* 29588 */ "82470, 82470, 82470, 82470, 84835, 82470, 82470, 82470, 82470, 82470, 84841, 82470, 82470, 82470, 0",
      /* 29603 */ "1781, 0, 1787, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31733, 29246, 29246",
      /* 29618 */ "417792, 0, 0, 0, 0, 0, 29201, 549393, 848401, 29201, 82470, 549414, 848422, 82470, 29246, 549438",
      /* 29634 */ "848446, 29246, 0, 0, 29201, 29201, 31322, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 29649 */ "29201, 29201, 29201, 29201, 31635, 82470, 82470, 82470, 289, 0, 0, 292, 293, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 29670 */ "0, 0, 633, 0, 0, 0, 735, 0, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1067, 0, 0, 0, 0, 0, 0, 735, 735, 0",
      /* 29699 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 735, 0, 801, 29201, 29201, 29201, 29494, 29201, 29201, 29201, 29201",
      /* 29720 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30331, 29201, 29201, 29201, 29201, 29201",
      /* 29734 */ "29201, 29540, 29201, 82470, 82470, 82470, 82801, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 29748 */ "82470, 84019, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 807462, 82470, 82470",
      /* 29762 */ "82470, 82470, 82470, 84469, 29618, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 29776 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 0, 29664, 29246, 595, 596, 0, 0, 29618, 29494",
      /* 29792 */ "82801, 0, 29201, 29201, 29201, 29201, 29540, 82470, 82470, 82470, 82470, 82833, 82470, 82470, 82470",
      /* 29807 */ "82470, 82470, 571, 572, 0, 29246, 29246, 29246, 29246, 29246, 29633, 29246, 29246, 29246, 29246",
      /* 29822 */ "29246, 29246, 29246, 29246, 29246, 29246, 30511, 29246, 29246, 29246, 29246, 29246, 82470, 82470",
      /* 29836 */ "82470, 82847, 29246, 29246, 29246, 29246, 29664, 78104, 87031, 0, 0, 0, 0, 0, 0, 351, 0, 294, 0, 0",
      /* 29856 */ "0, 0, 0, 0, 0, 0, 684032, 0, 0, 0, 0, 0, 0, 0, 0, 724992, 0, 0, 0, 0, 0, 0, 0, 0, 802816, 1915",
      /* 29882 */ "1916, 1917, 0, 0, 0, 0, 0, 0, 1089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1129, 0, 0, 83255, 82470",
      /* 29909 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 29923 */ "84035, 29246, 30095, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 29937 */ "29246, 29246, 29246, 29246, 31261, 29246, 29246, 1077822, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 29246",
      /* 29955 */ "29201, 82470, 29201, 29246, 1, 12290, 3, 78104, 78442, 86298, 0, 0, 0, 0, 0, 288, 365094, 82470",
      /* 29973 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 29987 */ "84268, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 351, 0, 86298, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30016 */ "1118208, 1118208, 0, 1118208, 1118208, 1118208, 1118208, 1118208, 1118208, 1118208, 1118208",
      /* 30027 */ "1118208, 1118208, 1118208, 1118208, 1118208, 1118208, 1118208, 1118208, 0, 320, 0, 69632, 73728, 0",
      /* 30041 */ "406, 406, 0, 0, 65536, 406, 0, 0, 0, 0, 0, 0, 1619, 0, 0, 0, 1625, 0, 0, 29870, 29201, 29201, 0",
      /* 30064 */ "428, 0, 0, 321, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 472, 480, 480",
      /* 30085 */ "480, 472, 480, 480, 480, 480, 480, 480, 504, 480, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513",
      /* 30105 */ "513, 513, 522, 513, 513, 522, 513, 513, 513, 29209, 29209, 29209, 82478, 29254, 29209, 82478, 29209",
      /* 30122 */ "29209, 29209, 82478, 82478, 29209, 82478, 29254, 29254, 29254, 29254, 29254, 29254, 29254, 29254",
      /* 30136 */ "29254, 29254, 29209, 82478, 29209, 29254, 1, 12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 0",
      /* 30155 */ "0, 771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1186, 0, 0, 0, 0, 0, 785, 0, 0, 785, 0, 771, 0, 0, 0",
      /* 30185 */ "0, 0, 0, 0, 358, 0, 0, 359, 0, 0, 0, 0, 0, 785, 785, 0, 0, 0, 771, 0, 0, 0, 0, 0, 0, 798, 767, 0, 0",
      /* 30214 */ "0, 0, 0, 1555, 0, 0, 0, 0, 0, 0, 0, 0, 1560, 0, 0, 0, 0, 0, 0, 0, 1060864, 0, 798, 0, 0, 0, 0, 0, 0",
      /* 30243 */ "0, 0, 0, 0, 0, 798, 527, 528, 29201, 29201, 29201, 29541, 29201, 82470, 82470, 82470, 82470, 82804",
      /* 30261 */ "82470, 82811, 82470, 82470, 82470, 82470, 82470, 82470, 358064, 82470, 82470, 82470, 82470, 83638",
      /* 30275 */ "82470, 82470, 82470, 82470, 82470, 82470, 899378, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 30289 */ "82470, 84280, 29246, 29621, 29246, 29628, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 30303 */ "29246, 29246, 29246, 29246, 29246, 30845, 29246, 30847, 29665, 29246, 595, 596, 0, 0, 29246, 29201",
      /* 30319 */ "82470, 0, 29201, 29201, 29201, 29677, 29541, 82470, 82470, 82470, 82470, 82835, 82470, 82470, 82470",
      /* 30334 */ "82470, 82470, 571, 572, 0, 29246, 29609, 29246, 0, 0, 0, 0, 0, 0, 0, 2885, 2747, 0, 0, 0, 0, 0, 0",
      /* 30357 */ "0, 1517, 0, 0, 0, 0, 0, 0, 0, 0, 700, 0, 0, 703, 0, 0, 0, 0, 82470, 82470, 82929, 82848, 29246",
      /* 30380 */ "29246, 29246, 29685, 29665, 78104, 87031, 0, 0, 0, 0, 0, 0, 351, 0, 86298, 0, 0, 0, 0, 0, 0, 356, 0",
      /* 30403 */ "1104, 0, 0, 0, 0, 0, 0, 0, 1111, 0, 0, 0, 0, 0, 0, 0, 1492, 0, 352256, 0, 0, 0, 0, 0, 0, 0, 1193",
      /* 30430 */ "1197, 0, 29870, 29201, 29201, 29201, 29201, 29201, 0, 0, 0, 0, 1163, 0, 0, 0, 1167, 0, 0, 0, 0, 0",
      /* 30452 */ "0, 0, 386, 0, 0, 0, 0, 0, 0, 0, 0, 1927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1178, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30483 */ "0, 0, 0, 0, 2249, 0, 0, 0, 29201, 29201, 29201, 29947, 29201, 29201, 82470, 82470, 82470, 82470",
      /* 30501 */ "82470, 82470, 82470, 82470, 82470, 82470, 29246, 31231, 29246, 29246, 29246, 29246, 83209, 82470",
      /* 30515 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 83226, 82470, 82470, 82470, 82470, 82470, 83233",
      /* 30529 */ "82470, 82470, 83258, 82470, 82470, 83262, 82470, 82470, 82470, 82470, 83267, 82470, 82470, 82470",
      /* 30543 */ "83274, 82470, 82470, 82470, 82470, 82837, 82470, 82470, 82470, 82470, 82470, 571, 572, 0, 29246",
      /* 30558 */ "324524, 29246, 0, 0, 0, 0, 0, 0, 2610, 0, 0, 0, 0, 0, 0, 0, 0, 2205, 0, 0, 0, 0, 0, 0, 0, 29246",
      /* 30584 */ "30049, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30066, 29246, 29246, 29246, 29246",
      /* 30598 */ "29246, 29246, 29246, 807486, 29246, 29246, 29246, 29246, 29246, 31259, 29246, 29246, 30073, 29246",
      /* 30612 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 30626 */ "30072, 29246, 29246, 29246, 30098, 29246, 29246, 30102, 29246, 29246, 29246, 29246, 30107, 29246",
      /* 30640 */ "29246, 29246, 30114, 0, 0, 0, 1503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2440, 2441, 0, 0, 0, 0",
      /* 30665 */ "1512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1520, 0, 0, 0, 1538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30695 */ "0, 1548, 0, 0, 0, 0, 0, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528",
      /* 30711 */ "278528, 278528, 278528, 278528, 278528, 278528, 0, 278528, 278528, 0, 0, 0, 1576, 1577, 0, 1579, 0",
      /* 30728 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1155, 0, 0, 0, 0, 307200, 0, 0, 1593, 0, 1594, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30757 */ "0, 0, 1586, 0, 0, 0, 0, 0, 0, 0, 1606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2451, 0, 0, 0, 30501",
      /* 30785 */ "29246, 29246, 29246, 30505, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30514, 29246",
      /* 30799 */ "29246, 595, 596, 0, 0, 29246, 29201, 82470, 0, 29201, 29201, 29530, 29201, 29201, 82470, 82470",
      /* 30815 */ "82470, 82470, 85017, 82470, 29246, 29246, 29246, 29246, 31773, 29246, 0, 430080, 0, 0, 0, 0, 1935",
      /* 30832 */ "0, 0, 0, 0, 0, 0, 0, 0, 1942, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0, 347, 0, 0, 348, 0, 0, 0, 0, 0",
      /* 30861 */ "1950, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1611, 0, 0, 0, 0, 0, 1956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30891 */ "0, 0, 0, 648, 0, 30673, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30682",
      /* 30908 */ "29201, 29201, 29201, 29201, 29201, 29201, 31519, 29201, 29201, 29201, 82470, 82470, 82470, 84772",
      /* 30922 */ "82470, 82470, 29201, 29201, 30727, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 83980, 82470",
      /* 30936 */ "82470, 82470, 82470, 82470, 82470, 82470, 995878, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 30950 */ "82470, 82470, 442918, 82470, 84254, 82470, 82470, 82470, 82470, 30795, 29246, 29246, 29246, 29246",
      /* 30964 */ "29246, 29246, 29246, 29246, 29246, 29246, 30804, 29246, 29246, 29246, 29246, 1863, 0, 0, 0, 1869, 0",
      /* 30981 */ "0, 0, 29246, 29201, 82470, 29201, 29201, 983569, 1090065, 82470, 82470, 983590, 1090086, 29246",
      /* 30995 */ "29246, 983614, 29246, 29246, 30849, 29246, 29246, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2196",
      /* 31016 */ "2197, 0, 0, 0, 30804, 30682, 83989, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 29246",
      /* 31032 */ "29246, 29246, 29246, 0, 0, 0, 1891, 0, 0, 0, 0, 0, 2212, 0, 0, 2215, 0, 0, 0, 2219, 0, 0, 0, 0, 0",
      /* 31057 */ "0, 1620, 0, 0, 0, 1626, 0, 0, 29870, 29201, 29201, 2238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2247, 2248, 0",
      /* 31081 */ "0, 2251, 0, 0, 0, 0, 0, 364544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1140, 0, 0, 0, 0, 0, 0, 2254, 0, 0, 0",
      /* 31110 */ "0, 0, 0, 0, 0, 0, 2262, 0, 0, 0, 0, 0, 0, 1925, 0, 0, 0, 0, 946176, 540672, 0, 1931, 692224, 29201",
      /* 31134 */ "29201, 29201, 30963, 29201, 29201, 29201, 29201, 30967, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 31148 */ "29201, 29931, 29201, 29201, 29935, 29201, 29201, 29201, 29201, 29940, 29201, 29201, 30973, 29201",
      /* 31162 */ "29201, 29201, 29201, 29201, 29201, 30978, 29201, 29201, 29201, 29201, 29201, 29201, 29883, 29890",
      /* 31176 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30693, 29201, 29201, 29201, 30696, 29201",
      /* 31190 */ "598545, 29201, 30982, 29201, 29201, 30985, 29201, 29201, 29201, 29201, 84237, 82470, 82470, 82470",
      /* 31204 */ "82470, 82470, 82470, 82470, 82470, 84252, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 31218 */ "84264, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84477, 82470, 29246, 29246, 29246",
      /* 31232 */ "29246, 29246, 29246, 82470, 82470, 82470, 84261, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 31246 */ "82470, 82470, 84267, 82470, 82470, 82470, 82470, 82470, 84273, 82470, 82470, 82470, 82470, 82470",
      /* 31260 */ "82470, 82470, 82470, 82470, 82470, 571, 572, 0, 29246, 316331, 29246, 82470, 82470, 82470, 82470",
      /* 31275 */ "84272, 82470, 82470, 82470, 82470, 82470, 82470, 84276, 82470, 82470, 84279, 82470, 82470, 82470",
      /* 31289 */ "82470, 82838, 82470, 82470, 82470, 82470, 82470, 571, 572, 0, 29246, 29246, 29246, 29246, 29246",
      /* 31304 */ "614974, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30525, 29246, 29246",
      /* 31318 */ "29246, 29246, 29246, 29246, 29246, 31059, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 31332 */ "29246, 31065, 29246, 29246, 29246, 29246, 29246, 30850, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2449, 0, 0, 0",
      /* 31354 */ "0, 2454, 29246, 29246, 29246, 31070, 29246, 29246, 29246, 29246, 29246, 29246, 31074, 29246, 29246",
      /* 31369 */ "31077, 29246, 29246, 595, 596, 0, 0, 29246, 29201, 82470, 0, 29201, 29201, 29531, 29201, 29201",
      /* 31385 */ "82470, 82470, 84832, 82470, 82470, 82470, 84836, 82470, 82470, 82470, 82470, 82470, 84842, 82470",
      /* 31399 */ "82470, 82470, 82470, 82470, 84448, 82470, 82470, 84451, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 31413 */ "82470, 82470, 82470, 893478, 82470, 82470, 82470, 82470, 29246, 29246, 0, 2420, 0, 0, 0, 0, 0, 0, 0",
      /* 31432 */ "0, 0, 2426, 0, 0, 2429, 0, 0, 0, 0, 0, 454656, 0, 0, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 31452 */ "29201, 455185, 0, 2470, 0, 2472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 29201, 29201, 29201, 31716",
      /* 31473 */ "29201, 29201, 29201, 29201, 31156, 29201, 29201, 29201, 29201, 31161, 29201, 29201, 29201, 29201",
      /* 31487 */ "29201, 29201, 29201, 29201, 29201, 29201, 30680, 29201, 29201, 422417, 29201, 29201, 29201, 29201",
      /* 31501 */ "29201, 29201, 31172, 31173, 29201, 29201, 31176, 29201, 29201, 29201, 29201, 31180, 29201, 29201",
      /* 31515 */ "29201, 29201, 29201, 30704, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 31529 */ "30708, 29201, 29201, 29201, 29201, 29201, 31182, 29201, 31184, 29201, 29201, 29201, 31187, 29201",
      /* 31543 */ "29201, 29201, 29201, 29201, 82470, 82470, 84442, 82470, 82470, 82470, 82470, 83260, 82470, 82470",
      /* 31557 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83654, 82470, 82470, 82470",
      /* 31571 */ "82470, 82470, 82470, 84447, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 31585 */ "82470, 82470, 0, 0, 1781, 0, 82470, 82470, 84458, 84459, 82470, 82470, 84462, 82470, 82470, 82470",
      /* 31601 */ "82470, 84466, 82470, 82470, 84468, 82470, 82470, 82470, 82470, 83261, 82470, 82470, 82470, 82470",
      /* 31615 */ "82470, 82470, 82470, 83271, 83272, 82470, 82470, 82470, 82470, 82470, 84891, 82470, 84893, 84894",
      /* 31629 */ "82470, 84895, 82470, 29246, 29246, 29246, 29246, 1864, 0, 0, 0, 1870, 0, 0, 0, 29246, 29201, 82470",
      /* 31647 */ "29201, 84470, 82470, 82470, 82470, 84473, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 31232",
      /* 31661 */ "29246, 29246, 29246, 29246, 29246, 31048, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 31675 */ "29246, 29246, 30106, 29246, 29246, 29246, 29246, 29246, 29246, 31237, 29246, 29246, 29246, 29246",
      /* 31689 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31388, 31248, 31249",
      /* 31703 */ "29246, 29246, 31252, 29246, 29246, 29246, 29246, 31256, 29246, 29246, 31258, 29246, 31260, 29246, 0",
      /* 31718 */ "0, 0, 2883, 0, 0, 0, 0, 2747, 0, 0, 0, 2890, 0, 0, 0, 0, 0, 2213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 571",
      /* 31747 */ "933, 0, 0, 0, 0, 29246, 29246, 31263, 29246, 29246, 29246, 29246, 29246, 29246, 29201, 82470, 29201",
      /* 31764 */ "29201, 82470, 82470, 29246, 29246, 0, 376832, 0, 2738, 29246, 331776, 0, 0, 2607, 2608, 0, 0, 0, 0",
      /* 31783 */ "0, 0, 0, 0, 0, 0, 1494, 1495, 0, 0, 0, 0, 0, 2638, 0, 0, 0, 0, 2642, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 31811 */ "1568, 0, 0, 1570, 0, 0, 0, 82470, 82470, 82470, 82470, 84606, 82470, 82470, 82470, 82470, 82470",
      /* 31828 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 84277, 82470, 82470, 82470, 82470, 82470, 84615",
      /* 31842 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 31233",
      /* 31856 */ "29246, 29246, 29246, 332350, 29246, 29246, 29246, 31380, 29246, 29246, 29246, 29246, 31385, 29246",
      /* 31870 */ "29246, 29246, 29246, 29246, 29246, 30060, 29246, 29246, 30064, 29246, 29246, 29246, 29246, 29246",
      /* 31884 */ "29246, 3086, 0, 0, 0, 0, 29201, 29201, 29201, 29201, 31765, 0, 0, 2819, 0, 0, 2822, 0, 0, 0, 0",
      /* 31905 */ "2747, 0, 0, 0, 0, 0, 0, 351, 0, 86298, 0, 0, 0, 0, 0, 355, 0, 0, 2894, 29201, 29201, 29201, 29201",
      /* 31928 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 31342, 29201, 29246, 29246",
      /* 31942 */ "29246, 29246, 31656, 29246, 31658, 31659, 29246, 31660, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 31963 */ "2615, 0, 0, 29246, 29246, 31754, 31755, 29246, 29246, 0, 0, 0, 0, 0, 29201, 29201, 29201, 29201",
      /* 31981 */ "29201, 29201, 29201, 31574, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 31995 */ "344593, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 807441, 29201",
      /* 32009 */ "29201, 29201, 29201, 29246, 29246, 29246, 29246, 344638, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 32023 */ "29246, 29246, 29246, 29246, 29246, 29246, 31054, 29246, 29246, 29246, 0, 0, 0, 69632, 73728, 0, 0",
      /* 32040 */ "0, 0, 413, 65536, 0, 413, 413, 0, 0, 0, 0, 0, 1617, 0, 0, 0, 1623, 0, 0, 0, 29870, 29201, 29201",
      /* 32063 */ "29201, 29201, 29201, 29928, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 32077 */ "30373, 29201, 29201, 82470, 82470, 82470, 413, 0, 433, 413, 413, 455, 455, 455, 462, 455, 455, 455",
      /* 32095 */ "455, 455, 455, 455, 462, 455, 455, 455, 455, 455, 455, 455, 455, 469, 455, 481, 481, 481, 455, 481",
      /* 32115 */ "481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 524, 29210",
      /* 32134 */ "29210, 29210, 82479, 29255, 29210, 82479, 29210, 29210, 29210, 82479, 82479, 29210, 82479, 29255",
      /* 32148 */ "29255, 29255, 29255, 29255, 29255, 29255, 29255, 29255, 29255, 29210, 82479, 29210, 29255, 1, 12290",
      /* 32163 */ "3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 29201, 29485, 29201, 29201, 29201, 29499, 29201, 29201",
      /* 32181 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29528, 29246, 29246, 29623, 29246, 29246, 29246",
      /* 32195 */ "29246, 29246, 29246, 29246, 29246, 29246, 29652, 29246, 29246, 29246, 29246, 29246, 31060, 29246",
      /* 32209 */ "29246, 29246, 29246, 29246, 795198, 29246, 29246, 29246, 29246, 29246, 29246, 30827, 770622, 29246",
      /* 32223 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 31703, 29246, 29246, 29246, 29246, 0, 0, 0, 82470",
      /* 32239 */ "82835, 82470, 82470, 29246, 29246, 29652, 29246, 29246, 280, 87031, 0, 0, 1018, 1022, 0, 0, 0, 0, 0",
      /* 32258 */ "507904, 0, 0, 0, 0, 0, 0, 0, 1055, 0, 1057, 0, 1026, 1030, 0, 0, 0, 0, 0, 0, 1037, 1038, 0, 0, 0, 0",
      /* 32284 */ "0, 0, 351, 0, 86298, 0, 0, 0, 335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29246, 29246, 29246, 29246",
      /* 32309 */ "1074, 0, 0, 351, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 0, 0, 1038, 1037, 0, 0, 0, 0, 0, 0",
      /* 32337 */ "0, 0, 0, 0, 0, 0, 0, 0, 706, 0, 0, 0, 0, 0, 1038, 0, 0, 1182, 1037, 0, 0, 0, 0, 0, 290816, 0, 0, 0",
      /* 32365 */ "0, 0, 593920, 0, 2619, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 29902, 29201, 29201",
      /* 32389 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29917, 29201, 29201",
      /* 32403 */ "29201, 29201, 29881, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29900, 29201",
      /* 32417 */ "29201, 29201, 29201, 29906, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 32431 */ "29201, 30695, 29201, 29201, 29201, 29201, 29201, 29943, 29201, 29201, 29201, 29201, 82470, 83199",
      /* 32445 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 729638, 82470, 82470, 84266",
      /* 32459 */ "82470, 82470, 82470, 83210, 83217, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83229",
      /* 32473 */ "82470, 82470, 82470, 82470, 82470, 82470, 1012262, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 32487 */ "82470, 82470, 82470, 83228, 553510, 82470, 82470, 82470, 82470, 82470, 83257, 82470, 82470, 82470",
      /* 32501 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 83270, 82470, 82470, 82470, 2116, 0, 2118, 0",
      /* 32516 */ "29246, 29246, 29246, 29246, 29246, 336446, 29246, 29246, 29246, 29246, 29246, 30478, 29246, 29246",
      /* 32530 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31063, 29246, 29246, 29246, 29246, 29246",
      /* 32544 */ "29246, 29246, 30050, 30057, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30069, 29246",
      /* 32558 */ "29246, 29246, 29246, 29246, 31253, 29246, 29246, 29246, 29246, 29246, 873022, 29246, 29246, 29246",
      /* 32572 */ "29246, 0, 1866, 0, 0, 0, 1872, 0, 0, 29246, 29201, 82470, 29201, 29246, 29246, 30097, 29246, 29246",
      /* 32590 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30110, 29246, 29246, 595, 596, 0, 0, 29246",
      /* 32606 */ "29201, 82470, 0, 29490, 29201, 29676, 29532, 29201, 82797, 0, 1551, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 32628 */ "0, 0, 0, 735, 0, 29201, 29201, 29201, 30351, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 32645 */ "29201, 29201, 29201, 29201, 30358, 29201, 29201, 29201, 82470, 82470, 83673, 82470, 82470, 82470",
      /* 32659 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84256, 82470, 82470, 30472",
      /* 32673 */ "30473, 29246, 29246, 29246, 29246, 30480, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 32687 */ "29246, 31606, 29246, 29246, 29246, 29246, 29246, 0, 29246, 30533, 29246, 29246, 0, 0, 0, 0, 0, 0, 0",
      /* 32706 */ "0, 29246, 29201, 82470, 29201, 29201, 29201, 29201, 29948, 29201, 83198, 82470, 82470, 82470, 83202",
      /* 32721 */ "82470, 82470, 82470, 82470, 83208, 0, 0, 0, 1911, 1912, 0, 0, 0, 0, 0, 0, 0, 1918, 0, 0, 0, 0, 0",
      /* 32744 */ "373, 0, 0, 0, 0, 0, 373, 0, 0, 0, 0, 0, 0, 2230, 0, 0, 0, 0, 0, 0, 0, 2236, 0, 30714, 29201, 29201",
      /* 32770 */ "29201, 29201, 30718, 29201, 29201, 29201, 29201, 30721, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 32784 */ "29930, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 31177, 29201, 29201, 29201",
      /* 32798 */ "29201, 29201, 872977, 30836, 29246, 29246, 29246, 29246, 30840, 29246, 29246, 29246, 29246, 30843",
      /* 32812 */ "29246, 29246, 29246, 29246, 29246, 29246, 30080, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 32826 */ "30089, 29246, 0, 0, 0, 2202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2465, 0, 0, 0, 0, 0, 0, 0, 2435, 0",
      /* 32854 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1990, 0, 0, 0, 0, 0, 0, 0, 0, 2473, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29201",
      /* 32884 */ "29201, 29201, 29201, 332305, 29201, 29201, 29201, 31326, 29201, 29201, 29201, 29201, 31331, 29201",
      /* 32898 */ "29201, 29201, 29201, 29201, 31160, 29201, 29201, 29201, 29201, 29201, 29201, 31166, 29201, 29201",
      /* 32912 */ "29201, 29201, 29201, 29201, 31630, 29201, 31632, 31633, 29201, 31634, 29201, 82470, 82470, 82470",
      /* 32926 */ "82470, 82470, 82470, 29246, 29246, 29246, 29246, 29246, 29246, 0, 0, 0, 0, 0, 303633, 29201, 29201",
      /* 32943 */ "29201, 29201, 82470, 82470, 84446, 82470, 82470, 82470, 82470, 82470, 82470, 84452, 82470, 82470",
      /* 32957 */ "82470, 82470, 82470, 82470, 82470, 84030, 82470, 84032, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 32971 */ "82470, 84018, 82470, 82470, 82470, 82470, 84023, 82470, 82470, 82470, 31236, 29246, 29246, 29246",
      /* 32985 */ "29246, 29246, 29246, 31242, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30828, 29246",
      /* 32999 */ "29246, 29246, 29246, 29246, 29246, 29246, 0, 0, 0, 536576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2623",
      /* 33022 */ "0, 0, 0, 29201, 29201, 537105, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 33038 */ "29201, 29201, 29201, 30711, 29201, 29201, 31449, 29201, 29201, 82470, 82470, 82470, 82470, 82470",
      /* 33052 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84454, 82470, 82470, 0, 31740, 29201, 29201",
      /* 33067 */ "29201, 29201, 29201, 29201, 84994, 82470, 82470, 82470, 82470, 82470, 82470, 31752, 0, 31776, 29201",
      /* 33082 */ "29201, 29201, 85026, 82470, 82470, 82470, 31780, 29246, 29246, 29246, 0, 0, 29201, 301657, 29201",
      /* 33097 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 84884, 82470",
      /* 33111 */ "82470, 0, 429, 0, 0, 441, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 466, 456, 456, 456",
      /* 33132 */ "456, 456, 456, 456, 456, 456, 441, 441, 441, 456, 441, 441, 441, 441, 441, 441, 505, 441, 505, 505",
      /* 33152 */ "505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 29211, 29211",
      /* 33171 */ "29211, 82480, 29256, 29211, 82480, 29211, 29211, 29211, 82480, 82480, 29211, 82480, 29256, 29256",
      /* 33185 */ "29256, 29256, 29256, 29256, 29256, 29256, 29256, 29256, 29211, 82480, 29211, 29256, 1, 12290, 3",
      /* 33200 */ "78104, 78442, 86298, 0, 0, 0, 0, 0, 288, 0, 709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 807, 528",
      /* 33227 */ "29246, 29246, 29624, 29246, 29246, 29634, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 33241 */ "29246, 29246, 30830, 29246, 29246, 29246, 29246, 29246, 0, 0, 1105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 33263 */ "0, 0, 1571, 0, 0, 0, 0, 0, 1120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2745, 0, 0, 0, 0, 0, 0, 1134",
      /* 33292 */ "0, 1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1499, 0, 0, 0, 0, 0, 82470, 83211, 82470, 82470, 82470",
      /* 33315 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 31469, 29246, 82470",
      /* 33329 */ "82470, 82470, 83259, 82470, 82470, 82470, 82470, 83265, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 33343 */ "82470, 82470, 84782, 82470, 82470, 82470, 29246, 29246, 29246, 31539, 29246, 29246, 30051, 29246",
      /* 33357 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 0, 0, 0, 0, 0",
      /* 33374 */ "83382, 82470, 29246, 29246, 30138, 29246, 87031, 0, 1470, 0, 0, 0, 1476, 0, 0, 0, 0, 0, 392, 0, 0",
      /* 33395 */ "0, 0, 0, 392, 0, 0, 0, 0, 0, 0, 2834, 0, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 33415 */ "29201, 31327, 29201, 29201, 29201, 29201, 29201, 1482, 0, 0, 0, 1488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 33437 */ "0, 2234, 0, 0, 0, 0, 82470, 82470, 82470, 83647, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 33454 */ "82470, 82470, 82470, 82470, 82470, 0, 1779, 0, 0, 0, 1785, 0, 0, 25941, 29246, 29246, 29246, 29246",
      /* 33472 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 1012286, 29246, 29246, 29246, 29246, 29246",
      /* 33486 */ "30474, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30485, 29246, 29246, 29246, 29246",
      /* 33500 */ "29246, 29246, 30814, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30510, 29246",
      /* 33514 */ "29246, 30513, 29246, 29246, 29246, 0, 1947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 808, 809, 0",
      /* 33538 */ "0, 0, 1958, 0, 0, 1961, 1962, 0, 0, 0, 0, 0, 1967, 0, 0, 0, 0, 0, 1618, 0, 0, 0, 1624, 0, 0, 0",
      /* 33564 */ "29870, 29201, 29201, 29201, 29201, 29201, 30728, 287270, 82470, 82470, 82470, 82470, 82470, 83982",
      /* 33578 */ "82470, 82470, 82470, 82470, 82470, 83676, 82470, 82470, 82470, 82470, 82470, 82470, 83682, 82470",
      /* 33592 */ "82470, 82470, 2116, 0, 2118, 0, 29246, 29246, 29246, 29246, 29246, 29246, 31040, 29246, 29246",
      /* 33607 */ "29201, 29201, 29201, 30689, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 33621 */ "29201, 29201, 30969, 29201, 29201, 29201, 29201, 29201, 30716, 29201, 29201, 29201, 29201, 29201",
      /* 33635 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30723, 29201, 30725, 29246, 29246, 29246",
      /* 33649 */ "30811, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 33663 */ "31055, 29246, 29246, 29246, 29246, 30838, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 33677 */ "29246, 29246, 29246, 29246, 29246, 0, 0, 425984, 82470, 82470, 84603, 82470, 82470, 82470, 82470",
      /* 33692 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 1020454, 29246, 29246, 31581, 82470",
      /* 33706 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84844, 0",
      /* 33721 */ "0, 2942, 0, 0, 2747, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 29201, 29201, 31323, 29201, 29201, 29201, 29201",
      /* 33742 */ "29201, 29201, 29201, 29201, 29201, 29201, 481892, 29201, 29201, 31626, 29201, 29201, 29201, 29201",
      /* 33756 */ "29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 83981, 82470, 82470",
      /* 33770 */ "82470, 82470, 82470, 84887, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 33784 */ "29246, 29246, 29246, 29246, 29246, 29246, 31652, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 33798 */ "29246, 29246, 29246, 0, 0, 0, 0, 0, 29201, 29201, 31763, 31764, 29201, 373, 0, 0, 69632, 73728, 0",
      /* 33817 */ "0, 0, 0, 0, 65536, 0, 0, 0, 422, 327, 0, 0, 434, 0, 0, 457, 457, 457, 457, 457, 457, 457, 457, 457",
      /* 33841 */ "463, 457, 457, 467, 457, 457, 468, 467, 457, 457, 457, 457, 457, 457, 457, 457, 457, 467, 457, 457",
      /* 33861 */ "457, 468, 467, 457, 457, 457, 457, 486, 486, 463, 486, 486, 486, 486, 486, 486, 457, 486, 457, 457",
      /* 33881 */ "457, 457, 457, 29212, 29212, 29212, 82481, 29257, 29212, 82481, 29212, 29212, 29212, 82481, 82481",
      /* 33896 */ "29212, 29212, 82481, 29257, 29257, 29257, 29257, 29257, 29257, 29257, 29257, 29257, 29257, 29212",
      /* 33910 */ "82481, 29212, 29257, 1, 12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 351, 0, 0, 0, 0, 0, 682",
      /* 33932 */ "0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 693, 0, 0, 0, 0, 0, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 351, 289, 0, 0",
      /* 33962 */ "0, 0, 0, 0, 0, 0, 0, 798720, 776, 0, 0, 0, 0, 776, 768, 0, 0, 0, 0, 774, 0, 0, 0, 0, 0, 777, 0, 0",
      /* 33990 */ "0, 0, 0, 0, 2243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1994, 0, 1996, 0, 29201, 29201, 30945, 682, 0, 0, 0, 0",
      /* 34016 */ "0, 0, 780, 0, 777, 768, 0, 0, 782, 0, 649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 786432, 0, 0, 0, 0, 0, 0, 351",
      /* 34044 */ "288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 626688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 768, 0, 0, 646, 794, 0, 764, 0",
      /* 34072 */ "0, 0, 0, 800, 0, 0, 0, 0, 0, 663552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2632, 0, 0, 0, 2635, 0, 802, 0",
      /* 34100 */ "0, 0, 0, 0, 0, 768, 646, 623394, 0, 0, 0, 0, 527, 528, 29201, 29486, 29201, 29201, 29201, 29501",
      /* 34120 */ "29201, 29201, 623431, 29201, 29201, 29201, 29519, 29201, 29201, 29201, 29201, 29201, 29500, 29201",
      /* 34134 */ "29201, 29510, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30327, 29201, 29201, 29201, 29201",
      /* 34148 */ "29201, 29201, 30333, 29201, 29201, 29536, 29201, 29201, 29201, 82470, 82793, 82470, 82470, 82470",
      /* 34162 */ "82808, 82470, 82470, 623490, 82470, 82470, 82470, 82470, 82470, 84449, 82470, 84450, 82470, 82470",
      /* 34176 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 83695, 82470, 82470, 0, 0, 0, 0, 82470, 82826",
      /* 34192 */ "82470, 82470, 82470, 82470, 82843, 82470, 82470, 82470, 571, 572, 0, 29246, 29610, 29246, 0, 0",
      /* 34208 */ "2606, 0, 0, 0, 0, 0, 2612, 0, 0, 0, 0, 0, 0, 0, 1566, 0, 0, 0, 0, 0, 0, 1572, 0, 29246, 29246",
      /* 34233 */ "29625, 29246, 29246, 623555, 29246, 29246, 29246, 29643, 29246, 29246, 29246, 29246, 29660, 29246",
      /* 34247 */ "0, 2605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 704512, 0, 0, 0, 1075, 0, 351, 351, 0, 1078, 0, 0",
      /* 34274 */ "0, 0, 0, 0, 0, 0, 0, 1902, 1903, 0, 0, 0, 0, 0, 0, 1117, 0, 0, 0, 0, 0, 0, 1040, 0, 0, 0, 0, 0, 0",
      /* 34303 */ "0, 641, 642, 0, 0, 0, 0, 0, 0, 0, 320, 368, 370, 0, 0, 0, 0, 0, 0, 1042, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 34332 */ "0, 0, 0, 1143, 0, 0, 0, 0, 0, 1913, 770048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2631, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 34361 */ "1148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1600, 0, 0, 0, 1161, 0, 0, 0, 0, 0, 0, 0, 0, 1168, 0",
      /* 34390 */ "0, 0, 0, 0, 0, 351, 327, 86298, 0, 0, 0, 0, 0, 0, 0, 630, 729, 730, 731, 0, 0, 0, 0, 0, 1075, 0, 0",
      /* 34417 */ "0, 1179, 0, 0, 0, 1161, 0, 0, 0, 1185, 0, 0, 0, 0, 0, 596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 962560",
      /* 34445 */ "0, 0, 0, 0, 29201, 29201, 29904, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 34461 */ "29201, 29201, 29201, 29201, 30958, 29201, 29201, 29201, 29201, 29201, 29923, 29201, 29201, 29201",
      /* 34475 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 31340, 29201, 29201, 29201, 82470",
      /* 34489 */ "83212, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83231, 82470",
      /* 34503 */ "82470, 82470, 82470, 82470, 84461, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 34517 */ "82470, 571, 572, 0, 29246, 29246, 29246, 29246, 29246, 30052, 29246, 29246, 29246, 29246, 29246",
      /* 34532 */ "29246, 29246, 29246, 29246, 29246, 29246, 30071, 29246, 0, 2881, 0, 0, 2884, 0, 0, 0, 2747, 2887, 0",
      /* 34551 */ "0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 747, 0, 0, 750, 0, 0, 754, 1056768, 0, 0, 0, 0, 0, 0",
      /* 34580 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1969, 0, 0, 0, 0, 25941, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 34602 */ "30468, 29246, 29246, 29246, 29246, 29246, 31266, 29246, 29246, 29246, 29201, 82470, 29201, 29201",
      /* 34616 */ "82470, 82470, 29246, 30137, 29246, 29246, 87031, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1928, 0, 0, 0, 0, 0, 0",
      /* 34639 */ "0, 1933, 1934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1612, 0, 1613, 1011712, 0, 0, 0, 0, 0, 0, 0",
      /* 34666 */ "0, 0, 0, 0, 0, 0, 0, 0, 2265, 0, 2200, 0, 0, 2203, 0, 0, 0, 0, 794624, 0, 876544, 2207, 0, 0, 0, 0",
      /* 34692 */ "0, 668, 669, 0, 0, 0, 672, 0, 0, 0, 351, 351, 0, 0, 0, 0, 0, 0, 0, 1083, 0, 0, 0, 0, 0, 0, 0, 2228",
      /* 34720 */ "2229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1964, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2241, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 34750 */ "0, 0, 2252, 2266, 0, 0, 0, 0, 0, 0, 2270, 0, 0, 0, 0, 0, 29201, 29201, 29201, 82470, 29246, 29201",
      /* 34772 */ "82470, 29201, 29201, 29201, 82470, 82470, 29201, 29201, 30961, 29201, 29201, 29201, 30964, 29201",
      /* 34786 */ "29201, 29201, 29201, 29201, 30968, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 83200",
      /* 34800 */ "83201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83650, 82470, 82470, 82470, 82470, 82470",
      /* 34814 */ "82470, 82470, 82470, 82470, 82849, 571, 572, 0, 29246, 29246, 29246, 29201, 795153, 29201, 29201",
      /* 34829 */ "29201, 29201, 29201, 29201, 878849, 29201, 29201, 29201, 30981, 29201, 29201, 29201, 29201, 29201",
      /* 34843 */ "29502, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 31336, 29201, 29201",
      /* 34857 */ "29201, 29201, 29201, 29201, 29201, 29201, 30976, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 34871 */ "29201, 29509, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 84245, 82470, 82470, 84248",
      /* 34885 */ "84249, 82470, 82470, 82470, 82470, 84253, 82470, 84255, 82470, 82470, 82470, 2116, 0, 2118, 0",
      /* 34900 */ "29246, 29246, 31037, 29246, 29246, 29246, 29246, 29246, 29246, 1863, 2179, 0, 0, 0, 0, 1869, 2181",
      /* 34917 */ "0, 0, 84258, 82470, 82470, 82470, 82470, 82470, 84262, 82470, 82470, 82470, 82470, 82470, 795174",
      /* 34932 */ "82470, 82470, 82470, 82470, 82470, 83240, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83249",
      /* 34946 */ "82470, 82470, 82470, 82470, 82470, 878895, 82470, 82470, 82470, 84275, 82470, 82470, 82470, 82470",
      /* 34960 */ "82470, 82470, 82470, 82470, 82470, 82470, 1040934, 82470, 82470, 1061414, 1065510, 82470, 31043",
      /* 34973 */ "29246, 29246, 31046, 31047, 29246, 29246, 29246, 29246, 31051, 29246, 31053, 29246, 29246, 29246",
      /* 34987 */ "31056, 29246, 29246, 878941, 29246, 29246, 29246, 31073, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 35001 */ "29246, 29246, 29246, 31734, 29246, 0, 0, 0, 0, 0, 2431, 0, 0, 0, 0, 0, 2437, 1048576, 561152, 0, 0",
      /* 35022 */ "0, 0, 0, 0, 0, 644, 0, 0, 0, 0, 0, 0, 0, 0, 1977, 0, 0, 0, 0, 0, 0, 0, 0, 2455, 0, 0, 0, 0, 2460, 0",
      /* 35052 */ "0, 2463, 0, 0, 0, 0, 0, 0, 0, 1556, 0, 0, 0, 0, 0, 0, 0, 0, 1939, 0, 0, 0, 0, 0, 0, 0, 29201, 29201",
      /* 35080 */ "31170, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 31179, 29201, 29201, 29201",
      /* 35094 */ "29201, 29201, 29503, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470",
      /* 35108 */ "82470, 84597, 82470, 82470, 82470, 82470, 82470, 82470, 84456, 82470, 82470, 82470, 82470, 82470",
      /* 35122 */ "82470, 82470, 82470, 82470, 84465, 82470, 82470, 82470, 82470, 82470, 82470, 83263, 82470, 82470",
      /* 35136 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84021, 82470, 82470, 82470, 82470, 84025",
      /* 35150 */ "82470, 82470, 82470, 84472, 82470, 82470, 84475, 82470, 82470, 1049126, 31230, 29246, 29246, 29246",
      /* 35164 */ "29246, 29246, 29246, 30479, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31487",
      /* 35178 */ "29201, 84736, 82470, 31489, 29246, 0, 29246, 31262, 29246, 29246, 31265, 29246, 29246, 1049150",
      /* 35192 */ "31268, 31269, 84518, 29201, 29201, 82470, 82470, 29246, 1890, 0, 1892, 0, 1894, 0, 1896, 0, 0, 0, 0",
      /* 35211 */ "0, 0, 0, 0, 323, 0, 0, 0, 0, 0, 0, 0, 0, 585728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 811, 811",
      /* 35241 */ "811, 811, 29201, 29201, 29201, 31334, 29201, 586257, 29201, 29201, 29201, 29201, 29201, 31339",
      /* 35255 */ "29201, 31341, 29201, 29201, 29201, 29201, 29201, 30950, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 35269 */ "29201, 29201, 29201, 29201, 705041, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 84614",
      /* 35283 */ "82470, 84616, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 31376",
      /* 35297 */ "29246, 586302, 29246, 29246, 29246, 29246, 29246, 31393, 29246, 31395, 29246, 29246, 29246, 29246",
      /* 35311 */ "29246, 29246, 29246, 31050, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30815, 29246",
      /* 35325 */ "29246, 29246, 30818, 29246, 598590, 29246, 0, 0, 0, 569344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 35347 */ "2756, 0, 0, 0, 0, 2758, 0, 0, 0, 0, 0, 0, 29201, 29201, 29201, 29201, 377361, 31435, 29201, 29201",
      /* 35367 */ "29201, 29201, 29201, 30975, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 35381 */ "82470, 82470, 84239, 82470, 82470, 82470, 82470, 82470, 29201, 31439, 31440, 29201, 29201, 29201",
      /* 35395 */ "569873, 29201, 29201, 29201, 29201, 31446, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470",
      /* 35409 */ "83978, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83242, 82470, 82470, 82470, 82470, 82470",
      /* 35423 */ "82470, 82470, 82470, 82470, 82470, 967206, 82470, 82470, 82470, 82470, 82470, 29201, 29201, 29201",
      /* 35437 */ "82470, 82470, 82470, 82470, 377382, 84701, 82470, 82470, 82470, 84705, 84706, 82470, 82470, 82470",
      /* 35451 */ "82470, 82470, 84618, 84620, 82470, 82470, 84622, 82470, 1036838, 1045030, 29246, 29246, 29246",
      /* 35464 */ "29246, 29246, 30799, 29246, 29246, 30800, 29246, 29246, 29246, 29246, 29246, 29246, 30807, 82470",
      /* 35478 */ "569894, 82470, 82470, 82470, 82470, 84712, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 29246",
      /* 35492 */ "29246, 29246, 29246, 87031, 0, 1471, 0, 0, 0, 1477, 0, 0, 0, 29246, 29246, 377406, 31471, 29246",
      /* 35510 */ "29246, 29246, 31475, 31476, 29246, 29246, 29246, 569918, 29246, 29246, 29246, 29246, 29246, 31544",
      /* 35524 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29201, 82470, 29246, 31482, 29246, 29246",
      /* 35538 */ "29246, 29246, 29246, 29246, 29246, 29201, 29201, 82470, 82470, 29246, 29246, 0, 0, 0, 0, 31081",
      /* 35554 */ "31082, 84331, 29201, 29201, 82470, 82470, 29246, 29246, 0, 0, 0, 0, 29246, 29201, 82470, 31084",
      /* 35570 */ "29201, 84334, 82470, 31088, 29246, 2418, 380928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2747, 2827, 0, 0, 0, 0",
      /* 35592 */ "0, 0, 2269, 0, 0, 0, 0, 0, 0, 29201, 29201, 29201, 29201, 29201, 483857, 29201, 29201, 29201, 29201",
      /* 35611 */ "0, 716800, 0, 0, 0, 0, 0, 0, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30706, 29201",
      /* 35629 */ "29201, 29201, 29201, 29201, 29201, 29201, 31513, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 35643 */ "29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84600, 82470, 82470, 82470, 84776",
      /* 35657 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 29246",
      /* 35671 */ "78104, 87031, 0, 0, 1018, 1022, 0, 29246, 29246, 29246, 29246, 31543, 29246, 29246, 29246, 29246",
      /* 35687 */ "29246, 29246, 29246, 29246, 29246, 29201, 82470, 29201, 29201, 82470, 82470, 29246, 29246, 0, 0, 0",
      /* 35703 */ "0, 393216, 0, 0, 884736, 0, 2747, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 29201, 29201, 31742, 31743, 29201",
      /* 35724 */ "29201, 82470, 82470, 82470, 84996, 84997, 82470, 82470, 29246, 30097, 29246, 29246, 87031, 0, 0, 0",
      /* 35740 */ "0, 0, 0, 0, 0, 0, 1610, 0, 0, 0, 0, 0, 0, 393745, 29201, 29201, 29201, 29201, 31629, 29201, 29201",
      /* 35761 */ "29201, 29201, 885265, 29201, 29201, 82470, 82470, 393766, 82470, 82470, 82470, 82470, 84890, 82470",
      /* 35775 */ "82470, 82470, 82470, 885286, 82470, 82470, 29246, 29246, 393790, 29246, 1890, 0, 1892, 0, 1894, 0",
      /* 35791 */ "1896, 0, 0, 0, 0, 2195, 0, 0, 0, 0, 0, 0, 720896, 0, 0, 721951, 0, 1124, 0, 507904, 1173, 0, 29246",
      /* 35814 */ "29246, 29246, 31655, 29246, 29246, 29246, 29246, 885310, 29246, 29246, 0, 0, 0, 2993, 0, 0, 0, 0, 0",
      /* 35833 */ "880640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1097, 0, 1099, 0, 0, 0, 0, 2995, 0, 0, 0, 0, 29201, 29201",
      /* 35858 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 35872 */ "29526, 31681, 29201, 31683, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 35886 */ "84941, 82470, 84943, 29246, 860160, 860689, 860710, 860734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2439",
      /* 35906 */ "0, 0, 0, 0, 331, 332, 333, 334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 29201, 29201, 30672, 378",
      /* 35931 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2430, 0, 0, 0, 69632, 73728, 0, 0, 0, 334, 333, 65536",
      /* 35958 */ "332, 333, 333, 0, 334, 333, 0, 332, 333, 442, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458",
      /* 35979 */ "458, 458, 458, 473, 482, 482, 482, 491, 492, 482, 482, 492, 492, 482, 506, 492, 506, 506, 506, 506",
      /* 35999 */ "506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 29213, 29213, 29213",
      /* 36017 */ "82482, 29258, 29213, 82482, 29213, 29213, 29213, 82482, 82482, 29213, 82482, 29258, 29258, 29258",
      /* 36031 */ "29258, 29258, 29258, 29258, 29258, 29258, 29258, 29213, 82482, 29213, 29258, 1, 12290, 3, 78104",
      /* 36046 */ "78104, 86298, 0, 0, 0, 0, 0, 288, 289, 0, 0, 292, 293, 0, 0, 0, 0, 0, 0, 630, 0, 0, 0, 0, 0, 0",
      /* 36072 */ "2618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2260, 0, 0, 0, 0, 0, 0, 634, 635, 636, 637, 638, 639, 640, 0, 0, 0",
      /* 36099 */ "0, 0, 0, 0, 0, 0, 1978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 653, 654, 0, 656, 657, 0, 0, 0, 0, 0, 0, 0",
      /* 36128 */ "645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 692, 0, 0, 695, 0, 697, 0, 699, 0, 0, 0, 0, 0, 0, 0, 0, 2245, 2246",
      /* 36156 */ "0, 0, 0, 0, 0, 0, 0, 0, 710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1919, 1920, 0, 737, 738, 0, 740",
      /* 36185 */ "741, 656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2233, 0, 0, 0, 0, 0, 756, 753664, 0, 0, 0, 738, 0, 0, 763",
      /* 36212 */ "0, 0, 0, 0, 0, 0, 0, 646, 0, 764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 764, 782, 0, 782, 777, 0, 770, 0, 0, 0",
      /* 36241 */ "0, 0, 775, 0, 0, 987136, 0, 0, 653, 0, 987136, 793, 793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 987136, 527",
      /* 36265 */ "528, 0, 778, 656, 699, 0, 987136, 779, 0, 0, 0, 0, 738, 0, 0, 0, 0, 0, 0, 2751, 0, 0, 0, 0, 0, 0, 0",
      /* 36292 */ "0, 0, 2886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 731, 787, 0, 789, 0, 0, 0, 0, 0, 731, 0, 0, 0",
      /* 36322 */ "0, 0, 1951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221600, 0, 0, 0, 0, 0, 791, 675, 0, 0, 793, 0, 0, 0, 795",
      /* 36350 */ "0, 0, 0, 987136, 675, 0, 0, 0, 0, 0, 1974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1952, 0, 0, 0, 0, 0, 29201",
      /* 36378 */ "29201, 29491, 29495, 29498, 29201, 29505, 29201, 29201, 29515, 29516, 29518, 29201, 29201, 29201",
      /* 36392 */ "29529, 987665, 29201, 29201, 29201, 29201, 82470, 82470, 82798, 82802, 82805, 82470, 82812, 82470",
      /* 36406 */ "82470, 82822, 82823, 82825, 82470, 82470, 82470, 82836, 987686, 82470, 82470, 82470, 82470, 571",
      /* 36420 */ "572, 0, 29246, 29246, 29615, 29619, 29622, 29246, 29629, 29246, 29246, 29639, 29640, 29642, 29246",
      /* 36435 */ "29246, 29246, 29653, 987710, 29246, 29246, 595, 596, 0, 0, 29246, 29201, 82470, 0, 29492, 29523",
      /* 36451 */ "29201, 29533, 29201, 82799, 82470, 82836, 987686, 82930, 29615, 29246, 29653, 987710, 29686, 78104",
      /* 36465 */ "87031, 0, 0, 0, 0, 0, 0, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 527, 0, 528, 0, 0, 0, 0, 0, 0, 0, 351, 351",
      /* 36494 */ "1077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2261, 0, 0, 0, 0, 0, 1067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1128",
      /* 36523 */ "0, 0, 0, 0, 0, 0, 2760, 0, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 36541 */ "29201, 31328, 29201, 29201, 29201, 0, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 935, 935, 935",
      /* 36565 */ "935, 29201, 29201, 29201, 29905, 29201, 29201, 29201, 29201, 29201, 29201, 29913, 29201, 29201",
      /* 36579 */ "29201, 29201, 29201, 29201, 30309, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 36593 */ "29933, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29922, 29201, 29201, 29929, 29201",
      /* 36607 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29941, 83256, 82470, 82470, 82470, 82470",
      /* 36621 */ "82470, 82470, 82470, 82470, 82470, 83268, 82470, 82470, 82470, 82470, 82470, 82470, 83649, 82470",
      /* 36635 */ "82470, 82470, 82470, 82470, 82470, 83655, 82470, 82470, 29246, 30096, 29246, 29246, 29246, 29246",
      /* 36649 */ "29246, 29246, 29246, 29246, 29246, 30108, 29246, 29246, 29246, 29246, 29246, 29246, 31061, 29246",
      /* 36663 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31394, 29246, 29246, 29246, 29246, 29246",
      /* 36677 */ "29246, 29246, 0, 0, 1552, 0, 0, 0, 0, 0, 0, 0, 1558, 0, 1559, 0, 0, 0, 0, 0, 713, 0, 0, 0, 0, 0, 0",
      /* 36704 */ "0, 0, 0, 0, 372, 326, 0, 0, 0, 0, 1561, 0, 725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1591, 0",
      /* 36733 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1601, 0, 0, 0, 0, 0, 909312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 931",
      /* 36763 */ "932, 0, 0, 0, 0, 29201, 29201, 30336, 29201, 29201, 659985, 29201, 29201, 29201, 29201, 29201",
      /* 36779 */ "29201, 29201, 29201, 29201, 29201, 30979, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 36793 */ "30365, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 83624, 82470, 82470",
      /* 36807 */ "82470, 82470, 83630, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83640, 82470, 82470",
      /* 36821 */ "82470, 82470, 82470, 84474, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 31234, 31235",
      /* 36835 */ "82470, 82470, 82470, 83629, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 36849 */ "82470, 82470, 0, 1780, 0, 0, 82470, 83658, 82470, 82470, 660006, 82470, 82470, 82470, 82470, 82470",
      /* 36865 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 84716, 82470, 29246, 29246, 82470, 82470, 83687",
      /* 36879 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 0, 0, 0, 0, 31035, 29246, 29246",
      /* 36895 */ "29246, 29246, 29246, 29246, 29246, 29246, 30482, 29246, 29246, 29246, 492094, 29246, 29246, 29246",
      /* 36909 */ "0, 0, 0, 0, 25941, 29246, 30462, 29246, 29246, 29246, 29246, 30467, 29246, 29246, 29246, 29246",
      /* 36925 */ "29246, 29246, 31254, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31705",
      /* 36939 */ "29246, 31707, 0, 0, 0, 1018, 0, 0, 0, 1893, 0, 1022, 0, 0, 0, 1895, 0, 1026, 0, 0, 0, 0, 0, 720, 0",
      /* 36964 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 552960, 0, 0, 0, 0, 0, 1897, 0, 1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 36994 */ "0, 1943, 0, 0, 0, 0, 0, 1924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 29201, 30671, 29201, 0, 0",
      /* 37020 */ "0, 1995, 0, 1192, 0, 0, 0, 1997, 0, 1196, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 83977",
      /* 37038 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84609, 82470, 586278, 82470, 82470",
      /* 37052 */ "82470, 82470, 82470, 82470, 84013, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 37066 */ "82470, 82470, 82470, 82470, 1777, 0, 0, 0, 0, 0, 0, 2117, 0, 1359, 0, 0, 0, 2119, 0, 1363, 29246",
      /* 37087 */ "29246, 29246, 29246, 29246, 29246, 31267, 29246, 29246, 29201, 82470, 29201, 29201, 82470, 82470",
      /* 37101 */ "29246, 29246, 3114, 31787, 85036, 31789, 0, 29201, 82470, 29246, 0, 29201, 82470, 0, 1451, 29246",
      /* 37117 */ "29201, 82470, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 0",
      /* 37132 */ "0, 1472, 0, 0, 82470, 84282, 82470, 0, 0, 0, 0, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 37150 */ "29246, 29246, 729662, 29246, 29246, 31064, 29246, 29246, 29246, 31080, 29246, 0, 0, 0, 0, 29246",
      /* 37166 */ "29201, 82470, 29201, 29201, 82470, 82470, 29246, 29246, 0, 1446, 1450, 0, 0, 29246, 29201, 82470",
      /* 37182 */ "29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 84702, 82470, 82470, 82470",
      /* 37196 */ "82470, 82470, 82470, 82470, 84476, 82470, 82470, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 37210 */ "31486, 29246, 29201, 29201, 82470, 82470, 29246, 29246, 0, 29201, 82470, 29246, 3118, 31791, 85040",
      /* 37225 */ "31793, 0, 29201, 82470, 0, 0, 0, 2434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 30670, 29201",
      /* 37248 */ "29201, 82470, 82470, 82470, 82470, 84460, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 37262 */ "82470, 82470, 82470, 82470, 415415, 82470, 82470, 82470, 29246, 29246, 31250, 29246, 29246, 29246",
      /* 37276 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 705086, 29201",
      /* 37290 */ "29201, 29201, 29201, 31335, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 37304 */ "29201, 31191, 29201, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 31379, 29246, 29246",
      /* 37318 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30068, 553534, 29246, 29246, 29246",
      /* 37332 */ "31389, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 37346 */ "29246, 29246, 30090, 0, 0, 0, 0, 2821, 0, 0, 0, 0, 0, 2747, 0, 0, 0, 0, 0, 0, 0, 0, 31623, 29201",
      /* 37370 */ "29246, 31541, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 37384 */ "29201, 82470, 29201, 31272, 82470, 84522, 29246, 29246, 29246, 31599, 29246, 29246, 29246, 31603",
      /* 37398 */ "29246, 29246, 29246, 29246, 29246, 31609, 29246, 29246, 0, 1447, 1451, 0, 0, 29246, 29201, 82470",
      /* 37414 */ "29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 84972, 82470, 84973, 82470",
      /* 37428 */ "82470, 82470, 29246, 29201, 29201, 29201, 31627, 29201, 29201, 29201, 31631, 29201, 29201, 29201",
      /* 37442 */ "29201, 29201, 82470, 82470, 82470, 82470, 82470, 82809, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 37456 */ "82470, 84888, 82470, 82470, 82470, 84892, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246",
      /* 37470 */ "29246, 29246, 78104, 87031, 0, 0, 1019, 1023, 0, 29246, 31653, 29246, 29246, 29246, 31657, 29246",
      /* 37486 */ "29246, 29246, 29246, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 29246, 29201, 82470, 30550, 31797, 0, 29201",
      /* 37505 */ "82470, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2198, 0, 380, 375, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 37533 */ "0, 0, 0, 0, 0, 2221, 0, 0, 392, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 423, 0, 0, 0, 0",
      /* 37560 */ "0, 1118208, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 686, 0, 0, 0, 0, 0, 0, 430, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 37589 */ "0, 0, 0, 0, 0, 1056, 0, 507, 507, 507, 29214, 29214, 29214, 82483, 29259, 29214, 82483, 29214",
      /* 37607 */ "29214, 29214, 82483, 82483, 29214, 82483, 29259, 29259, 29259, 29259, 29259, 29259, 29259, 29259",
      /* 37621 */ "29259, 29259, 29214, 82483, 29214, 29259, 29276, 82529, 29276, 29286, 1, 12290, 3, 78104, 78104",
      /* 37636 */ "86298, 0, 0, 0, 0, 0, 288, 0, 0, 757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2235, 0, 0, 29201",
      /* 37663 */ "29537, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 37677 */ "82470, 82470, 29246, 82470, 82827, 82470, 82470, 82470, 82470, 82844, 82470, 82470, 82470, 571, 572",
      /* 37692 */ "0, 29246, 29246, 29246, 29246, 29246, 31602, 29246, 29246, 29246, 29246, 29246, 31608, 29246, 29246",
      /* 37707 */ "29246, 0, 0, 0, 0, 29246, 29201, 82470, 29201, 29201, 82470, 82470, 29246, 29246, 0, 29201, 82470",
      /* 37724 */ "29246, 0, 29201, 82470, 29246, 0, 29201, 82470, 0, 0, 0, 0, 1048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 37748 */ "2479, 0, 0, 29201, 31155, 0, 0, 0, 0, 1107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1116, 0, 0, 0, 1121, 0, 0",
      /* 37775 */ "0, 0, 1043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 37805 */ "2644, 0, 0, 0, 0, 29201, 29201, 29201, 29924, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 37821 */ "29201, 29201, 29201, 29939, 29201, 29201, 29201, 29201, 30307, 29201, 29201, 29201, 29201, 29201",
      /* 37835 */ "29201, 29201, 29201, 29201, 29201, 29201, 1077777, 29201, 82470, 82470, 82470, 82470, 83213, 82470",
      /* 37849 */ "82470, 82470, 82470, 83222, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 37863 */ "83636, 82470, 82470, 82470, 82470, 82470, 83234, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 37877 */ "82470, 82470, 82470, 82470, 82470, 82470, 83251, 82470, 82470, 82470, 82470, 83689, 82470, 82470",
      /* 37891 */ "82470, 82470, 82470, 82470, 82470, 0, 0, 0, 0, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 37907 */ "29246, 29246, 29201, 82470, 31271, 29201, 84521, 82470, 31275, 29246, 29246, 30053, 29246, 29246",
      /* 37921 */ "29246, 29246, 30062, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31255, 29246, 29246",
      /* 37935 */ "29246, 29246, 29246, 29246, 29246, 29246, 30074, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 37949 */ "29246, 29246, 29246, 29246, 29246, 29246, 30091, 1483, 0, 0, 0, 1489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 37971 */ "0, 111037, 111037, 111037, 111037, 445, 0, 1786, 0, 0, 25941, 29246, 29246, 29246, 29246, 29246",
      /* 37987 */ "29246, 29246, 29246, 29246, 29246, 29246, 30817, 29246, 29246, 29246, 29246, 0, 0, 1910, 0, 0, 0, 0",
      /* 38005 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 2250, 0, 0, 0, 0, 1621, 0, 0, 0, 0, 0, 1627, 0, 0, 0, 29201, 29201",
      /* 38031 */ "29201, 29201, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 0, 0, 29201, 82470, 82470",
      /* 38046 */ "84000, 82470, 82470, 82470, 84003, 82470, 598566, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 38060 */ "82470, 537126, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84621, 82470, 82470, 82470",
      /* 38074 */ "82470, 29246, 29246, 29246, 0, 0, 1781, 0, 0, 0, 0, 0, 1787, 0, 0, 0, 29246, 29246, 29246, 29246",
      /* 38094 */ "29246, 29246, 31381, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30483, 29246",
      /* 38108 */ "29246, 29246, 29246, 29246, 29246, 30971, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 38122 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 31168, 2893, 0, 29201, 31568, 29201, 31570, 29201",
      /* 38137 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 84770, 82470, 82470, 82470, 82470",
      /* 38151 */ "84774, 29201, 82470, 84831, 82470, 84833, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 38165 */ "82470, 82470, 82470, 83269, 82470, 82470, 82470, 82470, 29246, 31598, 29246, 31600, 29246, 29246",
      /* 38179 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 0, 0, 2992, 0, 0, 0, 726, 0, 0, 0, 0",
      /* 38199 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101, 0, 29246, 29246, 516670, 29246, 29246, 29246, 29246, 29246",
      /* 38219 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30487, 29246, 29246, 29666, 595, 596",
      /* 38234 */ "0, 0, 29246, 29201, 82470, 0, 29201, 29201, 29201, 29201, 29201, 82470, 316266, 82470, 82470, 82470",
      /* 38250 */ "82470, 82470, 82470, 664102, 82470, 82470, 0, 1027, 1031, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38272 */ "2428, 0, 0, 29201, 29201, 29201, 29201, 31442, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 38287 */ "29201, 29201, 29201, 29201, 31337, 31338, 29201, 29201, 29201, 29201, 29201, 29201, 0, 0, 0, 69632",
      /* 38303 */ "73728, 0, 0, 0, 337, 335, 65536, 0, 335, 335, 0, 337, 335, 0, 0, 335, 335, 0, 0, 0, 0, 336, 0, 0, 0",
      /* 38328 */ "0, 0, 0, 0, 1581, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335, 335",
      /* 38357 */ "337, 335, 335, 335, 335, 335, 499, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335",
      /* 38377 */ "335, 335, 335, 335, 335, 335, 29215, 29215, 29215, 82484, 29260, 29215, 82484, 29215, 29215, 29215",
      /* 38393 */ "82484, 82484, 29215, 82484, 29260, 29260, 29260, 29260, 29260, 29260, 29260, 29260, 29260, 29260",
      /* 38407 */ "29215, 82484, 29215, 29260, 1, 12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 0, 799503, 0, 0",
      /* 38427 */ "0, 0, 0, 0, 0, 0, 799380, 799503, 0, 647, 0, 0, 0, 0, 0, 2204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2747",
      /* 38454 */ "0, 2828, 0, 0, 0, 0, 776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 776, 527, 528, 29201, 29201, 29492",
      /* 38478 */ "29201, 29201, 29201, 29201, 29508, 29201, 29201, 29201, 29201, 799569, 29523, 29201, 29201, 29201",
      /* 38492 */ "29201, 29201, 30987, 29201, 29201, 82470, 82470, 82470, 84240, 82470, 82470, 82470, 84243, 29533",
      /* 38506 */ "29201, 29201, 29201, 29201, 82470, 82470, 82799, 82470, 82470, 82470, 82470, 82815, 82470, 82470",
      /* 38520 */ "82470, 82470, 82470, 83648, 82470, 82470, 82470, 533030, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 38534 */ "82470, 84463, 82470, 82470, 82470, 82470, 82470, 872998, 82470, 82470, 82470, 799628, 82830, 82470",
      /* 38548 */ "82470, 82840, 82470, 82470, 82470, 82470, 571, 572, 0, 29246, 29246, 29616, 82830, 82470, 82840",
      /* 38563 */ "82470, 29616, 29647, 29246, 29657, 29246, 78104, 87031, 0, 0, 0, 0, 0, 0, 527, 0, 0, 0, 0, 0, 0, 0",
      /* 38585 */ "0, 0, 0, 671744, 0, 0, 0, 0, 0, 0, 0, 1076, 351, 351, 0, 0, 1079, 0, 0, 0, 1082, 0, 1084, 0, 1086",
      /* 38610 */ "1103, 0, 0, 0, 0, 1108, 0, 0, 0, 0, 1112, 0, 0, 0, 0, 0, 0, 595, 0, 0, 0, 595, 0, 596, 0, 0, 0, 0",
      /* 38638 */ "0, 0, 0, 0, 0, 0, 0, 732, 0, 0, 0, 0, 1146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2443, 1187",
      /* 38668 */ "0, 0, 0, 0, 1112, 0, 0, 0, 0, 29870, 29201, 29201, 29201, 29201, 29201, 29201, 30326, 29201, 29201",
      /* 38687 */ "29201, 533009, 29201, 29201, 29201, 29201, 29201, 29201, 30354, 29201, 29201, 29201, 29201, 29201",
      /* 38701 */ "29201, 30360, 29201, 29201, 553489, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 38715 */ "29201, 29201, 29201, 29201, 29201, 29201, 967185, 29201, 29920, 29201, 29201, 29201, 29201, 29201",
      /* 38729 */ "29201, 29201, 29934, 29201, 29201, 29201, 29201, 29201, 29201, 29884, 29201, 29201, 29201, 29201",
      /* 38743 */ "29201, 29201, 29201, 29201, 29201, 31190, 29201, 29201, 82470, 82470, 82470, 82470, 29201, 29944",
      /* 38757 */ "29945, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 38771 */ "82470, 82470, 84708, 82470, 83383, 30136, 29246, 29246, 30139, 87031, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38790 */ "2232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1526, 0, 0, 0, 0, 0, 1532, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29201",
      /* 38819 */ "29201, 30305, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 38833 */ "29201, 30970, 29201, 29201, 82470, 83627, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 38847 */ "82470, 82470, 82470, 82470, 82470, 82470, 83232, 82470, 82470, 82470, 82470, 83688, 82470, 82470",
      /* 38861 */ "82470, 82470, 83694, 82470, 82470, 82470, 0, 0, 0, 0, 0, 0, 29246, 29246, 29246, 29246, 29246",
      /* 38878 */ "29246, 29246, 29246, 29246, 29201, 29201, 82470, 82470, 29246, 29246, 0, 0, 0, 0, 0, 25941, 29246",
      /* 38895 */ "29246, 29246, 29246, 30465, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31062, 29246, 29246",
      /* 38909 */ "29246, 29246, 29246, 29246, 29246, 31067, 29246, 29246, 29246, 30519, 29246, 29246, 29246, 29246",
      /* 38923 */ "29246, 29246, 29246, 30526, 29246, 29246, 29246, 29246, 29246, 29246, 31474, 29246, 29246, 29246",
      /* 38937 */ "29246, 29246, 29246, 29246, 29246, 29246, 30801, 29246, 30803, 29246, 29246, 29246, 29246, 30532",
      /* 38951 */ "29246, 29246, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 29246, 29201, 82470, 29201, 29201, 29201, 29201, 30325",
      /* 38970 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 899332, 29201, 29201",
      /* 38984 */ "29201, 29201, 1932, 0, 0, 0, 1936, 0, 0, 1938, 0, 0, 0, 0, 0, 0, 0, 1945, 1970, 0, 1972, 1973",
      /* 39006 */ "286720, 0, 1975, 0, 0, 0, 0, 0, 0, 0, 1983, 0, 0, 1986, 804754, 0, 0, 0, 1989, 0, 0, 0, 0, 0, 0",
      /* 39031 */ "644, 0, 0, 0, 0, 0, 0, 0, 799, 0, 29201, 29201, 30675, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 39050 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 29201, 30699, 29201",
      /* 39064 */ "30702, 29201, 29201, 29201, 29201, 29201, 804851, 29201, 29201, 29201, 29201, 29201, 30713, 82470",
      /* 39078 */ "82470, 82470, 84001, 82470, 82470, 82470, 82470, 82470, 84005, 82470, 84006, 82470, 84009, 82470",
      /* 39092 */ "82470, 82470, 82470, 82470, 481919, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84611, 82470",
      /* 39106 */ "82470, 82470, 82470, 82470, 668198, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 39120 */ "82470, 82470, 83653, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 804910, 82470, 82470, 82470",
      /* 39134 */ "82470, 82470, 84020, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84263, 82470, 82470, 82470",
      /* 39148 */ "82470, 82470, 82470, 82470, 82470, 82470, 83244, 82470, 82470, 82470, 82470, 82470, 82470, 29246",
      /* 39162 */ "29246, 30797, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 39176 */ "29246, 29246, 30806, 29246, 29246, 30821, 29246, 30824, 29246, 29246, 29246, 29246, 29246, 804973",
      /* 39190 */ "29246, 29246, 29246, 29246, 29246, 30835, 2224, 0, 0, 2227, 0, 0, 0, 2231, 0, 0, 0, 0, 0, 0, 0",
      /* 39211 */ "2237, 82470, 82470, 84246, 82470, 82470, 82470, 82470, 84251, 82470, 82470, 82470, 82470, 82470",
      /* 39225 */ "82470, 82470, 82470, 82470, 83227, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 31044, 29246",
      /* 39239 */ "29246, 29246, 29246, 31049, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31382",
      /* 39253 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 2419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 39276 */ "2636, 0, 2432, 2433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2757, 0, 0, 0, 2444, 0, 0, 0, 0, 0, 0",
      /* 39304 */ "0, 0, 0, 0, 0, 0, 0, 0, 1115, 0, 29201, 29201, 31158, 31159, 29201, 29201, 29201, 29201, 29201",
      /* 39323 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 84443, 84444, 84445, 82470",
      /* 39337 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83250",
      /* 39351 */ "82470, 29246, 29246, 29246, 31264, 29246, 29246, 29246, 29246, 29246, 29201, 82470, 29201, 29201",
      /* 39365 */ "82470, 82470, 29246, 29246, 2736, 0, 0, 0, 0, 0, 31567, 29201, 29201, 29201, 31571, 29201, 29201",
      /* 39382 */ "29201, 29201, 29201, 29201, 29201, 29201, 31580, 29201, 84830, 82470, 82470, 82470, 84834, 82470",
      /* 39396 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 84843, 82470, 82470, 82470, 82470, 83987, 82470",
      /* 39410 */ "82470, 422438, 82470, 82470, 82470, 83994, 82470, 82470, 82470, 82470, 82470, 82842, 82470, 82470",
      /* 39424 */ "82470, 82470, 571, 572, 0, 29246, 29246, 29246, 31597, 29246, 29246, 29246, 31601, 29246, 29246",
      /* 39439 */ "29246, 29246, 29246, 29246, 29246, 29246, 31610, 29246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2614, 0, 0",
      /* 39461 */ "0, 0, 0, 706, 0, 719, 644, 0, 0, 0, 0, 0, 527, 528, 0, 0, 0, 2997, 0, 2999, 29201, 29201, 29201",
      /* 39484 */ "29201, 31676, 29201, 29201, 29201, 29201, 29201, 29201, 30368, 30370, 29201, 29201, 29201, 29201",
      /* 39498 */ "29201, 82470, 82470, 82470, 82470, 82470, 82807, 82470, 82470, 82817, 82470, 82470, 29246, 29246",
      /* 39512 */ "29246, 29246, 31700, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 0, 0, 0, 0, 1131",
      /* 39528 */ "29246, 29201, 82470, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 39542 */ "82470, 84939, 82470, 82470, 82470, 82470, 827392, 29201, 29201, 29201, 29201, 82470, 82470, 82470",
      /* 39556 */ "82470, 29246, 29246, 29246, 29246, 0, 602112, 29201, 29201, 29201, 29201, 30339, 29201, 29201",
      /* 39570 */ "680465, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 684561, 29201, 29201, 29201, 29201",
      /* 39584 */ "29201, 29201, 29201, 0, 0, 362, 0, 0, 0, 0, 354, 0, 371, 0, 338, 0, 0, 0, 0, 0, 0, 24576, 0, 0, 0",
      /* 39609 */ "0, 0, 0, 0, 0, 0, 0, 954368, 0, 0, 0, 0, 0, 0, 381, 382, 0, 383, 0, 0, 0, 0, 0, 383, 0, 0, 388, 0",
      /* 39637 */ "0, 0, 0, 0, 2268, 0, 0, 0, 0, 0, 0, 0, 30943, 29201, 29201, 29201, 29201, 29201, 30677, 29201",
      /* 39657 */ "29201, 30678, 29201, 29201, 29201, 29201, 29201, 29201, 30685, 0, 0, 0, 354, 391, 0, 0, 0, 0, 0",
      /* 39676 */ "354, 0, 362, 396, 398, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 622, 0, 354, 0, 69632",
      /* 39701 */ "73728, 0, 0, 0, 0, 414, 65536, 0, 414, 414, 424, 0, 0, 0, 0, 1, 12290, 3, 78104, 78104, 86298, 0, 0",
      /* 39724 */ "0, 0, 0, 288, 414, 0, 398, 414, 443, 0, 0, 0, 0, 0, 0, 0, 0, 354, 0, 0, 0, 0, 0, 2436, 0, 0, 0, 0",
      /* 39752 */ "0, 0, 0, 0, 0, 0, 571, 572, 934, 935, 935, 935, 383, 0, 0, 0, 0, 338, 0, 0, 0, 354, 0, 0, 383, 396",
      /* 39778 */ "0, 483, 483, 0, 483, 483, 483, 483, 483, 483, 508, 483, 508, 508, 508, 508, 508, 525, 29216, 29216",
      /* 39798 */ "29216, 82485, 29261, 29216, 82485, 29216, 29216, 29216, 82485, 82485, 29216, 443, 443, 443, 443",
      /* 39813 */ "517, 443, 443, 518, 508, 508, 508, 508, 523, 508, 508, 523, 29216, 82485, 29261, 29261, 29261",
      /* 39830 */ "29261, 29261, 29261, 29261, 29261, 29261, 29261, 29216, 82485, 29216, 29261, 29277, 82530, 29277",
      /* 39844 */ "29287, 1, 12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 289, 0, 0, 292, 293, 0, 0, 0, 315392",
      /* 39866 */ "0, 0, 0, 0, 0, 0, 0, 716, 0, 0, 0, 0, 0, 0, 0, 0, 2620, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 316151, 0, 0",
      /* 39896 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29246, 29246, 29246, 30794, 0, 0, 0, 316151, 0, 0, 0, 663552, 0, 0, 0",
      /* 39921 */ "0, 0, 0, 316151, 0, 663552, 0, 0, 0, 0, 527, 528, 29201, 316207, 29201, 29201, 29201, 29201, 29201",
      /* 39940 */ "29201, 664081, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30719, 30720, 29201, 29201, 29201",
      /* 39954 */ "29201, 29201, 29201, 29201, 29888, 29201, 29892, 29201, 29201, 29896, 29201, 29898, 29201, 0, 0, 0",
      /* 39970 */ "0, 1032, 0, 1034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2438, 0, 0, 0, 0, 2442, 0, 0, 0, 0, 1047, 0, 0, 0, 0",
      /* 39998 */ "0, 0, 0, 0, 0, 0, 0, 0, 29246, 29246, 30793, 29246, 0, 0, 0, 0, 1091, 0, 1093, 0, 0, 0, 0, 0, 0, 0",
      /* 40024 */ "0, 0, 2624, 0, 0, 0, 0, 0, 0, 1160, 0, 0, 0, 0, 1164, 0, 0, 0, 0, 0, 1164, 1171, 0, 0, 0, 0, 0, 727",
      /* 40052 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929, 0, 0, 1930, 0, 0, 0, 1164, 1188, 1189, 0, 0, 0, 0, 0, 0, 29870",
      /* 40079 */ "29201, 29201, 29201, 29201, 29201, 29201, 30369, 29201, 29201, 29201, 29201, 29201, 29201, 82470",
      /* 40093 */ "82470, 82470, 83979, 82470, 82470, 82470, 82470, 82470, 82470, 29876, 29201, 29201, 29201, 29880",
      /* 40107 */ "29201, 29201, 29891, 29201, 29201, 29894, 29201, 29201, 29201, 29201, 29201, 29201, 30692, 29201",
      /* 40121 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30341, 29201, 29201, 29201, 30345, 29201",
      /* 40135 */ "29201, 82470, 82470, 83218, 82470, 82470, 83221, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 40149 */ "82470, 82470, 82470, 82470, 84033, 82470, 82470, 82470, 82470, 82470, 83236, 82470, 83239, 82470",
      /* 40163 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 1778, 0, 0, 0, 30047",
      /* 40179 */ "29246, 29246, 30058, 29246, 29246, 30061, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 40193 */ "29246, 31605, 29246, 31607, 29246, 29246, 29246, 29246, 0, 29246, 29246, 30076, 29246, 30079, 29246",
      /* 40208 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30831, 30832, 29246, 29246",
      /* 40222 */ "29246, 0, 0, 0, 1540, 0, 0, 0, 1542, 0, 0, 0, 0, 0, 0, 0, 0, 2630, 0, 0, 0, 0, 2634, 0, 0, 29246",
      /* 40248 */ "29246, 29246, 30475, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 40262 */ "29246, 29246, 31245, 29246, 29246, 29246, 29246, 29246, 30491, 29246, 29246, 29246, 29246, 29246",
      /* 40276 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 504382, 29246, 29246, 0, 0, 0, 0, 1089536",
      /* 40292 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 1959, 0, 0, 0",
      /* 40316 */ "0, 0, 0, 1965, 0, 0, 0, 0, 0, 0, 29201, 31673, 31674, 29201, 29201, 29201, 31677, 29201, 29201",
      /* 40335 */ "29201, 29201, 30715, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30722, 29201",
      /* 40349 */ "29201, 29201, 29201, 29201, 29201, 365073, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 40363 */ "29201, 30679, 29201, 30681, 29201, 29201, 29201, 29201, 84012, 770598, 82470, 82470, 82470, 82470",
      /* 40377 */ "82470, 82470, 82470, 82470, 82470, 84022, 82470, 82470, 82470, 82470, 82470, 82841, 82470, 82470",
      /* 40391 */ "82470, 82470, 571, 572, 0, 29246, 29246, 29246, 29246, 30837, 29246, 29246, 29246, 29246, 29246",
      /* 40406 */ "29246, 29246, 29246, 29246, 30844, 29246, 29246, 29246, 29246, 29246, 29246, 31485, 29246, 29246",
      /* 40420 */ "29201, 29201, 82470, 82470, 29246, 29246, 0, 1090110, 0, 1472, 0, 1478, 0, 1484, 0, 1490, 0, 0, 0",
      /* 40439 */ "0, 0, 0, 0, 744, 0, 0, 0, 0, 0, 0, 0, 0, 1036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 778240, 0, 0, 0, 0",
      /* 40469 */ "0, 1621, 0, 1627, 29201, 29201, 29201, 29201, 29201, 29882, 29201, 29201, 29201, 29201, 29201",
      /* 40484 */ "29201, 29201, 29201, 29899, 29201, 84269, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 40498 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 84455, 0, 0, 0, 2457, 0, 0, 0, 0, 2462, 0, 0, 0, 0",
      /* 40519 */ "0, 0, 0, 773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 31169, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 40541 */ "29201, 29201, 29201, 29201, 29201, 29201, 31181, 29201, 29201, 29201, 29201, 30352, 29201, 29201",
      /* 40555 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 31188, 29201, 29201, 29201, 29201",
      /* 40569 */ "82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 0, 1890, 0, 0, 0, 856064, 0, 0, 0, 0, 0, 0",
      /* 40589 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 2647, 0, 0, 0, 2639, 2640, 0, 0, 0, 0, 397312, 0, 0, 0, 0, 0, 0, 0, 1900",
      /* 40617 */ "0, 0, 0, 0, 0, 0, 0, 0, 805, 0, 0, 0, 0, 0, 527, 528, 29246, 29246, 29246, 397886, 397841, 397862",
      /* 40639 */ "29201, 29201, 82470, 82470, 29246, 29246, 0, 0, 0, 0, 0, 30053, 29886, 83213, 29201, 29201, 29201",
      /* 40656 */ "29201, 82470, 82470, 0, 0, 892928, 0, 0, 2759, 0, 925696, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 40673 */ "29201, 29201, 82470, 84238, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246",
      /* 40687 */ "893502, 29246, 29246, 29246, 29246, 29201, 926225, 82470, 926246, 29246, 926270, 2818, 0, 0, 0",
      /* 40702 */ "2820, 0, 0, 0, 0, 0, 0, 2747, 0, 0, 0, 0, 0, 2949, 0, 864256, 29201, 29201, 2832, 0, 0, 0, 458752",
      /* 40725 */ "0, 0, 819200, 29201, 31508, 29201, 29201, 31510, 29201, 29201, 29201, 29201, 29201, 29907, 29201",
      /* 40740 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 84771, 82470, 82470, 84773",
      /* 40754 */ "82470, 31540, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 40768 */ "29246, 819729, 819750, 819774, 0, 0, 0, 0, 0, 0, 0, 0, 2747, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 29201",
      /* 40791 */ "29201, 29201, 29201, 84932, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 40805 */ "82470, 82470, 29246, 31538, 29246, 29246, 31696, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 40819 */ "29246, 29246, 29246, 29246, 29246, 0, 0, 0, 0, 3066, 0, 0, 3037, 0, 0, 0, 0, 29201, 29201, 29201",
      /* 40839 */ "29201, 29201, 29201, 29201, 29201, 29201, 31576, 29201, 29201, 29201, 29201, 31719, 29201, 29201",
      /* 40853 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84974, 82470, 82470, 29246, 1890, 0",
      /* 40868 */ "1892, 0, 1894, 0, 1896, 0, 0, 2193, 0, 0, 0, 0, 0, 0, 293, 293, 0, 0, 0, 0, 0, 0, 0, 293, 0, 29201",
      /* 40894 */ "418321, 31741, 29201, 29201, 29201, 29201, 82470, 418342, 84995, 82470, 82470, 82470, 82470, 29246",
      /* 40908 */ "2880, 0, 2882, 0, 0, 0, 0, 0, 2747, 0, 0, 0, 0, 2891, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0",
      /* 40936 */ "0, 288, 418366, 31753, 29246, 29246, 29246, 29246, 0, 0, 0, 0, 0, 29201, 29201, 29201, 29201, 29201",
      /* 40954 */ "31572, 29201, 29201, 29201, 29201, 29201, 31578, 29201, 29201, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0",
      /* 40973 */ "65536, 0, 0, 0, 341, 0, 0, 0, 0, 1, 12290, 2113815, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 343, 0, 0",
      /* 40999 */ "459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 464, 514, 514, 514, 514, 509, 514, 514, 509",
      /* 41019 */ "464, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 464, 470, 459, 0, 0, 0, 0, 335, 336",
      /* 41040 */ "337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2217, 0, 0, 0, 0, 0, 0, 0, 0, 459, 0, 0, 0, 0, 0, 0, 509, 0, 509",
      /* 41069 */ "514, 514, 514, 514, 526, 29217, 29217, 29217, 82486, 29262, 29217, 82486, 29217, 29217, 29217",
      /* 41084 */ "82486, 82486, 29217, 29217, 82486, 29262, 29262, 29262, 29262, 29262, 29262, 29262, 29262, 29262",
      /* 41098 */ "29262, 29217, 82486, 29217, 29262, 29278, 82531, 29278, 29288, 1, 12290, 3, 78104, 78104, 86298, 0",
      /* 41114 */ "0, 0, 0, 0, 288, 289, 0, 0, 292, 293, 0, 0, 0, 0, 323584, 0, 0, 0, 0, 0, 0, 0, 1914, 0, 0, 0, 0, 0",
      /* 41142 */ "0, 0, 0, 2425, 0, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1498, 1499, 0",
      /* 41172 */ "0, 665, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 351, 0, 0, 0, 0, 0, 1045, 0, 0, 0, 0, 0, 0, 351, 0",
      /* 41201 */ "0, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 2752, 0, 0, 2755, 0, 0, 0, 0, 0, 0, 0, 2823, 2824, 0, 2747",
      /* 41226 */ "0, 0, 0, 0, 0, 0, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 0, 369, 0, 0, 0, 373, 374, 376, 328, 351, 0, 0, 0",
      /* 41254 */ "0, 0, 0, 0, 0, 685, 0, 0, 0, 0, 0, 0, 0, 1926, 0, 0, 0, 0, 0, 0, 0, 0, 811, 811, 811, 811, 811, 811",
      /* 41282 */ "811, 811, 811, 811, 0, 0, 739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29870, 29201, 29201, 29201",
      /* 41306 */ "29201, 29201, 0, 0, 0, 0, 606208, 0, 712704, 0, 0, 0, 0, 0, 0, 712704, 0, 0, 0, 0, 0, 323584, 0, 0",
      /* 41330 */ "0, 606208, 0, 712704, 0, 766, 0, 786, 0, 0, 0, 0, 648, 0, 0, 0, 786, 0, 0, 0, 0, 0, 2447, 0, 0, 0",
      /* 41356 */ "0, 0, 2450, 0, 2452, 0, 0, 0, 0, 0, 1937, 1040384, 0, 0, 0, 1941, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0",
      /* 41383 */ "155648, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 262144, 0, 0, 0",
      /* 41408 */ "0, 0, 0, 0, 357947, 1596, 0, 0, 1598, 0, 0, 0, 1602, 0, 0, 0, 0, 766, 766, 0, 323584, 0, 0, 766",
      /* 41432 */ "712704, 806, 0, 527, 528, 29201, 324400, 29201, 29201, 29201, 29201, 29506, 606737, 29512, 713233",
      /* 41447 */ "29201, 29201, 29201, 29201, 29201, 29530, 29246, 29246, 29246, 29630, 606782, 29636, 713278, 29246",
      /* 41461 */ "29246, 29246, 29246, 29246, 29654, 29246, 29246, 29246, 29246, 29246, 483902, 29246, 29246, 29246",
      /* 41475 */ "29246, 29246, 29246, 29246, 339968, 3036, 0, 82470, 82837, 82470, 82470, 29246, 29246, 29654, 29246",
      /* 41490 */ "29246, 78104, 87031, 0, 0, 0, 0, 0, 0, 698, 0, 0, 701, 0, 0, 0, 0, 0, 0, 0, 1609, 0, 0, 0, 0, 0, 0",
      /* 41517 */ "0, 0, 2216, 0, 0, 0, 0, 0, 0, 0, 0, 1059, 0, 0, 1062, 1063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2747, 0",
      /* 41545 */ "0, 0, 0, 0, 0, 0, 0, 0, 351, 351, 0, 0, 0, 1080, 0, 0, 0, 0, 0, 0, 0, 1050, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 41575 */ "0, 799379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1122, 0, 1125, 0, 0, 0, 0, 0, 696320, 0, 0, 0, 0, 0, 742",
      /* 41602 */ "0, 0, 745, 0, 0, 0, 0, 751, 0, 0, 0, 0, 1133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1144, 0, 0, 0, 0",
      /* 41631 */ "364, 0, 367, 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 351, 0, 86298, 0, 0, 0, 0, 354, 0, 0, 1175, 0, 774144",
      /* 41657 */ "0, 0, 0, 0, 1062, 0, 1183, 0, 0, 0, 0, 0, 0, 0, 1976, 0, 0, 0, 0, 0, 0, 0, 0, 1530, 0, 0, 0, 0, 0",
      /* 41686 */ "0, 0, 0, 1183, 0, 0, 1080, 0, 0, 0, 0, 0, 29870, 29871, 29201, 29201, 29201, 29875, 29201, 29201",
      /* 41706 */ "29201, 29925, 29927, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 41720 */ "655889, 29201, 29201, 29201, 29201, 31447, 29201, 31448, 82470, 83237, 82470, 82470, 696870, 82470",
      /* 41734 */ "82470, 82470, 82470, 82470, 83245, 82470, 82470, 82470, 83252, 83254, 30048, 29246, 29246, 29246",
      /* 41748 */ "29246, 29246, 29246, 29246, 29246, 29246, 30067, 29246, 29246, 29246, 29246, 29246, 29246, 30494",
      /* 41762 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29644, 29246, 29246, 29246, 29246",
      /* 41776 */ "29661, 29246, 29246, 29246, 30077, 29246, 29246, 696894, 29246, 29246, 29246, 29246, 29246, 30085",
      /* 41790 */ "29246, 29246, 29246, 30092, 30094, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 41804 */ "29246, 29246, 29246, 29246, 29246, 29246, 30093, 30115, 29246, 0, 0, 0, 0, 0, 29246, 29201, 82470",
      /* 41821 */ "29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 84936, 82470, 82470, 82470, 82470, 82470",
      /* 41835 */ "82470, 82470, 82470, 82470, 83266, 82470, 82470, 82470, 82470, 82470, 82470, 0, 1484, 0, 0, 0, 1490",
      /* 41852 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2747, 0, 0, 2829, 0, 0, 1500, 1501, 0, 0, 0, 0, 0, 1506, 0, 0, 0, 0",
      /* 41880 */ "0, 0, 0, 0, 41677, 37258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733184, 749568, 0, 0, 0, 0, 0, 0, 0, 1547",
      /* 41906 */ "0, 0, 0, 0, 0, 2459, 0, 0, 0, 0, 2464, 0, 0, 0, 0, 0, 0, 351, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 41934 */ "1101824, 0, 0, 0, 0, 1101824, 0, 0, 0, 0, 1605, 0, 0, 0, 0, 0, 0, 0, 1602, 0, 0, 0, 0, 0, 0, 714, 0",
      /* 41961 */ "0, 0, 0, 0, 0, 0, 0, 0, 1584, 0, 0, 0, 0, 0, 0, 1614, 0, 0, 1595, 357947, 0, 0, 1621, 0, 0, 0, 1627",
      /* 41988 */ "0, 29870, 29201, 29201, 29201, 29201, 29201, 31186, 29201, 29201, 31189, 29201, 29201, 1049105",
      /* 42002 */ "84440, 82470, 82470, 82470, 82470, 82470, 83631, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 42016 */ "82470, 82470, 83643, 82470, 82470, 82470, 83661, 82470, 82470, 680486, 82470, 82470, 82470, 82470",
      /* 42030 */ "82470, 82470, 82470, 82470, 82470, 82470, 83993, 82470, 82470, 82470, 82470, 82470, 0, 0, 1787, 0",
      /* 42046 */ "25941, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 358150, 29246, 29246, 2179, 0",
      /* 42061 */ "2181, 0, 29246, 29201, 82470, 29201, 29201, 82470, 82470, 29246, 29246, 0, 29201, 82470, 29246, 0",
      /* 42077 */ "29201, 82470, 29246, 3122, 31795, 85044, 29246, 29246, 29246, 30476, 29246, 29246, 29246, 29246",
      /* 42091 */ "29246, 29246, 29246, 29246, 29246, 30486, 29246, 29246, 595, 596, 0, 0, 29617, 29493, 82800, 0",
      /* 42107 */ "29489, 29675, 29525, 29201, 29201, 82796, 29246, 533054, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 42121 */ "29246, 29246, 29246, 30499, 29246, 29246, 680510, 29246, 29246, 29246, 29246, 29246, 664126, 29246",
      /* 42135 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31243, 29246, 29246, 29246, 29246",
      /* 42149 */ "29246, 30551, 29201, 29201, 82470, 83803, 82470, 82470, 29246, 30559, 29246, 29246, 0, 0, 0, 0, 0",
      /* 42166 */ "29246, 29201, 82470, 30128, 29201, 29201, 30131, 83380, 82470, 0, 0, 1948, 0, 0, 0, 577536, 0, 0, 0",
      /* 42185 */ "0, 1953, 421888, 0, 0, 0, 0, 0, 776, 0, 0, 798720, 0, 0, 0, 0, 0, 732, 0, 29201, 30687, 29201",
      /* 42207 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 541201, 29201, 29201, 30697, 29201, 29201, 29201",
      /* 42221 */ "29201, 29201, 31518, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 42235 */ "82470, 84704, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 541222, 82470, 82470, 84004",
      /* 42249 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83679, 82470, 82470, 82470, 82470",
      /* 42263 */ "82470, 82470, 946726, 82470, 82470, 991782, 82470, 82470, 82470, 82470, 84031, 82470, 82470, 82470",
      /* 42277 */ "82470, 82470, 82470, 82470, 83264, 82470, 82470, 82470, 82470, 82470, 82470, 83273, 82470, 29246",
      /* 42291 */ "30809, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 541246, 29246, 29246, 30819, 29246",
      /* 42305 */ "29246, 595, 596, 0, 0, 29672, 29673, 82922, 0, 29491, 29201, 29529, 987665, 29678, 82798, 0, 0, 0",
      /* 42323 */ "1052672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29201, 30944, 29201, 29201, 29201, 29201, 30366, 29201, 29201",
      /* 42342 */ "29201, 29201, 30372, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246",
      /* 42356 */ "1468, 1890, 0, 0, 0, 29201, 29201, 29201, 29201, 528913, 29201, 29201, 30966, 29201, 619025, 643601",
      /* 42372 */ "29201, 29201, 29201, 29201, 29201, 29201, 30705, 770577, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 42386 */ "29201, 29201, 31521, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 29201, 29201, 29201, 823825",
      /* 42400 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 958993, 29201, 29201, 29201",
      /* 42414 */ "29201, 30703, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30314",
      /* 42428 */ "29201, 29201, 29201, 29201, 84244, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 42442 */ "82470, 82470, 82470, 82470, 82470, 528934, 82470, 82470, 84260, 82470, 619046, 643622, 82470, 82470",
      /* 42456 */ "82470, 82470, 82470, 82470, 82470, 82470, 823846, 82470, 82470, 82470, 82470, 84015, 82470, 82470",
      /* 42470 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84467, 82470, 82470, 82470",
      /* 42484 */ "29246, 31058, 29246, 619070, 643646, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 823870",
      /* 42498 */ "29246, 29246, 595, 596, 41677, 0, 29246, 29201, 82470, 0, 29201, 29201, 29201, 29201, 29201, 82470",
      /* 42514 */ "82792, 82470, 82470, 82470, 82806, 82470, 82470, 82470, 82470, 82470, 0, 0, 2421, 0, 0, 401408",
      /* 42530 */ "405504, 0, 0, 438272, 487424, 0, 0, 0, 0, 0, 0, 715, 0, 0, 0, 323584, 715, 0, 721, 722, 323584",
      /* 42551 */ "385024, 0, 0, 0, 0, 0, 0, 2461, 0, 0, 0, 835584, 0, 2466, 0, 0, 0, 0, 0, 2474, 0, 0, 0, 0, 0, 0, 0",
      /* 42578 */ "0, 31154, 29201, 487953, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 42592 */ "29201, 29201, 29201, 29201, 29201, 725521, 29201, 82470, 82470, 82470, 82470, 385574, 82470, 406054",
      /* 42606 */ "82470, 82470, 82470, 82470, 438822, 82470, 82470, 487974, 82470, 82470, 82470, 82470, 84028, 82470",
      /* 42620 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84453, 82470, 82470",
      /* 42634 */ "82470, 29246, 29246, 385598, 29246, 406078, 29246, 29246, 29246, 29246, 438846, 29246, 29246",
      /* 42647 */ "487998, 29246, 29246, 29246, 29246, 29246, 497757, 29246, 520766, 29246, 29246, 29246, 29246, 29246",
      /* 42661 */ "29246, 29246, 29246, 610878, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 0, 0, 2625, 0, 0",
      /* 42677 */ "2627, 2628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2754, 0, 0, 0, 0, 0, 0, 29201, 29201, 31346, 29201, 29201",
      /* 42700 */ "29201, 29201, 82470, 82470, 82470, 84598, 82470, 82470, 82470, 82470, 82470, 82470, 83990, 82470",
      /* 42714 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84715, 82470, 82470, 29246",
      /* 42728 */ "29246, 31377, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 481946, 29246",
      /* 42742 */ "29246, 29246, 29246, 29246, 29246, 365118, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 42756 */ "29246, 31383, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31390, 29246, 29246",
      /* 42770 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31400, 29246, 29246, 29246, 29246, 29246",
      /* 42784 */ "899424, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31078, 29246, 0, 0, 0, 0, 0, 0, 0",
      /* 42802 */ "0, 0, 0, 811008, 0, 0, 950272, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 106496, 0, 106496, 106496, 106496",
      /* 42823 */ "106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496",
      /* 42835 */ "106496, 2739, 0, 0, 0, 0, 0, 2742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2825, 2747, 0, 0, 0, 0, 2831, 0, 0, 0",
      /* 42862 */ "655360, 462848, 0, 0, 0, 29201, 29201, 29201, 29201, 29201, 29201, 31436, 29201, 29201, 29201",
      /* 42877 */ "29201, 30717, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30709",
      /* 42891 */ "30710, 29201, 29201, 29201, 82470, 82470, 82470, 655910, 82470, 82470, 82470, 82470, 84713, 82470",
      /* 42905 */ "84714, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 87031, 1468, 0, 0, 0, 1474, 0, 0, 0, 1480",
      /* 42923 */ "29246, 29246, 29246, 29246, 31472, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 42937 */ "655934, 29246, 29246, 29246, 29246, 29632, 29246, 29246, 29246, 29246, 799693, 29647, 29246, 29246",
      /* 42951 */ "29657, 29246, 29246, 595, 596, 0, 0, 29246, 29201, 82470, 0, 348689, 29201, 29201, 29535, 29201",
      /* 42967 */ "348710, 29246, 29246, 29246, 31483, 29246, 31484, 29246, 29246, 29246, 29201, 29201, 82470, 82470",
      /* 42981 */ "29246, 29246, 0, 1448, 1452, 0, 0, 29246, 29201, 82470, 29201, 29201, 29201, 29201, 82470, 82470",
      /* 42997 */ "82470, 82470, 82470, 483878, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83663, 82470",
      /* 43011 */ "82470, 82470, 83667, 82470, 82470, 82470, 0, 389120, 0, 0, 0, 0, 757760, 0, 0, 0, 2747, 0, 0, 0",
      /* 43031 */ "2830, 0, 0, 0, 0, 384, 0, 0, 0, 0, 0, 384, 0, 0, 0, 0, 0, 0, 655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 643",
      /* 43060 */ "644, 0, 0, 0, 0, 0, 0, 0, 0, 1097728, 0, 0, 0, 0, 29201, 29201, 389649, 29201, 29201, 29201, 449304",
      /* 43081 */ "29201, 29201, 29201, 29201, 30974, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 43095 */ "29201, 29201, 29201, 1012241, 29201, 29201, 29201, 449319, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 43109 */ "82470, 82470, 84783, 82470, 82470, 29246, 29246, 389694, 29246, 29246, 29246, 29246, 30099, 29246",
      /* 43123 */ "29246, 29246, 29246, 30105, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30841, 30842, 29246",
      /* 43137 */ "29246, 29246, 29246, 29246, 29246, 29246, 30481, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 43151 */ "29246, 30082, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 449334, 29246, 29246",
      /* 43165 */ "29246, 29246, 29246, 29246, 29246, 29246, 31550, 29246, 29246, 29201, 82470, 82470, 85015, 85016",
      /* 43179 */ "82470, 82470, 29246, 29246, 31771, 31772, 29246, 29246, 0, 0, 0, 0, 0, 30125, 30126, 83375, 29201",
      /* 43196 */ "30129, 29201, 29201, 82470, 83381, 905216, 0, 0, 0, 0, 0, 0, 29201, 29201, 29201, 426513, 29201",
      /* 43213 */ "29201, 29201, 29201, 29201, 29201, 30951, 29201, 29201, 30954, 30955, 29201, 29201, 29201, 29201",
      /* 43227 */ "30959, 29201, 29201, 905745, 82470, 82470, 82470, 426534, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 43241 */ "82470, 905766, 29246, 29246, 29246, 29246, 30492, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 43255 */ "29246, 29246, 29246, 29246, 29246, 31551, 29246, 29201, 82470, 29246, 29246, 426558, 29246, 29246",
      /* 43269 */ "29246, 29246, 29246, 29246, 29246, 905790, 0, 3063, 3064, 3065, 0, 0, 0, 0, 390, 0, 0, 0, 0, 0, 0",
      /* 43290 */ "0, 367, 390, 0, 0, 0, 0, 0, 1564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 571, 572, 0, 0, 0, 0, 3067, 29201",
      /* 43317 */ "29201, 29201, 29201, 29201, 31744, 31745, 82470, 82470, 82470, 82470, 82470, 84998, 84999, 29246",
      /* 43331 */ "29246, 29246, 29246, 30520, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30528, 30530",
      /* 43345 */ "29246, 0, 0, 0, 0, 0, 638976, 761856, 0, 2747, 0, 0, 0, 0, 0, 2892, 29246, 29246, 29246, 29246",
      /* 43365 */ "31756, 31757, 0, 0, 0, 3088, 0, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 31325, 29201",
      /* 43381 */ "29201, 29201, 29201, 29201, 29201, 29201, 30355, 29201, 29201, 29201, 938513, 29201, 29201, 29201",
      /* 43395 */ "29201, 379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2746, 0, 0, 0, 69632, 73728, 0, 407, 407",
      /* 43421 */ "0, 0, 65536, 407, 0, 0, 0, 0, 0, 0, 37258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507, 512, 507, 507, 507, 507",
      /* 43447 */ "507, 0, 0, 435, 0, 0, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460",
      /* 43468 */ "460, 474, 0, 0, 346, 474, 346, 346, 496, 346, 346, 346, 460, 346, 460, 460, 460, 460, 460, 29218",
      /* 43488 */ "29218, 29218, 82487, 29263, 29218, 82487, 29218, 29218, 29218, 82487, 82487, 29218, 29218, 82487",
      /* 43502 */ "29263, 29263, 29263, 29263, 29263, 29263, 29263, 29263, 29263, 29263, 29218, 82487, 29218, 29263, 1",
      /* 43517 */ "12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 351, 0, 679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 43543 */ "0, 29870, 29201, 30302, 29534, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 43558 */ "82814, 82470, 82470, 82470, 82470, 82470, 83220, 82470, 82470, 83224, 82470, 82470, 82470, 82470",
      /* 43572 */ "82470, 82470, 82470, 82470, 82848, 82470, 571, 572, 0, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 43587 */ "29631, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29658, 29246, 29246, 595, 596",
      /* 43602 */ "188416, 0, 29246, 29201, 82470, 0, 29201, 29201, 29201, 29201, 29201, 82470, 82791, 82470, 82470",
      /* 43617 */ "82470, 82470, 82470, 82470, 614950, 82470, 82470, 82470, 82470, 82841, 82470, 29246, 29246, 29246",
      /* 43631 */ "29658, 29246, 78104, 87031, 0, 0, 0, 0, 0, 0, 728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1988, 0, 0, 0, 0, 0",
      /* 43657 */ "0, 29201, 29201, 29878, 29201, 29201, 29201, 29887, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 43672 */ "29201, 29201, 31175, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29932, 29201, 29201",
      /* 43686 */ "29201, 29201, 29938, 29201, 29201, 82470, 83214, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 43700 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 83253, 82470, 83276, 0, 0, 0, 0, 25941, 29870",
      /* 43716 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 30045, 29246, 29246, 29246, 29246, 30825, 29246",
      /* 43730 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29650, 29246, 29246",
      /* 43744 */ "29246, 29246, 29246, 30054, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 43758 */ "29246, 29246, 29246, 29246, 31066, 29246, 29246, 30116, 0, 0, 0, 0, 0, 30054, 29887, 83214, 29201",
      /* 43775 */ "29201, 29201, 29201, 82470, 82470, 82470, 82470, 84971, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 43789 */ "82470, 29246, 0, 0, 1485, 0, 0, 0, 1491, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41677, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 43816 */ "0, 0, 1578, 0, 1580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 29201, 29201, 29201",
      /* 43840 */ "30324, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 82470",
      /* 43854 */ "84441, 82470, 82470, 30335, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 30342, 29201",
      /* 43868 */ "29201, 29201, 29201, 29201, 29201, 29885, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 43882 */ "29201, 913937, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 83646, 82470, 82470, 82470",
      /* 43896 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83657, 82470, 82470, 82470, 83674",
      /* 43910 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 31537, 29246",
      /* 43924 */ "29246, 29246, 0, 0, 0, 1788, 25941, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 43940 */ "29246, 29246, 31075, 29246, 29246, 29246, 29246, 30502, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 43954 */ "29246, 29246, 29246, 29246, 30512, 29246, 29246, 29246, 29246, 29246, 29246, 811582, 29246, 29246",
      /* 43968 */ "29246, 29246, 29246, 29246, 999998, 29246, 29246, 1922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 43991 */ "131072, 0, 1971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1521, 0, 30686, 29201, 29201, 29201",
      /* 44014 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 893457, 29201",
      /* 44028 */ "30808, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 44042 */ "29246, 29246, 30488, 2210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 2267, 0, 0, 0",
      /* 44068 */ "0, 0, 0, 0, 0, 0, 0, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 44086 */ "30947, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 44100 */ "29201, 415341, 29201, 29201, 0, 0, 0, 0, 2423, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180224, 0, 0, 0, 0",
      /* 44125 */ "29201, 31157, 29201, 29201, 29201, 29201, 29201, 31163, 29201, 31164, 29201, 29201, 29201, 29201",
      /* 44139 */ "29201, 29201, 29886, 29201, 29201, 29201, 29201, 29895, 29201, 29201, 29201, 29201, 29246, 29246",
      /* 44153 */ "29246, 31239, 29246, 31240, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 44167 */ "31257, 29246, 29246, 29246, 29246, 29246, 29201, 31514, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 44181 */ "29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 83983, 82470, 82470, 82470, 82470",
      /* 44195 */ "82470, 84777, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246",
      /* 44209 */ "87031, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 325, 0, 0, 0, 0, 0, 0, 0, 0, 3038, 0, 0, 0, 29201, 29201",
      /* 44235 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 31329, 29201, 29201, 29201",
      /* 44249 */ "31720, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 84975, 82470",
      /* 44263 */ "29246, 29246, 29246, 29246, 30839, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 44277 */ "29246, 29246, 29246, 30109, 29246, 29246, 29246, 0, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377",
      /* 44300 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 356, 356, 0, 0",
      /* 44326 */ "65536, 356, 0, 0, 0, 0, 0, 0, 335872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 44354 */ "361, 0, 0, 0, 0, 0, 0, 0, 377, 0, 0, 356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98304, 0, 0, 0, 0",
      /* 44384 */ "0, 29219, 29219, 29219, 82488, 29264, 29219, 82488, 29219, 29219, 29219, 82488, 82488, 29219, 82488",
      /* 44399 */ "29264, 29264, 29264, 29264, 29264, 29264, 29264, 29264, 29264, 29264, 29219, 82488, 29219, 29264, 1",
      /* 44414 */ "12290, 3, 78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 29246, 29246, 29626, 29246, 29246, 29246, 29246",
      /* 44432 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31611, 0, 0, 0, 475136, 0, 0",
      /* 44449 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 29201, 29201, 29201, 29926, 29201, 29201, 29201",
      /* 44470 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 434705, 29201, 29201, 29201, 82470",
      /* 44484 */ "82470, 82470, 475686, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 44498 */ "82470, 31649, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 475710, 29246, 29246, 29246, 29246",
      /* 44512 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 31244, 29246, 29246, 31246, 29246, 29201, 610833",
      /* 44526 */ "29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 44540 */ "508433, 29201, 29201, 29201, 610854, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 44554 */ "82470, 82470, 82470, 82470, 82470, 82470, 497694, 347, 348, 349, 350, 0, 0, 351, 0, 86298, 0, 0, 0",
      /* 44573 */ "0, 0, 0, 0, 1065, 0, 0, 0, 0, 0, 0, 0, 0, 1567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347, 0, 0, 69632",
      /* 44601 */ "73728, 0, 0, 0, 0, 415, 65536, 0, 415, 415, 0, 0, 0, 0, 0, 2641, 0, 0, 0, 0, 0, 0, 2645, 0, 2646, 0",
      /* 44627 */ "415, 0, 348, 415, 444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 245760, 245760, 245760, 245760, 484",
      /* 44649 */ "487, 0, 487, 487, 487, 497, 498, 487, 510, 487, 510, 510, 510, 510, 510, 29220, 29220, 29220, 82489",
      /* 44668 */ "29265, 29220, 82489, 29220, 29220, 29220, 82489, 82489, 29220, 444, 444, 444, 444, 444, 444, 444",
      /* 44684 */ "444, 510, 510, 510, 510, 510, 510, 510, 510, 29220, 82489, 29265, 29265, 29265, 29265, 29265, 29265",
      /* 44701 */ "29265, 29265, 29265, 29265, 29220, 82489, 29220, 29265, 29279, 82532, 29279, 29289, 1, 12290, 3",
      /* 44716 */ "78104, 78104, 86298, 0, 0, 0, 0, 0, 288, 82470, 82838, 82470, 82470, 29246, 29246, 29655, 29246",
      /* 44733 */ "29246, 78104, 87031, 0, 0, 0, 0, 0, 0, 743, 0, 0, 0, 748, 0, 0, 0, 0, 0, 0, 393, 0, 0, 0, 0, 0, 0",
      /* 44760 */ "0, 0, 0, 387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29246, 30792",
      /* 44788 */ "29246, 29246, 0, 0, 0, 1073152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41677, 46170, 0, 0, 29201",
      /* 44811 */ "30983, 29201, 29201, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 44825 */ "82470, 344614, 82470, 82470, 84259, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 44839 */ "82470, 82470, 82470, 82470, 82470, 83641, 82470, 31057, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 44853 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30516, 0, 0, 0, 29221, 29221, 29221",
      /* 44869 */ "82490, 29266, 29221, 82490, 29221, 29221, 29221, 82490, 82490, 29221, 82490, 29266, 29266, 29266",
      /* 44883 */ "29266, 29266, 29266, 29266, 29266, 29266, 29266, 29221, 82490, 29221, 29266, 1, 12290, 3, 78104",
      /* 44898 */ "78104, 86298, 0, 0, 0, 0, 0, 288, 351, 0, 0, 0, 0, 681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225280, 0, 0",
      /* 44925 */ "0, 0, 0, 0, 0, 0, 0, 712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250304, 250304, 250304, 250304, 250304",
      /* 44949 */ "29246, 29246, 29627, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 44963 */ "29246, 29246, 29246, 528958, 29246, 0, 0, 1119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 0",
      /* 44987 */ "82470, 82470, 82470, 684582, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 45001 */ "82470, 82470, 83230, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 684606, 29246, 29246, 29246",
      /* 45015 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 547575, 29246, 29246, 29246, 29246, 0, 0, 0",
      /* 45031 */ "1487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114688, 0, 237568, 253952, 1784, 0, 0, 0, 25941, 29246",
      /* 45054 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 31384, 29246, 29246, 29246",
      /* 45068 */ "29246, 29246, 627217, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201, 29201",
      /* 45082 */ "29201, 29201, 29201, 29201, 791057, 29201, 29201, 29201, 627262, 29246, 29246, 29246, 29246, 29246",
      /* 45096 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 30531, 2199, 0, 0, 0, 0, 0, 0",
      /* 45114 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 241664, 82470, 82470, 82470, 84247, 82470, 82470, 82470, 82470, 82470",
      /* 45133 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 83247, 82470, 82470, 82470, 29246, 29246, 31045",
      /* 45147 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 45161 */ "537150, 29246, 289, 0, 0, 292, 293, 0, 0, 0, 0, 0, 0, 0, 348160, 0, 0, 0, 0, 0, 0, 720, 527, 528",
      /* 45185 */ "29535, 29201, 29201, 29201, 29201, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 45199 */ "82470, 82470, 82470, 82470, 82470, 82470, 82470, 83275, 82470, 82470, 82842, 82470, 348734, 29246",
      /* 45213 */ "29246, 29659, 29246, 78104, 87031, 0, 0, 0, 0, 0, 0, 760, 0, 0, 0, 797, 688861, 797, 0, 527, 528, 0",
      /* 45235 */ "0, 1502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 598016, 0, 0, 0, 0, 0, 790528, 0, 0, 0, 0, 0, 0, 0",
      /* 45264 */ "0, 0, 0, 0, 0, 155648, 155648, 0, 0, 29246, 29246, 29246, 29246, 415501, 29246, 29246, 29246, 29246",
      /* 45282 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 31396, 29246, 31398, 29246, 29246, 29246, 29246",
      /* 45296 */ "29246, 29246, 791102, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246",
      /* 45310 */ "29246, 29246, 651838, 29246, 29246, 0, 495616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1535, 0",
      /* 45333 */ "82470, 520742, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470, 82470",
      /* 45347 */ "82470, 82470, 84010, 82470, 82470, 82470, 1094182, 0, 0, 0, 0, 29246, 29246, 29246, 29246, 29246",
      /* 45363 */ "29246, 29246, 29246, 29246, 725566, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 1094206",
      /* 45377 */ "0, 0, 0, 0, 29246, 29201, 82470, 29201, 29201, 82470, 82470, 29246, 29246, 0, 1867, 0, 1873, 29246",
      /* 45395 */ "29201, 82470, 29201, 29201, 82470, 82470, 29246, 29246, 0, 1447, 1451, 0, 0, 30050, 29883, 83210",
      /* 45411 */ "29201, 29930, 29201, 29201, 82470, 83257, 29246, 29246, 31378, 29246, 29246, 29246, 29246, 29246",
      /* 45425 */ "29246, 29246, 29246, 29246, 29246, 29246, 29246, 29246, 29659, 29246, 29246, 651264, 0, 0, 0, 0, 0",
      /* 45442 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258048, 82470, 82470, 651814, 82470, 82470, 82470, 82470, 82470",
      /* 45461 */ "82470, 82470, 82470, 82470, 82470, 82470, 29246, 29246, 29246, 29246, 87031, 1469, 0, 0, 0, 1475, 0",
      /* 45478 */ "0, 0, 1481, 0, 431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1560, 0, 0, 0, 0, 0, 1101824, 0, 351",
      /* 45506 */ "0, 0, 0, 1101824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 172032, 172032, 0, 1101824, 0, 0",
      /* 45530 */ "0, 0, 0, 1101824, 0, 0, 0, 0, 0, 1101824, 0, 1101824, 1101824, 0, 0, 0, 0, 0, 1101824, 1101824",
      /* 45550 */ "1101824, 0, 0, 0, 1101824, 0, 0, 0, 0, 0, 0, 0, 0, 1101824, 0, 0, 1101824, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 45575 */ "0, 0, 1101824, 0, 0, 0, 0, 0, 0, 0, 1101824, 1102227, 1102227, 0, 0, 0, 0, 0, 1102227, 0, 0, 0, 0",
      /* 45598 */ "0, 0, 772, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 1101824, 1101824, 1101824",
      /* 45621 */ "1101824, 1101824, 1101824, 1101824, 1101824, 1101824, 1101824, 0, 1101824, 1101824, 1101824",
      /* 45632 */ "1101824, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 1105920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 45659 */ "0, 0, 1019904, 0, 0, 0, 0, 0, 1110016, 0, 1110016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 610304, 0, 0, 0, 0",
      /* 45685 */ "0, 0, 0, 1110477, 0, 0, 0, 0, 0, 0, 1110477, 0, 1110477, 1110477, 1110477, 1110477, 1110477, 1",
      /* 45703 */ "12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 288, 1110477, 1110477, 1110477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 45728 */ "0, 0, 217088, 0, 0, 0, 0, 0, 0, 0, 1118208, 0, 1118208, 0, 0, 0, 0, 1118208, 1118208, 0, 0, 1118208",
      /* 45750 */ "404, 404, 0, 0, 0, 0, 0, 404, 0, 0, 0, 0, 0, 0, 811, 0, 0, 811, 0, 811, 811, 811, 811, 811, 811",
      /* 45775 */ "811, 0, 0, 0, 0, 0, 0, 0, 935, 0, 1118208, 1118208, 0, 1118208, 0, 1118208, 1118208, 1118208",
      /* 45793 */ "1118208, 1118208, 1118208, 1118208, 1118208, 0, 1118208, 1118208, 1118208, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 45810 */ "0, 0, 0, 0, 0, 287249, 29201, 29201, 29201, 1118208, 1118208, 1118208, 1118208, 1, 12290, 3, 0, 0",
      /* 45828 */ "0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 1122304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 287294, 29246, 29246",
      /* 45854 */ "29246, 0, 0, 0, 0, 106496, 0, 106496, 0, 0, 0, 0, 106496, 106496, 0, 106496, 106496, 106496, 106496",
      /* 45873 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 45886; ++i) {TRANSITION[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] EXPECTED = new int[6270];
  static
  {
    final String s1[] =
    {
      /*    0 */ "879, 882, 884, 882, 888, 892, 896, 900, 904, 908, 2198, 1848, 920, 1396, 1849, 1849, 2353, 1071",
      /*   18 */ "1025, 914, 1849, 929, 2145, 1849, 1849, 2354, 973, 934, 935, 940, 941, 945, 961, 1849, 1850, 966",
      /*   36 */ "1849, 972, 973, 2355, 935, 935, 977, 941, 941, 988, 948, 1849, 2095, 2726, 1049, 973, 973, 934, 935",
      /*   55 */ "1023, 941, 941, 992, 996, 1849, 1009, 1279, 973, 983, 935, 1003, 941, 1015, 2121, 2727, 973, 1021",
      /*   73 */ "984, 941, 1035, 954, 1278, 1029, 936, 941, 1042, 1048, 1057, 1032, 1006, 1050, 1078, 1054, 1064",
      /*   90 */ "1068, 1060, 1075, 980, 1082, 1086, 1090, 1094, 1098, 1105, 1101, 1106, 1110, 1114, 1118, 1122, 1126",
      /*  107 */ "1849, 1222, 1849, 2702, 1456, 1849, 1849, 1849, 1849, 1961, 997, 1849, 1849, 1233, 1849, 1849, 1849",
      /*  124 */ "1849, 1849, 1849, 1849, 962, 1849, 1849, 1849, 1724, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849",
      /*  141 */ "1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849",
      /*  158 */ "1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849",
      /*  175 */ "1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849",
      /*  192 */ "1849, 1849, 1849, 1518, 1453, 1849, 1301, 1946, 1130, 1134, 1138, 1142, 1146, 1849, 1849, 1990, 1150",
      /*  209 */ "1475, 1154, 1536, 2299, 2300, 1158, 1162, 1849, 1193, 1417, 1167, 2538, 1171, 1501, 1849, 1664, 1849",
      /*  226 */ "1684, 2138, 1849, 1849, 1176, 1675, 1183, 1187, 1849, 1420, 1849, 998, 1421, 1849, 1179, 1227, 1192",
      /*  243 */ "1434, 1197, 1201, 1515, 1849, 1718, 1849, 1849, 1515, 1849, 1849, 1011, 1849, 1206, 1212, 1698, 1459",
      /*  260 */ "1849, 1884, 1849, 1163, 1849, 1216, 1696, 1038, 1849, 1220, 1010, 1738, 1208, 1226, 1231, 1237, 1893",
      /*  277 */ "2631, 1244, 1248, 1202, 1310, 1252, 2161, 2502, 1836, 1256, 1260, 1264, 1271, 2089, 1275, 1849, 1849",
      /*  294 */ "1547, 1849, 1843, 1283, 1287, 1291, 1295, 1298, 1383, 1849, 1305, 1314, 1318, 1326, 1330, 1337, 1348",
      /*  311 */ "1352, 1951, 1359, 1868, 1364, 1368, 1372, 2696, 1849, 1921, 1849, 2739, 1849, 1381, 2532, 2455, 2218",
      /*  328 */ "1387, 1391, 1410, 1395, 1849, 2175, 1849, 1849, 2176, 1849, 2297, 2034, 1400, 1658, 1405, 1409, 1958",
      /*  345 */ "1849, 2151, 2368, 1849, 1958, 1849, 1755, 2350, 1414, 1425, 1429, 1433, 1792, 1849, 2212, 1849, 1438",
      /*  362 */ "1442, 1446, 1450, 925, 1849, 1463, 1469, 1481, 1485, 1489, 1494, 1499, 1505, 1512, 1525, 1963, 2565",
      /*  379 */ "1529, 1533, 1540, 1544, 1558, 1562, 1566, 1570, 1574, 1578, 1582, 1586, 1849, 1308, 1017, 1591, 1595",
      /*  396 */ "1599, 1603, 1607, 1610, 2228, 1969, 1615, 1627, 1700, 1631, 1635, 2029, 1639, 1849, 2640, 2335, 1643",
      /*  413 */ "1647, 2525, 1651, 2544, 1849, 1655, 1849, 1340, 1849, 1849, 1662, 2086, 1668, 2116, 1672, 1910, 1682",
      /*  430 */ "1849, 1688, 1849, 1849, 1689, 1849, 1849, 1477, 1693, 1704, 2577, 1849, 917, 1849, 910, 1698, 1849",
      /*  447 */ "917, 1849, 1849, 2102, 1708, 2663, 1495, 1723, 1240, 1849, 2671, 1849, 1771, 1712, 2136, 1716, 968",
      /*  464 */ "1849, 1722, 1786, 1728, 1267, 2690, 1732, 1737, 1742, 1746, 2247, 1472, 1750, 1759, 2535, 1765, 1355",
      /*  481 */ "1375, 1761, 1775, 2310, 1377, 1779, 1783, 1849, 1699, 1790, 1796, 1800, 1804, 1808, 1812, 1816, 1849",
      /*  498 */ "2158, 2463, 1820, 1825, 1829, 1833, 1840, 1854, 1855, 1849, 2677, 999, 1859, 1874, 1878, 1882, 1865",
      /*  515 */ "1849, 2172, 1849, 1888, 1849, 1849, 1897, 1768, 1611, 1903, 1909, 909, 1914, 1849, 1321, 1849, 1849",
      /*  532 */ "1322, 1849, 1849, 1919, 2737, 2449, 1925, 1849, 2307, 1849, 1899, 1849, 1849, 2307, 1849, 1188, 1931",
      /*  549 */ "2425, 1935, 1905, 1849, 1623, 1849, 2385, 1849, 1941, 2474, 1849, 1950, 1998, 1360, 1849, 1955, 1967",
      /*  566 */ "951, 2478, 1172, 1587, 1973, 951, 1891, 2709, 1982, 1996, 2007, 1985, 2005, 1994, 2485, 2002, 2487",
      /*  583 */ "1849, 1849, 1849, 1849, 2055, 2511, 957, 2011, 2015, 2019, 2023, 2026, 1849, 1508, 1978, 2033, 2038",
      /*  600 */ "2042, 2046, 2050, 2128, 2129, 2054, 2509, 1927, 2060, 2066, 2073, 1849, 2077, 1849, 2093, 1849, 2366",
      /*  617 */ "2380, 1849, 2099, 2106, 2113, 2069, 2477, 2434, 2120, 1849, 2417, 1849, 1849, 2418, 2080, 1849, 2125",
      /*  634 */ "2133, 2142, 2149, 1849, 2155, 1849, 2721, 1849, 1849, 2155, 2410, 2056, 2165, 2169, 2180, 2657, 1849",
      /*  651 */ "2499, 1849, 2734, 2185, 2189, 2193, 2181, 2197, 923, 2062, 2202, 2206, 2210, 2216, 2242, 2715, 2222",
      /*  668 */ "2239, 2226, 2232, 2236, 2251, 2258, 2262, 2254, 2266, 2270, 2274, 2278, 2282, 2286, 2290, 2294, 1849",
      /*  685 */ "2619, 2304, 2314, 2318, 2322, 2326, 2330, 2334, 1849, 2339, 2343, 2347, 2359, 2363, 2373, 2377, 2389",
      /*  702 */ "2393, 1849, 2397, 2401, 2405, 2554, 2626, 1849, 2414, 1849, 2422, 1849, 2429, 2433, 2369, 2438, 2442",
      /*  719 */ "1401, 2446, 1849, 1490, 2453, 1849, 1343, 1849, 1849, 1344, 2461, 1849, 2467, 2471, 2482, 2491, 1849",
      /*  736 */ "2496, 1849, 2571, 1849, 1849, 2496, 1618, 1678, 2506, 2457, 1849, 2109, 1849, 1862, 1849, 2515, 2519",
      /*  753 */ "2523, 2529, 2646, 1849, 2542, 1937, 2548, 2552, 2558, 2563, 2569, 1521, 1846, 2575, 2581, 2585, 2589",
      /*  770 */ "1333, 1044, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 2492, 2594, 2598, 2602",
      /*  787 */ "2606, 2610, 2614, 1849, 1849, 2618, 2590, 2623, 2630, 2635, 2639, 2644, 2650, 2654, 1849, 2661, 1849",
      /*  804 */ "2667, 1821, 1849, 1849, 1976, 1849, 2675, 1849, 2681, 1849, 2559, 1849, 1550, 2685, 2689, 1849, 1849",
      /*  821 */ "2694, 1849, 1553, 1849, 1849, 1554, 2700, 1915, 1849, 2706, 2083, 1849, 1849, 1621, 1849, 1465, 1849",
      /*  838 */ "1849, 1621, 2713, 2245, 930, 1944, 1849, 1753, 1849, 1988, 1849, 2383, 1008, 1870, 2719, 1849, 1849",
      /*  855 */ "1849, 1849, 2725, 2669, 1849, 1849, 1849, 1849, 2731, 1849, 1849, 1849, 2408, 1849, 1849, 1849, 1849",
      /*  872 */ "1849, 1849, 1849, 1849, 1849, 1849, 1733, 2817, 3208, 2743, 2761, 2761, 2761, 2761, 2769, 2752, 2755",
      /*  889 */ "2759, 2762, 2748, 2766, 2746, 2773, 2777, 2784, 2797, 2788, 2790, 2794, 2801, 2780, 2805, 2809, 2813",
      /*  906 */ "2815, 2821, 2830, 2843, 2843, 2843, 2825, 3996, 5224, 2885, 2891, 2843, 2826, 3997, 2843, 2842, 2848",
      /*  923 */ "4558, 4598, 2843, 2843, 3787, 3705, 2897, 2843, 2843, 2843, 2980, 5220, 2878, 2878, 2878, 2878, 2880",
      /*  940 */ "2916, 2864, 2864, 2864, 2864, 2959, 2931, 2940, 2887, 2967, 2979, 2843, 2843, 4570, 2843, 2843, 4592",
      /*  957 */ "2843, 2843, 4630, 4305, 2968, 2843, 2843, 2843, 3114, 2948, 4560, 2843, 2843, 2837, 4059, 5216, 5219",
      /*  974 */ "5219, 5219, 5219, 2878, 5224, 2954, 2864, 2866, 4002, 5219, 2878, 2878, 2878, 5225, 2958, 2859, 3004",
      /*  991 */ "2963, 2957, 2972, 2860, 3005, 2976, 2980, 2843, 2843, 2843, 3262, 2911, 2881, 2864, 2864, 2864, 2922",
      /* 1008 */ "2843, 4593, 2843, 2843, 2843, 3423, 3194, 2858, 2987, 2843, 2843, 2849, 3330, 5219, 5221, 2878, 2878",
      /* 1025 */ "2864, 2864, 2919, 2874, 5219, 5219, 3600, 2878, 5223, 2864, 2864, 2986, 2868, 2843, 2843, 4714, 3445",
      /* 1042 */ "2993, 2934, 2843, 2843, 3120, 2843, 4561, 2843, 2843, 5219, 5219, 5222, 2868, 4561, 3599, 5219, 5219",
      /* 1059 */ "2876, 2878, 5224, 2864, 2867, 2877, 2878, 2864, 2865, 4559, 3116, 5219, 2875, 2878, 2878, 2855, 3116",
      /* 1076 */ "5219, 2876, 2878, 5224, 2864, 2992, 2876, 2879, 2864, 2867, 5218, 2879, 5226, 5217, 2997, 2866, 3003",
      /* 1093 */ "3000, 2988, 2925, 2927, 4523, 3009, 3013, 3017, 4638, 3034, 3023, 3027, 4638, 4638, 4638, 4638, 3019",
      /* 1110 */ "3031, 3038, 3042, 3046, 3050, 3054, 3058, 3062, 3065, 3069, 3073, 3076, 3080, 4637, 3084, 3088, 3092",
      /* 1127 */ "3096, 2832, 3799, 4751, 4691, 3125, 3137, 3141, 3141, 3141, 3145, 3148, 3152, 3155, 3159, 3162, 3164",
      /* 1144 */ "3166, 3170, 3377, 2843, 3183, 3374, 3193, 3199, 3212, 4275, 3228, 2843, 3240, 5098, 3286, 3295, 2843",
      /* 1161 */ "3694, 3299, 2843, 2843, 2843, 3424, 3305, 3312, 4868, 3615, 3357, 2843, 2843, 2843, 3431, 3472, 2843",
      /* 1178 */ "3581, 2843, 2843, 4992, 3430, 4370, 5027, 2843, 3398, 3403, 2843, 2843, 2843, 3449, 3300, 2843, 2843",
      /* 1195 */ "2843, 3474, 2843, 4703, 2843, 3627, 4780, 2843, 2843, 2843, 3479, 2843, 4702, 2843, 4813, 4781, 3454",
      /* 1212 */ "4780, 2843, 3937, 3399, 3938, 4704, 2843, 3440, 4715, 3446, 2843, 2843, 3202, 3101, 3460, 2843, 2843",
      /* 1229 */ "2843, 3592, 3455, 3461, 2843, 2843, 3214, 2843, 3937, 3456, 3194, 2843, 2843, 5120, 4031, 3465, 3194",
      /* 1246 */ "2843, 3179, 3470, 2843, 2843, 3466, 3346, 2843, 3345, 3376, 3358, 4253, 3345, 3194, 3664, 2843, 4713",
      /* 1263 */ "4017, 2843, 4712, 3663, 2843, 2843, 5198, 4069, 4019, 4017, 2843, 4019, 3359, 3360, 3361, 2843, 2843",
      /* 1280 */ "5218, 5219, 5219, 4220, 3903, 4313, 4693, 3586, 3493, 3497, 3499, 3505, 3501, 3509, 3513, 3514, 3514",
      /* 1297 */ "3518, 3519, 3523, 3526, 2843, 2849, 4905, 3120, 3236, 2843, 2843, 3358, 3844, 2843, 2843, 3347, 2843",
      /* 1314 */ "4312, 2843, 3262, 2836, 5039, 3539, 5104, 2843, 2851, 4258, 2843, 2843, 3544, 4199, 3342, 4645, 3475",
      /* 1331 */ "3205, 4214, 2843, 2901, 2843, 2900, 3550, 2843, 3554, 2843, 2950, 3908, 2843, 2982, 5021, 5025, 2843",
      /* 1348 */ "4233, 3565, 2843, 4233, 3565, 2843, 5177, 2843, 3103, 2843, 3663, 3571, 2843, 2843, 2843, 3659, 3805",
      /* 1365 */ "2843, 3262, 2836, 5039, 4991, 3272, 3585, 3590, 3596, 4212, 2843, 3104, 2843, 3762, 3665, 5072, 3734",
      /* 1382 */ "3614, 2843, 2843, 3255, 3532, 4003, 3673, 3619, 3626, 2850, 3740, 3651, 3344, 3631, 2843, 2843, 2843",
      /* 1399 */ "3783, 2899, 2843, 2843, 3693, 2868, 4988, 4583, 3644, 3379, 3650, 2843, 2843, 2843, 3860, 4889, 2843",
      /* 1416 */ "4314, 4371, 3199, 3212, 3262, 4717, 3408, 2843, 2843, 2901, 3671, 3677, 3797, 3652, 2843, 3786, 3790",
      /* 1433 */ "3692, 2843, 2843, 2843, 3937, 3567, 2843, 4447, 3658, 3870, 2843, 3359, 3194, 2903, 3540, 3698, 4020",
      /* 1450 */ "3786, 3704, 3684, 2843, 3184, 3375, 2843, 2843, 4985, 2843, 2843, 4716, 3428, 3788, 3706, 2843, 2843",
      /* 1467 */ "3307, 2843, 3566, 3710, 3241, 2843, 3195, 4076, 2843, 3218, 2843, 2843, 3189, 2843, 3871, 2843, 3673",
      /* 1484 */ "3748, 3715, 3700, 2843, 3574, 3693, 2843, 2843, 2843, 4007, 3575, 2843, 2843, 2843, 4037, 3097, 3576",
      /* 1501 */ "2843, 2843, 3336, 3340, 3722, 2843, 3952, 2843, 3222, 2843, 4183, 2902, 3540, 3732, 3241, 3436, 3404",
      /* 1518 */ "2843, 2843, 5118, 2843, 2843, 4954, 3321, 3738, 2843, 2843, 5267, 4540, 5266, 3246, 5265, 5269, 3262",
      /* 1535 */ "5268, 2843, 3252, 3261, 3267, 3951, 3746, 3242, 3246, 4192, 2843, 3243, 2843, 3256, 3533, 2843, 2843",
      /* 1552 */ "5254, 2843, 2843, 5273, 2843, 3803, 3744, 3748, 3244, 3262, 4194, 3241, 3245, 5074, 2904, 4194, 3242",
      /* 1569 */ "3246, 4193, 5073, 3747, 3879, 3877, 2843, 3879, 3882, 3753, 3759, 3754, 3767, 3768, 3755, 4514, 4516",
      /* 1586 */ "3772, 2843, 2843, 2843, 4092, 3678, 3779, 2843, 3794, 3314, 4254, 4902, 3810, 3814, 3818, 3819, 3819",
      /* 1603 */ "3823, 3827, 3831, 3831, 3835, 3839, 3839, 3839, 2843, 2843, 2843, 4150, 3854, 2843, 4261, 2843, 3290",
      /* 1620 */ "3271, 2843, 3308, 2843, 2843, 4279, 2843, 3942, 3864, 2843, 3763, 3378, 3131, 3875, 3886, 3894, 5263",
      /* 1637 */ "5085, 3368, 3918, 2843, 3919, 3918, 3923, 3785, 2843, 2824, 4230, 3928, 2843, 3663, 3231, 4311, 2936",
      /* 1654 */ "3936, 2843, 5041, 3948, 2843, 3359, 4313, 4004, 2843, 5195, 2843, 2843, 3351, 3355, 2869, 2843, 3943",
      /* 1671 */ "3642, 3992, 4512, 4371, 2843, 3383, 3389, 2843, 2843, 5051, 5063, 3969, 3973, 2843, 2843, 3366, 2843",
      /* 1688 */ "2843, 4978, 3978, 3430, 2843, 2843, 5001, 3982, 2843, 3444, 3448, 2843, 2843, 2843, 3566, 3868, 4262",
      /* 1705 */ "5060, 3643, 4895, 4694, 2870, 4015, 3763, 3785, 3939, 4802, 4045, 3786, 4058, 2843, 2843, 3398, 3419",
      /* 1722 */ "2838, 3376, 2843, 2843, 2843, 4260, 4530, 3663, 3246, 3282, 4032, 2843, 2843, 2843, 4311, 5200, 3194",
      /* 1739 */ "2843, 2843, 4538, 3449, 3782, 4531, 4053, 4310, 2843, 2843, 4075, 2843, 4693, 4053, 2843, 3449, 2843",
      /* 1756 */ "2843, 4393, 2843, 3102, 2843, 2843, 3105, 2843, 4020, 3665, 3102, 2843, 3760, 2912, 4204, 2843, 3449",
      /* 1773 */ "3534, 4041, 3762, 3102, 2843, 3761, 3102, 3664, 5006, 3760, 4080, 4082, 4054, 2843, 3450, 4151, 4063",
      /* 1790 */ "4135, 3376, 2843, 2843, 3411, 3682, 4879, 2843, 2843, 3263, 4086, 4091, 4090, 5210, 3385, 3115, 4773",
      /* 1807 */ "4097, 4104, 4100, 4108, 4112, 4116, 4122, 4118, 4126, 4128, 4128, 4128, 4130, 5249, 2844, 2843, 2843",
      /* 1824 */ "5236, 3359, 4880, 3535, 4155, 3733, 4178, 4161, 4165, 3281, 4173, 4605, 2843, 3485, 2843, 4797, 4177",
      /* 1841 */ "4182, 3327, 2843, 3489, 3781, 2843, 2849, 2899, 2843, 2843, 2843, 2843, 2944, 4189, 2843, 4205, 4198",
      /* 1858 */ "2843, 4203, 2843, 4005, 2843, 3557, 3561, 2843, 3566, 5246, 2843, 3580, 2843, 2843, 3248, 2843, 3359",
      /* 1875 */ "3390, 3644, 4209, 4376, 4583, 4218, 4224, 4228, 3379, 2843, 2843, 3435, 3447, 2843, 5244, 5248, 2843",
      /* 1892 */ "3660, 2843, 2843, 3653, 3301, 5127, 4242, 2843, 2843, 3591, 4273, 3727, 4376, 2843, 2843, 3591, 4445",
      /* 1909 */ "4757, 2843, 2843, 2843, 4412, 4248, 2843, 2843, 2843, 4419, 2843, 4656, 2843, 2843, 3604, 2843, 3733",
      /* 1926 */ "2843, 4185, 2843, 4435, 2834, 4557, 2843, 3944, 3246, 3733, 4184, 2843, 2843, 3622, 3480, 4092, 2843",
      /* 1943 */ "3686, 2843, 3725, 2843, 2843, 4301, 3128, 3661, 2843, 2843, 2843, 4447, 4093, 4465, 5096, 2843, 3775",
      /* 1960 */ "3415, 2843, 3110, 2843, 2843, 3133, 3739, 4999, 4209, 2843, 2843, 3644, 3850, 3687, 4527, 3646, 2843",
      /* 1977 */ "3857, 2843, 2843, 4071, 4005, 4290, 2849, 2843, 3391, 2843, 4528, 2843, 3889, 2843, 2843, 4426, 3188",
      /* 1994 */ "3393, 4526, 2843, 3390, 2843, 2843, 3662, 2843, 3391, 2843, 4529, 3392, 2843, 3393, 2843, 4148, 2843",
      /* 2011 */ "4309, 4681, 4318, 4326, 4381, 4330, 4334, 4338, 4344, 4340, 4348, 4352, 4355, 4358, 4362, 4363, 4364",
      /* 2028 */ "4368, 2843, 3900, 2843, 3919, 4375, 2843, 2843, 2843, 4448, 4804, 4728, 3106, 3246, 3786, 2843, 4386",
      /* 2045 */ "3711, 4380, 4385, 4390, 4397, 4404, 4410, 2843, 4416, 4430, 2843, 2843, 2843, 4562, 4471, 4868, 3733",
      /* 2062 */ "2843, 2843, 3718, 4599, 4804, 5017, 2843, 4440, 2843, 4475, 4483, 2843, 4762, 5232, 3940, 2843, 5065",
      /* 2079 */ "4458, 2843, 3912, 3914, 2843, 3937, 4760, 2843, 3961, 3924, 2843, 3360, 4742, 3361, 3566, 4452, 2843",
      /* 2096 */ "2843, 3749, 2949, 4470, 2843, 4606, 2843, 4001, 2843, 4011, 4436, 2835, 4869, 2843, 4006, 5079, 3376",
      /* 2113 */ "2843, 4803, 4027, 2843, 4046, 2843, 4406, 4491, 2843, 2843, 2843, 4591, 3220, 3224, 4185, 2843, 4047",
      /* 2130 */ "4424, 2843, 4431, 4505, 5250, 4933, 2843, 4051, 2843, 2843, 3372, 3376, 4478, 4509, 3845, 2843, 4065",
      /* 2147 */ "2908, 4558, 4941, 4520, 2843, 2843, 3774, 3414, 4675, 4497, 4674, 2843, 4134, 4139, 2843, 3484, 2843",
      /* 2164 */ "4795, 2843, 5256, 4005, 4544, 4477, 4282, 3845, 2843, 4238, 4259, 2843, 3635, 3639, 2843, 2843, 4550",
      /* 2181 */ "2843, 2843, 2843, 4597, 3937, 4611, 2843, 4168, 2843, 4587, 4867, 4934, 4479, 4284, 4268, 4661, 4603",
      /* 2198 */ "2843, 2843, 2843, 4935, 2843, 4610, 2843, 4169, 4369, 4615, 4803, 5195, 3846, 4965, 2843, 2843, 3789",
      /* 2215 */ "3691, 2843, 4619, 2843, 2843, 3806, 2843, 3528, 3474, 4625, 4634, 2843, 4665, 2843, 2843, 3843, 2843",
      /* 2232 */ "4670, 4525, 2843, 3273, 4666, 4611, 4679, 4642, 5197, 4660, 2843, 4285, 4620, 2843, 4293, 2843, 2843",
      /* 2249 */ "4295, 2843, 4688, 2843, 3955, 2843, 4322, 2843, 3956, 3954, 3652, 3953, 4699, 3332, 4710, 2843, 3955",
      /* 2266 */ "4708, 4712, 3953, 3957, 4320, 4525, 3954, 4736, 3985, 4683, 3652, 4722, 3534, 4735, 4741, 4683, 3652",
      /* 2283 */ "4734, 4683, 4740, 4684, 4767, 4748, 4766, 4767, 4771, 4777, 4785, 4788, 4789, 4793, 2843, 4392, 2843",
      /* 2300 */ "2843, 3277, 2843, 2843, 4861, 2843, 4801, 2843, 4442, 3785, 2843, 3666, 3762, 3760, 2893, 2843, 4808",
      /* 2317 */ "3987, 3362, 4002, 4812, 4817, 4821, 4825, 4830, 4826, 4834, 4838, 4842, 4846, 4850, 4853, 4853, 4853",
      /* 2334 */ "4856, 2843, 2843, 2843, 5001, 5188, 4860, 4530, 4865, 2843, 4873, 4878, 4884, 4888, 4268, 3105, 2843",
      /* 2351 */ "4446, 3657, 2843, 3116, 5219, 5219, 5219, 2875, 3870, 4730, 2843, 4546, 4893, 4899, 4730, 2843, 4456",
      /* 2368 */ "4802, 2843, 2843, 2843, 3896, 4909, 4695, 4157, 4915, 4919, 2843, 4725, 2843, 4462, 4464, 2843, 4001",
      /* 2385 */ "2843, 2843, 4444, 2843, 4021, 4924, 2843, 4021, 4924, 4744, 4930, 4939, 2843, 5189, 4945, 4532, 2843",
      /* 2402 */ "4604, 3176, 4754, 4950, 5096, 3105, 2843, 4486, 2843, 2843, 4536, 3939, 2843, 4648, 4652, 2843, 4495",
      /* 2419 */ "4501, 2843, 2843, 3546, 4969, 3194, 2843, 4526, 3535, 4209, 2981, 4650, 4654, 4269, 4973, 2843, 2843",
      /* 2436 */ "2843, 5066, 5032, 4982, 2843, 3173, 3177, 4996, 2843, 5005, 4959, 2843, 3270, 2843, 4527, 3645, 3728",
      /* 2453 */ "5011, 5015, 2843, 2843, 3869, 2843, 2843, 3280, 3289, 3291, 2843, 2843, 3881, 4145, 5031, 5036, 2843",
      /* 2470 */ "4874, 3801, 3974, 3762, 2843, 4528, 3717, 2949, 2843, 2843, 2843, 4571, 4889, 2843, 4958, 2843, 4529",
      /* 2487 */ "4526, 2843, 4528, 4526, 4976, 2843, 2843, 2843, 5115, 4006, 3965, 5046, 2843, 4554, 4567, 2843, 4251",
      /* 2504 */ "2843, 4796, 4466, 3178, 5070, 2843, 4562, 3223, 2843, 2843, 4299, 2843, 5078, 5083, 4563, 5111, 2843",
      /* 2521 */ "5089, 4371, 4926, 4879, 3246, 2843, 3566, 3932, 3871, 2843, 3281, 2843, 4562, 3257, 2843, 3104, 2843",
      /* 2538 */ "3784, 3318, 5007, 4718, 3621, 3561, 2843, 2843, 3906, 3910, 5110, 2843, 5090, 3685, 5094, 2843, 3869",
      /* 2555 */ "2843, 2868, 4958, 3234, 2843, 2843, 2843, 5182, 4952, 5102, 2843, 2843, 3951, 2902, 2843, 4953, 2843",
      /* 2572 */ "2843, 3964, 5045, 4090, 3280, 2843, 2843, 3991, 3248, 4911, 2843, 2843, 3672, 2899, 2843, 2843, 5108",
      /* 2589 */ "5111, 2843, 2843, 2843, 5186, 3942, 4232, 3941, 4231, 3279, 5054, 2949, 4399, 4400, 3324, 5124, 5131",
      /* 2606 */ "5135, 5138, 5142, 5146, 5150, 5156, 5152, 5160, 5167, 5164, 5171, 5175, 5181, 2843, 2843, 2843, 5189",
      /* 2623 */ "4572, 2843, 3247, 2843, 4562, 3272, 4963, 5193, 2843, 3540, 2843, 4515, 2843, 5204, 2843, 5208, 4141",
      /* 2640 */ "2843, 2843, 2843, 5196, 2843, 5057, 2843, 2843, 4006, 3560, 5214, 2843, 2843, 5214, 3667, 4628, 5230",
      /* 2657 */ "2843, 4562, 4577, 4582, 4562, 4420, 2843, 2843, 4025, 2843, 4572, 2843, 2843, 2980, 2843, 2843, 4036",
      /* 2674 */ "5047, 4920, 3890, 2843, 2843, 4134, 3781, 3121, 5274, 3359, 5241, 4487, 2844, 2843, 4946, 5237, 2843",
      /* 2691 */ "2843, 2843, 5199, 5260, 2843, 2843, 2843, 4234, 3610, 4742, 2843, 2843, 2843, 4244, 2843, 3786, 2843",
      /* 2708 */ "3394, 2843, 4571, 2843, 4465, 3804, 4743, 2843, 2843, 4286, 4621, 3473, 2843, 2843, 2843, 4496, 4673",
      /* 2725 */ "2843, 4590, 2843, 2843, 2843, 3116, 4590, 2843, 3248, 2843, 4576, 4581, 2843, 4266, 2843, 2843, 3608",
      /* 2742 */ "4802, 5294, 5297, 5309, 5330, 5329, 5330, 5330, 5330, 5426, 5308, 5309, 5310, 5330, 5330, 5330, 5611",
      /* 2759 */ "5309, 5311, 5330, 5330, 5330, 5330, 5324, 5311, 5295, 5326, 5330, 5330, 5330, 6076, 5330, 5330, 5342",
      /* 2776 */ "5368, 5343, 5344, 5368, 5362, 5347, 5373, 5375, 5369, 5362, 5362, 5362, 5364, 5363, 5364, 5364, 5364",
      /* 2793 */ "5364, 5345, 5362, 5346, 5345, 5362, 5346, 5363, 5361, 5367, 5365, 5371, 5374, 5377, 5378, 5381, 5380",
      /* 2810 */ "5383, 5384, 5383, 5384, 5386, 5388, 5390, 6005, 5278, 5284, 5305, 5754, 6002, 5758, 5331, 5305, 5305",
      /* 2827 */ "5305, 5890, 5915, 5332, 5402, 5403, 5305, 5305, 5336, 5281, 5305, 5305, 5317, 6097, 5923, 5392, 5305",
      /* 2844 */ "5305, 5305, 5305, 5281, 6033, 5305, 5906, 5305, 5305, 5613, 5398, 5726, 5489, 5405, 5489, 5410, 5410",
      /* 2861 */ "5728, 5897, 5348, 5489, 5489, 5489, 5489, 5406, 5305, 5305, 5305, 5331, 5305, 5893, 5348, 5348, 5892",
      /* 2878 */ "5726, 5726, 5726, 5726, 5727, 5489, 5489, 5428, 5438, 5400, 5400, 5400, 5435, 5594, 5594, 5305, 5305",
      /* 2895 */ "5280, 5305, 5305, 6074, 5760, 5305, 5305, 5305, 5291, 5305, 5287, 5305, 5404, 5305, 5774, 5415, 5305",
      /* 2912 */ "5287, 5760, 5753, 5999, 5727, 5489, 5598, 5489, 5410, 5412, 5728, 5892, 5727, 5406, 5892, 5406, 5892",
      /* 2929 */ "5406, 5305, 5892, 5348, 5348, 5726, 5489, 5305, 5305, 5282, 5305, 5726, 5489, 5489, 5794, 5450, 5305",
      /* 2946 */ "5773, 5774, 5415, 5596, 5305, 5305, 5305, 5334, 5489, 5489, 5405, 5489, 5489, 5489, 5410, 5410, 5597",
      /* 2963 */ "5489, 5490, 5400, 5400, 5594, 5594, 5594, 5594, 5403, 5410, 5410, 5410, 5410, 5490, 5400, 5435, 5594",
      /* 2980 */ "5403, 5305, 5305, 5305, 5335, 6031, 5728, 5897, 5892, 5727, 5406, 5892, 5489, 5489, 5489, 5892, 5348",
      /* 2997 */ "5892, 5726, 5726, 5727, 5489, 5406, 5912, 5348, 5892, 5726, 5727, 5489, 5660, 5313, 5462, 6004, 5461",
      /* 3014 */ "5466, 5878, 5501, 5473, 5441, 5462, 5462, 5466, 5462, 5396, 5463, 5464, 5469, 5471, 5478, 5473, 5480",
      /* 3031 */ "5467, 5482, 5472, 5462, 5458, 5460, 5465, 5462, 5462, 5476, 5483, 5462, 5462, 5487, 5475, 5313, 5497",
      /* 3048 */ "5503, 5516, 5498, 5499, 5500, 5474, 5518, 5520, 5523, 5523, 5521, 5524, 5522, 5564, 5525, 5525, 5525",
      /* 3065 */ "5525, 5526, 5529, 5530, 5529, 5529, 5529, 5528, 5532, 5533, 5535, 5538, 5538, 5536, 5537, 5541, 5539",
      /* 3082 */ "5543, 5538, 5545, 5396, 5553, 5555, 5557, 5561, 5560, 5558, 5563, 5564, 5566, 5539, 5568, 5305, 5305",
      /* 3099 */ "5305, 5338, 5761, 5305, 5305, 5305, 5339, 5305, 5305, 5305, 5340, 6206, 5584, 5305, 5604, 5305, 5998",
      /* 3116 */ "5305, 5305, 5305, 5348, 5291, 5305, 5305, 5305, 5352, 5956, 5617, 5955, 5875, 5415, 5494, 5305, 5292",
      /* 3133 */ "5305, 5305, 5399, 5814, 5616, 5876, 6156, 5620, 5621, 5621, 5621, 5621, 5623, 5629, 5628, 5629, 5624",
      /* 3150 */ "5631, 5625, 5626, 5633, 5633, 5633, 5637, 5637, 5639, 5638, 5637, 5634, 5635, 5635, 5635, 5635, 5641",
      /* 3167 */ "5641, 5642, 5645, 5643, 5647, 5648, 5305, 5305, 6190, 5760, 6110, 6168, 5305, 5305, 5421, 5417, 5305",
      /* 3184 */ "5775, 5724, 6155, 5549, 5651, 5305, 5305, 5305, 5357, 5697, 6008, 5305, 5305, 5305, 5395, 5305, 5957",
      /* 3201 */ "5653, 5305, 5305, 6202, 5305, 5288, 5994, 5305, 5290, 5298, 5610, 5305, 6006, 5305, 5305, 5312, 5305",
      /* 3218 */ "5305, 6098, 5305, 5305, 5313, 5338, 5299, 6170, 5305, 5305, 5665, 5305, 5677, 5305, 5305, 6212, 5305",
      /* 3235 */ "5313, 5305, 5305, 5866, 5702, 6009, 5305, 5305, 5305, 5399, 5706, 5911, 5305, 5305, 5305, 5403, 5305",
      /* 3252 */ "5683, 5305, 5689, 5305, 5313, 5398, 5780, 5452, 5760, 5691, 5305, 5305, 5305, 5404, 5286, 5305, 5666",
      /* 3269 */ "5668, 5305, 5313, 5418, 5305, 5305, 5305, 5658, 5667, 5670, 5305, 5305, 5314, 5305, 5305, 5305, 5963",
      /* 3286 */ "5669, 5670, 5752, 5305, 5313, 5418, 5313, 5418, 5305, 5751, 5305, 5305, 5752, 5759, 5588, 5710, 6008",
      /* 3303 */ "5305, 5305, 6207, 5693, 5305, 5305, 5317, 6268, 5305, 5450, 6099, 5305, 5305, 5318, 5835, 5917, 5305",
      /* 3320 */ "5790, 5305, 5314, 5314, 5314, 6214, 6215, 5305, 5316, 5982, 5305, 5317, 5305, 5773, 5305, 5661, 5399",
      /* 3337 */ "5393, 5723, 5778, 5699, 5551, 5305, 5305, 5321, 5305, 5305, 5305, 5717, 5285, 5305, 5404, 5795, 5417",
      /* 3354 */ "5672, 5725, 5700, 5304, 5305, 5305, 5305, 5421, 5305, 5305, 5305, 5430, 5302, 5303, 5305, 5305, 5322",
      /* 3371 */ "5305, 5671, 6188, 5549, 5660, 5285, 5305, 5305, 5305, 5351, 5305, 5305, 5705, 5730, 5305, 5305, 5327",
      /* 3388 */ "5281, 5821, 5305, 5305, 5305, 5438, 5305, 5305, 5305, 5446, 5399, 5492, 5723, 5778, 5715, 6178, 6210",
      /* 3405 */ "5825, 5656, 5305, 6179, 5824, 5654, 5305, 5319, 5399, 5904, 5423, 5425, 5823, 6002, 6169, 6210, 5825",
      /* 3422 */ "5656, 5305, 5671, 5712, 5710, 6008, 5714, 5825, 5656, 5305, 5305, 5305, 5449, 5902, 5492, 5723, 5778",
      /* 3439 */ "6169, 5305, 6206, 5305, 5453, 5491, 5417, 5724, 5715, 5654, 5305, 5305, 5305, 5450, 5305, 5305, 5902",
      /* 3456 */ "5492, 5723, 5714, 6181, 5714, 6181, 6008, 5305, 5305, 5305, 6032, 6187, 6181, 6008, 5712, 5285, 5305",
      /* 3473 */ "5305, 5332, 5305, 5305, 5305, 5408, 5753, 5710, 6008, 5305, 5313, 5305, 5753, 6008, 5305, 5305, 5866",
      /* 3490 */ "5305, 5592, 5720, 5281, 5891, 5805, 5663, 5722, 6264, 5734, 5734, 5734, 5734, 5735, 5737, 5734, 5733",
      /* 3507 */ "5734, 5734, 5742, 5738, 5737, 5738, 5741, 5740, 5740, 5740, 5740, 5740, 5744, 5744, 5744, 5744, 5744",
      /* 3524 */ "5746, 5746, 5746, 5747, 5305, 5305, 5332, 5332, 5452, 6180, 5305, 5305, 5305, 5585, 5305, 5750, 5305",
      /* 3541 */ "5305, 5418, 5305, 5765, 6190, 5305, 5305, 5337, 5504, 5919, 5920, 5305, 5991, 5305, 5770, 5772, 5305",
      /* 3558 */ "5338, 5422, 5766, 5549, 5710, 6008, 5305, 5771, 5305, 5305, 5305, 5613, 5801, 5451, 5548, 5589, 5305",
      /* 3575 */ "5338, 5808, 5810, 6211, 5305, 5701, 5305, 5305, 5305, 5653, 5899, 5305, 5305, 5305, 5662, 5765, 5305",
      /* 3592 */ "5305, 5305, 5671, 5708, 5321, 5697, 5674, 5305, 5348, 5348, 5348, 5892, 5895, 6118, 5822, 6001, 5894",
      /* 3609 */ "5896, 6119, 5829, 6002, 5305, 5901, 5305, 5305, 5305, 5696, 5413, 5730, 5305, 5305, 5337, 5766, 5549",
      /* 3626 */ "6100, 5305, 5305, 5305, 5705, 5423, 5425, 5828, 6171, 5305, 5797, 5355, 5593, 5424, 5452, 5823, 6002",
      /* 3643 */ "5675, 5305, 5305, 5305, 5906, 5305, 5569, 5788, 5724, 5661, 5305, 5305, 5305, 5712, 5399, 5451, 5305",
      /* 3660 */ "5305, 5305, 5748, 5305, 5305, 5305, 5753, 5305, 5305, 5305, 5455, 5287, 5305, 5305, 5305, 5758, 5305",
      /* 3677 */ "5418, 5305, 5305, 5906, 5317, 5423, 5425, 5550, 5305, 5305, 5305, 5760, 5861, 5305, 5424, 5999, 6211",
      /* 3694 */ "5305, 5305, 5305, 5724, 5585, 5305, 5351, 5671, 5429, 5305, 5338, 5903, 5433, 5425, 5550, 5305, 5801",
      /* 3711 */ "5305, 5305, 5305, 5763, 5418, 5305, 5585, 5305, 5305, 6003, 6106, 5305, 5801, 5351, 5305, 5350, 5305",
      /* 3728 */ "5305, 6102, 5305, 5305, 5906, 5671, 5305, 5305, 5305, 5786, 5814, 5587, 5305, 5305, 5305, 5788, 5399",
      /* 3745 */ "5305, 5758, 5305, 5413, 5305, 5305, 5305, 5773, 5404, 5394, 5305, 5305, 5413, 5305, 5705, 5305, 5305",
      /* 3762 */ "5404, 5305, 5305, 5305, 5855, 5305, 6206, 5305, 5305, 6206, 5394, 5394, 5305, 5305, 5353, 5349, 5904",
      /* 3779 */ "5831, 5827, 5824, 5305, 5305, 5305, 5589, 5305, 5305, 5305, 5317, 5338, 5903, 5593, 5424, 5305, 5998",
      /* 3796 */ "5902, 5305, 5351, 5305, 5724, 5893, 5305, 5305, 5600, 5305, 5600, 5305, 6008, 5305, 5305, 6152, 5679",
      /* 3813 */ "6151, 5837, 5450, 5838, 5679, 5680, 5681, 5681, 5681, 5681, 5681, 5840, 5843, 5842, 5851, 5843, 5853",
      /* 3830 */ "5844, 5845, 5845, 5845, 5845, 5847, 5846, 5845, 5848, 5849, 5849, 5849, 5849, 5421, 5547, 5305, 5305",
      /* 3847 */ "5305, 5861, 5305, 5317, 5305, 5305, 5320, 5832, 5866, 5875, 5305, 5352, 5913, 5305, 5352, 5916, 5356",
      /* 3864 */ "6072, 5305, 5305, 5729, 5859, 5305, 5305, 5305, 5866, 5305, 5305, 5305, 5865, 5305, 5305, 5399, 5818",
      /* 3881 */ "5305, 5305, 5339, 5413, 5305, 5868, 5305, 5605, 5305, 5357, 5305, 5305, 5305, 5575, 5351, 5305, 5305",
      /* 3898 */ "5401, 5416, 5333, 5872, 5874, 5305, 5357, 5312, 5305, 5334, 5546, 5776, 5880, 5301, 5305, 5305, 5419",
      /* 3915 */ "5305, 5419, 5305, 5873, 5305, 5305, 5305, 5871, 5337, 5413, 5571, 6211, 5589, 5305, 6073, 5305, 5729",
      /* 3932 */ "5755, 5305, 5305, 5306, 5788, 5305, 5305, 5305, 5902, 5305, 5305, 5596, 5305, 5305, 6074, 5305, 5905",
      /* 3949 */ "5437, 5300, 5305, 5399, 5305, 5305, 5305, 5776, 5715, 5661, 5305, 5305, 5585, 5317, 5305, 5337, 5354",
      /* 3966 */ "5422, 5782, 5299, 5915, 5905, 5437, 6209, 5857, 5305, 5305, 5305, 5911, 6097, 5776, 5880, 5884, 5831",
      /* 3983 */ "5571, 6211, 5589, 5421, 5305, 5305, 5703, 5305, 5887, 6008, 5305, 5656, 5305, 5915, 5905, 6208, 5709",
      /* 4000 */ "5654, 5450, 5305, 5305, 5305, 5912, 5305, 5305, 5305, 5337, 5488, 5906, 6006, 5413, 5833, 5305, 6061",
      /* 4017 */ "5305, 5305, 5421, 5429, 5305, 5305, 5305, 5506, 5887, 6008, 5305, 5305, 5421, 5918, 5609, 5888, 6008",
      /* 4034 */ "5305, 5305, 5305, 5890, 6097, 5608, 5962, 5317, 5305, 5832, 6211, 5305, 5855, 5305, 5305, 5305, 5907",
      /* 4051 */ "5305, 5963, 5305, 5305, 5429, 5305, 5305, 6097, 5923, 5285, 5305, 5305, 5671, 5875, 5305, 5305, 5432",
      /* 4068 */ "5305, 5905, 5888, 6008, 5305, 5418, 6003, 5395, 6014, 6008, 5305, 5305, 5305, 5753, 5305, 5339, 5305",
      /* 4085 */ "5339, 6074, 5694, 6208, 6000, 5305, 6211, 5305, 5305, 5792, 5305, 5305, 5783, 6196, 6174, 5931, 5931",
      /* 4102 */ "5932, 5929, 5932, 5931, 5931, 5937, 5931, 5934, 5930, 5936, 5939, 5940, 5943, 5944, 5943, 5942, 5946",
      /* 4119 */ "5946, 5946, 5946, 5946, 5949, 5946, 5951, 5946, 5947, 5953, 5953, 5953, 5953, 5954, 5305, 5613, 5319",
      /* 4136 */ "5593, 5782, 5824, 5824, 5285, 5305, 5305, 5439, 5305, 6074, 5305, 5718, 5911, 5305, 5438, 5305, 5305",
      /* 4153 */ "5585, 5317, 5572, 5453, 5305, 5305, 5445, 5597, 5967, 5305, 5305, 5969, 5305, 5971, 5973, 5305, 5404",
      /* 4170 */ "5452, 5305, 5305, 5975, 5305, 5305, 5977, 5980, 5305, 5305, 5305, 5965, 5315, 5305, 5305, 5305, 5978",
      /* 4187 */ "5305, 5305, 5333, 5986, 5990, 5305, 5404, 5817, 5587, 5305, 5305, 5989, 5305, 5305, 5305, 5983, 5999",
      /* 4204 */ "5927, 5305, 5305, 5305, 5985, 5305, 6003, 5596, 5305, 5407, 5305, 5919, 5768, 5305, 5305, 5993, 5305",
      /* 4221 */ "5305, 5450, 5600, 5305, 5955, 5305, 6190, 5305, 6011, 5305, 5305, 5569, 5305, 5305, 5305, 5894, 5896",
      /* 4238 */ "5305, 5890, 6031, 5444, 6016, 5589, 5305, 5305, 5574, 5305, 5443, 5448, 6205, 5305, 5421, 5279, 5305",
      /* 4255 */ "5305, 5305, 5453, 5447, 6204, 5305, 5305, 5305, 5998, 5332, 5305, 5287, 5760, 5861, 5305, 5305, 5305",
      /* 4272 */ "6186, 6203, 5589, 5305, 5305, 5579, 6104, 5305, 5672, 5449, 5305, 5421, 5593, 5305, 5305, 5305, 6106",
      /* 4289 */ "6208, 5861, 5305, 6191, 5305, 5442, 5305, 5305, 6097, 5285, 5305, 6189, 5305, 5305, 5585, 5596, 5866",
      /* 4306 */ "6100, 5305, 5484, 5967, 5305, 5305, 5305, 6007, 5305, 5305, 5305, 5600, 5978, 5671, 5305, 5305, 5585",
      /* 4323 */ "5959, 5660, 5305, 5826, 5305, 5305, 6020, 5313, 6027, 6022, 6024, 6026, 6029, 5318, 6035, 5318, 6037",
      /* 4340 */ "5318, 5318, 6041, 6042, 5318, 6039, 6035, 6037, 6044, 6042, 6042, 6046, 6053, 6047, 6047, 6056, 6055",
      /* 4357 */ "6056, 6047, 6049, 6048, 6047, 6050, 6051, 6051, 6051, 6051, 6058, 6058, 5305, 5305, 5305, 6008, 5305",
      /* 4374 */ "5305, 5955, 5305, 5671, 5305, 5305, 5578, 5305, 5305, 5305, 6023, 6063, 5305, 5305, 5305, 6060, 5997",
      /* 4391 */ "5305, 5305, 5358, 5359, 5305, 5305, 6065, 5305, 5569, 5305, 5313, 5569, 6102, 5305, 6069, 5305, 5305",
      /* 4408 */ "5613, 5882, 6071, 5911, 5305, 5305, 5613, 6005, 5305, 5908, 6086, 5305, 5442, 5600, 5305, 5305, 5909",
      /* 4425 */ "5686, 5305, 5305, 5650, 5305, 5305, 5684, 5686, 5305, 5685, 5305, 6007, 5305, 6100, 5305, 5613, 5911",
      /* 4442 */ "5305, 5305, 5671, 6203, 5305, 5305, 5305, 6005, 5399, 5451, 6080, 6084, 5910, 5863, 5802, 6081, 6085",
      /* 4459 */ "5862, 6002, 5305, 6193, 5305, 6193, 5305, 5305, 5305, 6074, 5613, 5803, 6088, 5452, 6211, 5305, 5305",
      /* 4476 */ "6090, 5305, 5305, 5675, 5674, 5305, 5421, 5305, 5753, 5902, 5305, 5446, 5305, 5305, 5305, 5793, 5806",
      /* 4493 */ "5819, 5888, 5613, 6080, 5799, 5782, 6092, 5960, 6092, 5960, 6094, 6002, 6007, 6100, 6003, 5912, 5305",
      /* 4510 */ "5904, 5403, 5305, 5446, 5394, 5305, 5394, 5305, 5305, 5394, 5753, 5332, 5569, 5305, 5446, 5660, 5305",
      /* 4527 */ "5305, 5305, 6191, 5305, 5305, 5305, 6002, 5305, 5280, 5305, 5902, 5305, 5902, 5305, 6100, 5906, 5305",
      /* 4544 */ "5661, 5671, 5305, 5305, 5687, 5312, 5305, 5753, 5332, 5596, 5305, 6096, 5799, 5782, 5305, 5305, 5305",
      /* 4561 */ "6003, 5305, 5305, 5305, 5313, 5313, 6092, 5960, 5820, 5305, 5449, 5305, 5305, 5305, 6006, 5313, 5798",
      /* 4578 */ "5658, 5793, 5806, 5806, 5819, 5305, 5305, 5305, 6100, 5305, 6007, 6100, 5336, 5305, 5305, 5305, 5336",
      /* 4595 */ "5305, 5305, 6003, 6106, 5437, 5452, 5811, 5305, 5811, 5305, 5305, 5305, 6190, 5305, 5305, 5902, 5902",
      /* 4612 */ "5902, 5305, 5305, 5418, 5281, 5955, 5571, 6106, 6208, 5960, 5674, 5305, 5305, 5305, 5998, 5453, 5305",
      /* 4629 */ "5454, 5305, 5305, 5978, 6007, 6007, 5305, 6108, 5305, 5462, 5462, 5462, 5462, 5305, 5675, 5589, 5305",
      /* 4646 */ "5485, 5995, 5305, 5335, 6176, 6116, 6118, 6184, 6067, 5305, 5305, 5305, 5781, 6018, 5911, 5753, 5332",
      /* 4663 */ "5305, 5305, 5658, 5452, 5588, 5661, 5902, 5305, 5657, 6208, 5960, 6094, 5305, 5305, 5305, 6080, 5305",
      /* 4680 */ "5773, 5305, 5955, 5305, 5305, 5585, 5659, 5305, 5600, 5305, 5779, 5305, 5495, 5305, 5875, 5305, 5305",
      /* 4697 */ "5305, 5602, 5715, 5661, 5400, 5332, 5305, 6100, 6190, 5305, 5305, 5773, 5661, 5305, 5659, 5305, 5717",
      /* 4714 */ "5305, 5305, 5305, 5491, 5417, 5672, 5725, 5700, 5305, 5776, 5660, 5305, 5507, 5509, 5305, 5514, 5305",
      /* 4731 */ "5305, 5597, 5305, 5585, 5659, 5661, 5305, 5661, 5675, 5661, 5659, 5305, 5600, 5305, 5305, 5305, 5511",
      /* 4748 */ "5585, 5659, 5659, 5305, 5569, 5607, 5305, 5305, 6173, 5305, 5305, 6190, 5613, 5305, 5305, 5305, 6078",
      /* 4765 */ "5305, 5600, 5305, 5776, 5589, 5305, 5776, 5958, 5305, 5600, 5421, 5925, 5585, 5730, 5585, 5730, 5305",
      /* 4782 */ "5453, 5305, 5305, 5585, 5777, 5305, 5730, 5777, 5777, 5777, 5777, 5777, 5730, 5305, 5305, 5717, 6008",
      /* 4799 */ "5305, 5305, 5305, 6002, 5305, 5305, 5305, 5673, 5305, 5305, 5883, 6110, 5703, 6112, 5305, 5305, 5305",
      /* 4816 */ "6206, 6149, 6150, 5339, 6114, 6115, 5404, 5869, 5405, 6122, 6122, 6122, 6122, 6125, 6122, 6123, 6122",
      /* 4833 */ "6121, 6127, 5489, 6131, 6130, 6129, 6130, 6135, 6133, 6138, 6139, 6140, 6140, 6141, 6137, 6138, 6134",
      /* 4850 */ "6138, 6133, 6143, 6145, 6145, 6145, 6145, 6146, 6147, 6148, 5493, 5827, 5589, 5305, 5305, 5305, 6007",
      /* 4867 */ "5281, 5305, 5305, 5661, 5305, 5571, 5305, 5978, 6074, 5613, 5914, 5914, 5893, 5305, 5305, 5305, 5926",
      /* 4884 */ "5430, 5305, 5305, 6154, 5420, 5305, 5305, 5305, 6211, 5305, 6158, 5305, 5305, 5753, 5911, 6160, 5305",
      /* 4901 */ "5612, 5305, 5569, 5773, 5596, 5775, 5569, 5775, 5305, 6162, 5305, 5305, 5759, 5305, 6164, 5305, 5601",
      /* 4918 */ "5456, 6166, 5305, 5305, 5305, 6263, 5508, 5510, 5305, 5305, 5760, 6198, 5513, 5305, 5512, 5305, 5571",
      /* 4935 */ "5305, 5305, 5305, 6075, 5511, 5513, 5305, 5305, 5762, 5305, 5715, 5305, 5305, 5305, 6266, 5305, 6192",
      /* 4952 */ "5305, 5305, 5766, 5549, 5710, 5305, 5305, 6208, 5305, 5305, 5305, 5505, 5305, 5305, 5305, 5779, 5305",
      /* 4969 */ "5595, 6117, 6183, 6066, 5305, 6186, 5305, 6186, 5305, 5305, 5305, 5802, 5319, 6061, 5305, 5280, 5305",
      /* 4986 */ "5577, 5581, 5305, 5291, 5305, 6082, 5305, 5305, 5305, 5655, 5317, 5600, 5305, 5438, 5305, 5305, 5906",
      /* 5003 */ "6006, 5305, 5911, 5404, 5305, 5305, 5404, 5795, 5422, 6103, 6118, 6209, 5856, 5285, 5305, 5305, 5784",
      /* 5020 */ "5305, 5595, 5782, 5425, 5549, 5885, 6008, 5305, 5305, 5789, 5791, 5902, 5815, 5589, 5305, 5305, 5305",
      /* 5037 */ "6002, 6007, 5281, 5758, 5305, 5305, 5333, 6199, 5299, 5549, 5962, 5285, 5305, 5305, 5305, 6195, 5453",
      /* 5054 */ "5305, 5585, 5618, 5305, 5590, 5357, 5305, 5596, 6074, 6002, 6007, 5305, 5305, 5802, 6081, 5658, 5305",
      /* 5071 */ "5861, 5339, 5305, 5305, 5404, 5332, 5291, 5337, 5599, 6177, 5759, 5961, 5961, 5285, 5305, 5305, 5860",
      /* 5088 */ "5305, 5305, 5902, 5906, 6061, 5305, 5765, 5305, 5305, 5911, 5305, 5305, 5582, 5678, 5710, 5305, 5305",
      /* 5105 */ "5305, 5898, 5757, 5305, 5759, 5313, 5313, 5305, 5305, 5305, 6201, 5599, 5570, 5305, 5613, 5305, 5613",
      /* 5122 */ "5877, 5905, 5317, 6215, 5318, 5305, 5613, 6013, 5436, 6217, 5397, 6219, 6233, 6220, 6232, 6233, 6236",
      /* 5139 */ "6233, 6233, 6237, 6239, 6237, 6238, 6221, 6222, 6234, 6223, 6241, 6224, 6224, 6225, 6225, 6246, 6226",
      /* 5156 */ "6243, 6244, 6243, 6243, 6226, 6227, 6228, 6228, 6229, 6248, 6248, 6248, 6230, 6228, 6230, 6251, 6249",
      /* 5173 */ "6253, 6253, 6255, 6255, 5305, 5305, 5900, 5786, 5305, 6201, 5599, 5305, 5305, 5305, 6207, 5305, 5305",
      /* 5190 */ "5902, 5414, 5493, 5305, 5921, 5305, 5305, 5904, 5305, 5305, 5305, 5877, 5905, 5888, 5305, 5731, 5305",
      /* 5207 */ "6257, 6259, 5305, 5305, 5305, 5912, 5312, 5591, 5305, 5305, 5305, 5912, 5348, 5348, 5348, 5348, 5726",
      /* 5224 */ "5726, 5726, 5489, 5489, 5489, 5305, 5455, 5305, 5305, 5305, 5996, 5305, 6261, 5613, 5305, 5287, 5305",
      /* 5241 */ "5421, 5305, 5421, 5305, 5613, 6030, 5422, 5987, 6205, 5305, 5305, 5305, 5955, 5317, 5305, 5305, 5305",
      /* 5258 */ "6008, 6101, 5317, 5804, 5357, 5305, 5614, 5305, 5305, 5404, 5813, 5586, 5911, 5305, 5305, 5319, 5913",
      /* 5275 */ "5305, 5305, 5305, 8, 262144, -2147483648, 64, 0, -1610612736, 1048576, 1073741824, -2147483648, 256",
      /* 5288 */ "0, -1182793728, 1075838976, 2097152, 0, -519045120, 4194560, 4196352, 276901888, 270532608, 2097152",
      /* 5299 */ "2097152, 4194304, -251658240, 0, -402653184, -402653184, 0, 0, -520093696, 3145728, 541065216",
      /* 5310 */ "-2143289344, -2143289344, 4194304, 0, 2, 0, 3, 0, 4, 4, 8, 0, 5, -1601175552, 4198144, 4196352",
      /* 5326 */ "8540160, 4194304, 262400, 8425488, 4194304, 4194304, 128, 0, 7, 8, 16, 0, 8, 32, 0, 9, 37748736",
      /* 5343 */ "742391808, 742391808, 775946240, -1371537408, 775946240, 64, 64, 128, 1, 0, 12, 32, 64, 640, 1024, 0",
      /* 5359 */ "13, 13, 239075328, 775946240, 775946240, 171966464, 171966464, 775946240, 239075328, 239075328",
      /* 5369 */ "-1405091840, -1371537408, 239075328, 171966464, 2097216, 4194368, 4718592, 4194400, 541065280",
      /* 5378 */ "4194368, 4720640, 4194368, 541589504, -2143289280, -2143285408, -2143285408, -2109730976",
      /* 5386 */ "-2143285408, 775946336, 775946304, 776470528, 775946304, -1975513248, 1536, 1792, 8192, 0, 48, 16, 4",
      /* 5399 */ "32, 128, 128, 256, 2048, 0, 32, 96, 0, 37, 525440, 2144, 2144, 1536, 0, 256, 4096, 4096, 8192, 32768",
      /* 5419 */ "0, 384, 0, 512, 2048, 28672, 3145728, 4194304, 4196352, 96, 262144, 0, 516, 1536, 1024, 28672, 128",
      /* 5436 */ "2048, 131072, 1048576, 0, 580, 134217744, 16, 32, 2048, 229376, 0, 2048, 196608, 1572864, 0, 1024",
      /* 5452 */ "4194304, 8388608, 0, 588, 0, 610, 16, 131088, 16, 268500992, 16, 16, 17, 20, 16, 20, 560, 24, 560",
      /* 5471 */ "-2147483600, 1049104, 524304, 1048592, 16, 28, -2146434672, 1572880, 524304, 1048592, 1048592, 48",
      /* 5483 */ "1573392, 16, 64, 345088, 28, 16, 96, 96, 128, 768, 8192, 16384, 16384, 20608, -2146434160, 17, 528",
      /* 5500 */ "16, 528, 262160, 21, 16, 608, 0, 2680, 4132864, 54525952, -268435456, 0, 2682, 4165632, 0, 3584, 16",
      /* 5517 */ "81788928, 524816, 1049136, 2066793812, 2066794320, 2066794324, 2066793812, 2066793812, 2066794324",
      /* 5526 */ "2066794324, 2066794325, 2066745200, 2066743856, 2066743856, 2066794325, 2066745200, 2066745200",
      /* 5534 */ "-80738448, 2066745200, 2066794356, 2066794352, 2066794356, 2066794356, 2067056500, 2067056496",
      /* 5542 */ "-80214096, -80214092, 2067056500, 21, 112, 1024, 8388608, 16777216, 33554432, 67108864, -402653184",
      /* 5553 */ "21, 53, 20, 73412629, 73461781, 73463069, -2074020547, -2074020579, 73463069, 73463101, 2066794260",
      /* 5564 */ "2066794324, 2067056468, 2138060565, 2066794356, 2138060597, 0, 4096, 65536, 0, 4112, 79691776, 0",
      /* 5576 */ "10816, 32768, 50331648, 0, 12320, 1610612736, 0, 13344, 71303168, 0, 16384, 2097152, 33554432",
      /* 5589 */ "134217728, 0, 76, 1024, 1024, 2048, 2048, 4096, 0, 96, 32, 512, 0, 98, 98304, 121634816, 0, 17408",
      /* 5607 */ "16512, 16384, 4194304, 268435456, 4194432, 37748736, 0, 1, -2146435072, 536903680, -2147155968, 0",
      /* 5619 */ "20480, 153235504, 12583944, 12583944, 281019400, 136475696, 136459312, 144847920, 149042224",
      /* 5628 */ "-1866136568, 136475696, 136475696, 136477808, 136459312, 149042232, 149042232, -303040608",
      /* 5636 */ "-303040608, 150090808, 150090808, 136475824, 150090808, -303040606, -303040606, -303040600",
      /* 5644 */ "-303040606, -303040600, -303040600, -301992008, -301992008, -301992014, 16512, 0, 20608, 32768",
      /* 5654 */ "536870912, -1073741824, -1073741824, 0, 24576, 131072, 134217728, 268435456, 0, 1184, 16777280",
      /* 5665 */ "281018368, 0, 63392, 983040, -304087040, -304087040, 0, 65536, 131072, 402653184, 0, 131072, 29728",
      /* 5678 */ "136314880, 0, 131136, -1609007103, -1609007103, 31840, 0, 156032, 2113929216, 0, 196608, 144703488",
      /* 5690 */ "148897792, 1179648, 29856, 18874368, 0, 262400, -1879048192, 0, 327680, 524288, 31457280, 67108864",
      /* 5702 */ "1152, 0, 524296, 32, 8192, 2097152, 262144, 16777216, 268435456, 1073741824, 262144, 134217728",
      /* 5714 */ "262144, 8388608, 134217728, 512, 262144, 4194304, 1152, 4194304, 131328, 32768, 65536, 262144",
      /* 5726 */ "524288, 524288, 96, 64, 131072, 0, 228, 604504065, 537395201, 537395201, 537395205, 965035072",
      /* 5738 */ "965035072, -1182448576, 696796225, 696796225, 965035072, 537396389, 1878556412, 1878556412",
      /* 5746 */ "1878556413, 1878556413, 0, 1572864, 131328, 0, 2031616, 0, 262144, 1048576, -1610612736, 159383552",
      /* 5758 */ "0, 2097152, 16777216, 0, 24, 0, 29, 1, 524288, 2097152, 541696, 696254464, 124, 3702400, 1874853888",
      /* 5773 */ "0, 8388608, 4096, 16384, 131072, 131072, 262144, 128, 1024, 131072, 524288, 512, 3072, 125, 125, 5",
      /* 5789 */ "0, 10485760, 14680064, 0, 524288, 1048576, 128, 1792, 12, 48, 256, 24576, 1, 1, 2, 8, 64, 6291456",
      /* 5807 */ "8388608, 128, 28672, 3145728, 33554432, 402653184, 128, 12288, 16384, 8388608, 128, 8192, 33554432",
      /* 5820 */ "469762048, 0, 12582912, 50331648, 67108864, 134217728, 536870912, 65536, 8388608, 50331648",
      /* 5830 */ "201326592, 8, 256, 65536, 67108864, 512, 8388608, 131136, 131136, 33816576, -518471679, 688192",
      /* 5842 */ "-518470655, 698432, 698432, -1608875967, -1608875967, -1600487355, -1608875967, -235223937",
      /* 5850 */ "-235223937, 698944, 698433, 698944, -2145746879, 262144, 33554432, 805306368, -1073741824, 557056",
      /* 5860 */ "-1609564160, 0, 33554432, 1006632960, 1073741824, 688128, 0, 67108864, 10304, 0, 67125632, 7, 17528",
      /* 5873 */ "688128, -235929600, 0, 134217728, 4, 48, 80, 1048576, 4194304, 1048576, 536870912, 16777216",
      /* 5885 */ "805306368, 1073741824, 1, 536870912, 1073741824, 1, 4, 64, 524288, 0, 124, 32384, 524288, 64, 17408",
      /* 5900 */ "0, 125, 0, 128, 512, 1024, 16384, 0, 63, 155904, 16252928, 33554432, 0, 64, 1024, 8, 48, 64, 3072, 0",
      /* 5920 */ "65, 0, 68, 16384, 536870912, 512, 68157440, 0, 201326592, 2269314, 69247106, 2138242, 2138242",
      /* 5933 */ "2140290, 2138242, 203464834, 2138306, 2138242, 2662530, 2171523, 270606979, 2662530, 2204291",
      /* 5943 */ "807477891, 270606979, 807477891, 2204291, 2204291, 2204355, 2204291, 69313155, 203530883, 69313155",
      /* 5953 */ "205236967, 205236967, 0, 268435456, 268435456, 134217728, 131072, 8388608, 33554432, 268435456",
      /* 5963 */ "536870912, -2147483648, 2, 8320, 32768, 2097152, 10368, 2621440, 163840, 69206016, 203423744, 8384",
      /* 5975 */ "3, 8832, 270532608, 0, 536870912, 3, 98304, 8896, 0, 603979776, 7, 10976, 229376, 1572864, 229376",
      /* 5990 */ "204996608, 0, 696254464, 163840, 0, 964689920, 0, 2359296, 0, 4194304, 33554432, 201326592",
      /* 6002 */ "1073741824, 0, 16, 2, 4, 0, -2147483648, 0, -1866465280, 1, 98304, 4, 1024, 1073741824, 524288",
      /* 6017 */ "67108864, 524288, 134217728, 65536, 536870912, 402784256, 8388640, 2097160, 3584, 2, 2097160",
      /* 6028 */ "2097160, 35651593, 4, 96, 512, 8192, 8392704, 4, 4194308, 4, 536870916, 4, 67108868, 6, 52428829",
      /* 6043 */ "52428829, 8388646, 52428829, 52690973, 35651725, 35651725, 572522637, 35651725, 2130338111",
      /* 6052 */ "2130338111, 52432925, 35651725, 572522509, 35651597, 35651597, 2130338239, 2130338239, 6, 0",
      /* 6062 */ "1073741824, 38, 29, 128, 33554432, 1879048192, -2147483648, 570425344, 33554432, 570425344, 0",
      /* 6073 */ "1090519040, 0, 16777216, 16777216, 4194432, 24, 50331648, 2, 56, 256, 131072, 256, 155648, 16252928",
      /* 6087 */ "2113929216, 32, 2097152, 24, 16777216, 1048576, 6291456, 469762048, 536870912, 2, 48, 1024, 12582912",
      /* 6100 */ "0, 32768, 16, 4096, 131072, 153092096, 32, 24576, 64, 268435456, 1, 1024, 1049088, 16768, 1107296256",
      /* 6115 */ "32, 4096, 393216, 524288, 3145728, 12582912, -2143092736, 4390912, 4390912, 4915208, 541261824",
      /* 6126 */ "4915208, 5440000, 1111687168, 138412128, 134217824, 134217824, 1111687168, 4292706, 4423778, 4292706",
      /* 6136 */ "134217824, 4915304, 4423778, 4423778, 4391008, 4391008, 541261920, 4423778, 5472866, -209773960",
      /* 6146 */ "-209773960, -209741190, -209741190, 0, 1107296256, 0, 1090535424, 1090535424, 512, 1048576, 2097152",
      /* 6157 */ "134221824, 720896, 0, 1245184, 0, 138412032, 0, 104, 0, 1277952, 0, 8, 524288, 8388608, 67108864",
      /* 6172 */ "1073741824, 4, 512, 66049, 608, 2048, 524288, 14680064, 16777216, 134217728, 1073741824, 3145728",
      /* 6184 */ "20971520, 33554432, 2, 32768, 262144, 2097152, 536870912, 0, 1048576, 384, 1073741824, 128, 16384",
      /* 6197 */ "8392720, 1, 8, 112, 2, 16, 131072, 1572864, 201326592, 0, 8192, 131072, 4194304, 16777216, 67108864",
      /* 6212 */ "0, 10240, 69632, 143360, 0, 4, 2048, 65604, 49152, 49152, 65764, 65765, 65765, 115268, 115268",
      /* 6227 */ "119364, 1100, 1100, 5196, 1100, 53248, 114688, 49152, 65765, 49152, 114688, 114688, 118784, 114688",
      /* 6241 */ "66021, 66277, 114756, 114756, 118852, 119364, 115268, 5196, 5196, 115788, 70732, 70732, 119884",
      /* 6254 */ "119884, 120396, 120396, 229, 0, 485, 741, 224, 0, 12, 64, 159401024, 192, 0, 8, 1024"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 6270; ++i) {EXPECTED[i] = Integer.parseInt(s2[i]);}
  }

  private static final String[] TOKEN =
  {
    "(0)",
    "PragmaContents",
    "DirCommentContents",
    "DirPIContents",
    "CDataSection",
    "Wildcard",
    "EQName",
    "URILiteral",
    "IntegerLiteral",
    "DecimalLiteral",
    "DoubleLiteral",
    "StringLiteral",
    "PredefinedEntityRef",
    "'\"\"'",
    "EscapeApos",
    "ElementContentChar",
    "QuotAttrContentChar",
    "AposAttrContentChar",
    "PITarget",
    "NCName",
    "QName",
    "S",
    "S",
    "CharRef",
    "CommentContents",
    "EOF",
    "'!'",
    "'!='",
    "'\"'",
    "'#'",
    "'#)'",
    "'$'",
    "'%'",
    "''''",
    "'('",
    "'(#'",
    "'(:'",
    "')'",
    "'*'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'-->'",
    "'.'",
    "'..'",
    "'/'",
    "'//'",
    "'/>'",
    "':)'",
    "'::'",
    "':='",
    "';'",
    "'<'",
    "'<!--'",
    "'</'",
    "'<<'",
    "'<='",
    "'<?'",
    "'='",
    "'>'",
    "'>='",
    "'>>'",
    "'?'",
    "'?>'",
    "'@'",
    "'NaN'",
    "'['",
    "']'",
    "'after'",
    "'all'",
    "'allowing'",
    "'ancestor'",
    "'ancestor-or-self'",
    "'and'",
    "'any'",
    "'as'",
    "'ascending'",
    "'at'",
    "'attribute'",
    "'base-uri'",
    "'before'",
    "'boundary-space'",
    "'break'",
    "'by'",
    "'case'",
    "'cast'",
    "'castable'",
    "'catch'",
    "'check'",
    "'child'",
    "'collation'",
    "'collection'",
    "'comment'",
    "'constraint'",
    "'construction'",
    "'contains'",
    "'content'",
    "'context'",
    "'continue'",
    "'copy'",
    "'copy-namespaces'",
    "'count'",
    "'decimal-format'",
    "'decimal-separator'",
    "'declare'",
    "'default'",
    "'delete'",
    "'descendant'",
    "'descendant-or-self'",
    "'descending'",
    "'diacritics'",
    "'different'",
    "'digit'",
    "'distance'",
    "'div'",
    "'document'",
    "'document-node'",
    "'element'",
    "'else'",
    "'empty'",
    "'empty-sequence'",
    "'encoding'",
    "'end'",
    "'entire'",
    "'eq'",
    "'every'",
    "'exactly'",
    "'except'",
    "'exit'",
    "'external'",
    "'first'",
    "'following'",
    "'following-sibling'",
    "'for'",
    "'foreach'",
    "'foreign'",
    "'from'",
    "'ft-option'",
    "'ftand'",
    "'ftnot'",
    "'ftor'",
    "'function'",
    "'ge'",
    "'greatest'",
    "'group'",
    "'grouping-separator'",
    "'gt'",
    "'idiv'",
    "'if'",
    "'import'",
    "'in'",
    "'index'",
    "'infinity'",
    "'inherit'",
    "'insensitive'",
    "'insert'",
    "'instance'",
    "'integrity'",
    "'intersect'",
    "'into'",
    "'is'",
    "'item'",
    "'key'",
    "'language'",
    "'last'",
    "'lax'",
    "'le'",
    "'least'",
    "'let'",
    "'levels'",
    "'loop'",
    "'lowercase'",
    "'lt'",
    "'minus-sign'",
    "'mod'",
    "'modify'",
    "'module'",
    "'most'",
    "'namespace'",
    "'namespace-node'",
    "'ne'",
    "'next'",
    "'no'",
    "'no-inherit'",
    "'no-preserve'",
    "'node'",
    "'nodes'",
    "'not'",
    "'occurs'",
    "'of'",
    "'on'",
    "'only'",
    "'option'",
    "'or'",
    "'order'",
    "'ordered'",
    "'ordering'",
    "'paragraph'",
    "'paragraphs'",
    "'parent'",
    "'pattern-separator'",
    "'per-mille'",
    "'percent'",
    "'phrase'",
    "'preceding'",
    "'preceding-sibling'",
    "'preserve'",
    "'previous'",
    "'processing-instruction'",
    "'relationship'",
    "'rename'",
    "'replace'",
    "'return'",
    "'returning'",
    "'revalidation'",
    "'same'",
    "'satisfies'",
    "'schema'",
    "'schema-attribute'",
    "'schema-element'",
    "'score'",
    "'self'",
    "'sensitive'",
    "'sentence'",
    "'sentences'",
    "'skip'",
    "'sliding'",
    "'some'",
    "'stable'",
    "'start'",
    "'stemming'",
    "'stop'",
    "'strict'",
    "'strip'",
    "'switch'",
    "'text'",
    "'then'",
    "'thesaurus'",
    "'times'",
    "'to'",
    "'treat'",
    "'try'",
    "'tumbling'",
    "'type'",
    "'typeswitch'",
    "'union'",
    "'unique'",
    "'unordered'",
    "'updating'",
    "'uppercase'",
    "'using'",
    "'validate'",
    "'value'",
    "'variable'",
    "'version'",
    "'weight'",
    "'when'",
    "'where'",
    "'while'",
    "'wildcards'",
    "'window'",
    "'with'",
    "'without'",
    "'word'",
    "'words'",
    "'xquery'",
    "'zero-digit'",
    "'{'",
    "'{{'",
    "'|'",
    "'||'",
    "'}'",
    "'}}'"
  };
}

// End
