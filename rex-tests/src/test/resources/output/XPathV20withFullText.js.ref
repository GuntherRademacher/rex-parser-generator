// This file was generated on Thu Dec 26, 2024 06:58 (UTC+01) by REx v6.1-SNAPSHOT which is Copyright (c) 1979-2024 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q XPathV20withFullText.ebnf -javascript

function XPathV20withFullText(string)
{
  init(string);

  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source)
  {
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    l3 = 0; b3 = 0; e3 = 0;
    end = e;
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XPathV20withFullText.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XPathV20withFullText.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XPathV20withFullText.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_Query = function()
  {
    lookahead1W(60);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
    parse_XPath();
    consume(13);                    // EOF
  };

  function parse_XPath()
  {
    parse_Expr();
  }

  function parse_Expr()
  {
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 25)                 // ','
      {
        break;
      }
      consume(25);                  // ','
      lookahead1W(60);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
      parse_ExprSingle();
    }
  }

  function parse_ExprSingle()
  {
    switch (l1)
    {
    case 77:                        // 'for'
      parse_ForExpr();
      break;
    case 72:                        // 'every'
    case 128:                       // 'some'
      parse_QuantifiedExpr();
      break;
    case 86:                        // 'if'
      parse_IfExpr();
      break;
    default:
      parse_OrExpr();
    }
  }

  function parse_ForExpr()
  {
    parse_SimpleForClause();
    consume(118);                   // 'return'
    lookahead1W(60);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
    parse_ExprSingle();
  }

  function parse_SimpleForClause()
  {
    consume(77);                    // 'for'
    lookahead1W(8);                 // S^WhiteSpace | '$' | '(:'
    consume(16);                    // '$'
    lookahead1W(7);                 // QName | S^WhiteSpace | '(:'
    parse_VarName();
    lookahead1W(39);                // S^WhiteSpace | '(:' | 'in' | 'score'
    if (l1 == 123)                  // 'score'
    {
      parse_FTScoreVar();
    }
    lookahead1W(17);                // S^WhiteSpace | '(:' | 'in'
    consume(87);                    // 'in'
    lookahead1W(60);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 25)                 // ','
      {
        break;
      }
      consume(25);                  // ','
      lookahead1W(8);               // S^WhiteSpace | '$' | '(:'
      consume(16);                  // '$'
      lookahead1W(7);               // QName | S^WhiteSpace | '(:'
      parse_VarName();
      lookahead1W(39);              // S^WhiteSpace | '(:' | 'in' | 'score'
      if (l1 == 123)                // 'score'
      {
        parse_FTScoreVar();
      }
      lookahead1W(17);              // S^WhiteSpace | '(:' | 'in'
      consume(87);                  // 'in'
      lookahead1W(60);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
      parse_ExprSingle();
    }
  }

  function parse_FTScoreVar()
  {
    consume(123);                   // 'score'
    lookahead1W(8);                 // S^WhiteSpace | '$' | '(:'
    consume(16);                    // '$'
    lookahead1W(7);                 // QName | S^WhiteSpace | '(:'
    parse_VarName();
  }

  function parse_QuantifiedExpr()
  {
    switch (l1)
    {
    case 128:                       // 'some'
      consume(128);                 // 'some'
      break;
    default:
      consume(72);                  // 'every'
    }
    lookahead1W(8);                 // S^WhiteSpace | '$' | '(:'
    consume(16);                    // '$'
    lookahead1W(7);                 // QName | S^WhiteSpace | '(:'
    parse_VarName();
    lookahead1W(17);                // S^WhiteSpace | '(:' | 'in'
    consume(87);                    // 'in'
    lookahead1W(60);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 25)                 // ','
      {
        break;
      }
      consume(25);                  // ','
      lookahead1W(8);               // S^WhiteSpace | '$' | '(:'
      consume(16);                  // '$'
      lookahead1W(7);               // QName | S^WhiteSpace | '(:'
      parse_VarName();
      lookahead1W(17);              // S^WhiteSpace | '(:' | 'in'
      consume(87);                  // 'in'
      lookahead1W(60);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
      parse_ExprSingle();
    }
    consume(120);                   // 'satisfies'
    lookahead1W(60);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
    parse_ExprSingle();
  }

  function parse_IfExpr()
  {
    consume(86);                    // 'if'
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(60);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
    parse_Expr();
    consume(20);                    // ')'
    lookahead1W(26);                // S^WhiteSpace | '(:' | 'then'
    consume(133);                   // 'then'
    lookahead1W(60);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
    parse_ExprSingle();
    consume(67);                    // 'else'
    lookahead1W(60);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
    parse_ExprSingle();
  }

  function parse_OrExpr()
  {
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 108)                // 'or'
      {
        break;
      }
      consume(108);                 // 'or'
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 47)                 // 'and'
      {
        break;
      }
      consume(47);                  // 'and'
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    parse_FTContainsExpr();
    if (l1 != 13                    // EOF
     && l1 != 20                    // ')'
     && l1 != 25                    // ','
     && l1 != 43                    // ']'
     && l1 != 47                    // 'and'
     && l1 != 67                    // 'else'
     && l1 != 108                   // 'or'
     && l1 != 118                   // 'return'
     && l1 != 120                   // 'satisfies'
     && l1 != 149)                  // '}'
    {
      switch (l1)
      {
      case 71:                      // 'eq'
      case 83:                      // 'ge'
      case 84:                      // 'gt'
      case 94:                      // 'le'
      case 98:                      // 'lt'
      case 102:                     // 'ne'
        parse_ValueComp();
        break;
      case 34:                      // '<<'
      case 39:                      // '>>'
      case 91:                      // 'is'
        parse_NodeComp();
        break;
      default:
        parse_GeneralComp();
      }
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    parse_RangeExpr();
    if (l1 == 80)                   // 'ftcontains'
    {
      consume(80);                  // 'ftcontains'
      lookahead1W(53);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WhiteSpace |
                                    // '(' | '(#' | '(:' | 'ftnot' | '{'
      parse_FTSelection();
      if (l1 == 144)                // 'without'
      {
        parse_FTIgnoreOption();
      }
    }
  }

  function parse_RangeExpr()
  {
    parse_AdditiveExpr();
    if (l1 == 136)                  // 'to'
    {
      consume(136);                 // 'to'
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 23                  // '+'
       && l1 != 26)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 23:                      // '+'
        consume(23);                // '+'
        break;
      default:
        consume(26);                // '-'
      }
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 21                  // '*'
       && l1 != 64                  // 'div'
       && l1 != 85                  // 'idiv'
       && l1 != 99)                 // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 21:                      // '*'
        consume(21);                // '*'
        break;
      case 64:                      // 'div'
        consume(64);                // 'div'
        break;
      case 85:                      // 'idiv'
        consume(85);                // 'idiv'
        break;
      default:
        consume(99);                // 'mod'
      }
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 138                 // 'union'
       && l1 != 148)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 138:                     // 'union'
        consume(138);               // 'union'
        break;
      default:
        consume(148);               // '|'
      }
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(70);              // S^WhiteSpace | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'at' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'entire' | 'eq' | 'except' | 'ftand' | 'ftcontains' | 'ftor' |
                                    // 'ge' | 'gt' | 'idiv' | 'intersect' | 'is' | 'le' | 'levels' | 'lt' | 'mod' |
                                    // 'ne' | 'not' | 'or' | 'ordered' | 'paragraphs' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'times' | 'to' | 'union' | 'window' | 'without' |
                                    // 'words' | '|' | '}'
      if (l1 != 74                  // 'except'
       && l1 != 90)                 // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 90:                      // 'intersect'
        consume(90);                // 'intersect'
        break;
      default:
        consume(74);                // 'except'
      }
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    parse_TreatExpr();
    lookahead1W(71);                // S^WhiteSpace | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'at' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'entire' | 'eq' | 'except' | 'ftand' | 'ftcontains' | 'ftor' |
                                    // 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'levels' | 'lt' |
                                    // 'mod' | 'ne' | 'not' | 'or' | 'ordered' | 'paragraphs' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'times' | 'to' | 'union' | 'window' | 'without' |
                                    // 'words' | '|' | '}'
    if (l1 == 89)                   // 'instance'
    {
      consume(89);                  // 'instance'
      lookahead1W(21);              // S^WhiteSpace | '(:' | 'of'
      consume(106);                 // 'of'
      lookahead1W(56);              // QName | S^WhiteSpace | '(:' | 'attribute' | 'comment' | 'document-node' |
                                    // 'element' | 'empty-sequence' | 'item' | 'node' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
      parse_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    parse_CastableExpr();
    lookahead1W(72);                // S^WhiteSpace | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'at' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'entire' | 'eq' | 'except' | 'ftand' | 'ftcontains' | 'ftor' |
                                    // 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'levels' | 'lt' |
                                    // 'mod' | 'ne' | 'not' | 'or' | 'ordered' | 'paragraphs' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'times' | 'to' | 'treat' | 'union' | 'window' |
                                    // 'without' | 'words' | '|' | '}'
    if (l1 == 137)                  // 'treat'
    {
      consume(137);                 // 'treat'
      lookahead1W(12);              // S^WhiteSpace | '(:' | 'as'
      consume(49);                  // 'as'
      lookahead1W(56);              // QName | S^WhiteSpace | '(:' | 'attribute' | 'comment' | 'document-node' |
                                    // 'element' | 'empty-sequence' | 'item' | 'node' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
      parse_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    parse_CastExpr();
    lookahead1W(73);                // S^WhiteSpace | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'at' | 'castable' | 'different' |
                                    // 'distance' | 'div' | 'else' | 'entire' | 'eq' | 'except' | 'ftand' |
                                    // 'ftcontains' | 'ftor' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                    // 'le' | 'levels' | 'lt' | 'mod' | 'ne' | 'not' | 'or' | 'ordered' | 'paragraphs' |
                                    // 'return' | 'same' | 'satisfies' | 'sentences' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'window' | 'without' | 'words' | '|' | '}'
    if (l1 == 54)                   // 'castable'
    {
      consume(54);                  // 'castable'
      lookahead1W(12);              // S^WhiteSpace | '(:' | 'as'
      consume(49);                  // 'as'
      lookahead1W(7);               // QName | S^WhiteSpace | '(:'
      parse_SingleType();
    }
  }

  function parse_CastExpr()
  {
    parse_UnaryExpr();
    if (l1 == 53)                   // 'cast'
    {
      consume(53);                  // 'cast'
      lookahead1W(12);              // S^WhiteSpace | '(:' | 'as'
      consume(49);                  // 'as'
      lookahead1W(7);               // QName | S^WhiteSpace | '(:'
      parse_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      if (l1 != 23                  // '+'
       && l1 != 26)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 26:                      // '-'
        consume(26);                // '-'
        break;
      default:
        consume(23);                // '+'
      }
    }
    parse_ValueExpr();
  }

  function parse_ValueExpr()
  {
    parse_PathExpr();
  }

  function parse_GeneralComp()
  {
    switch (l1)
    {
    case 36:                        // '='
      consume(36);                  // '='
      break;
    case 14:                        // '!='
      consume(14);                  // '!='
      break;
    case 33:                        // '<'
      consume(33);                  // '<'
      break;
    case 35:                        // '<='
      consume(35);                  // '<='
      break;
    case 37:                        // '>'
      consume(37);                  // '>'
      break;
    default:
      consume(38);                  // '>='
    }
  }

  function parse_ValueComp()
  {
    switch (l1)
    {
    case 71:                        // 'eq'
      consume(71);                  // 'eq'
      break;
    case 102:                       // 'ne'
      consume(102);                 // 'ne'
      break;
    case 98:                        // 'lt'
      consume(98);                  // 'lt'
      break;
    case 94:                        // 'le'
      consume(94);                  // 'le'
      break;
    case 84:                        // 'gt'
      consume(84);                  // 'gt'
      break;
    default:
      consume(83);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    switch (l1)
    {
    case 91:                        // 'is'
      consume(91);                  // 'is'
      break;
    case 34:                        // '<<'
      consume(34);                  // '<<'
      break;
    default:
      consume(39);                  // '>>'
    }
  }

  function parse_Pragma()
  {
    consume(18);                    // '(#'
    lookahead1(3);                  // QName | S
    if (l1 == 10)                   // S
    {
      consume(10);                  // S
    }
    lookahead1(1);                  // QName
    consume(8);                     // QName
    lookahead1(4);                  // S | '#)'
    if (l1 == 10)                   // S
    {
      consume(10);                  // S
      lookahead1(0);                // PragmaContents
      consume(2);                   // PragmaContents
    }
    lookahead1(2);                  // '#)'
    consume(15);                    // '#)'
  }

  function parse_PathExpr()
  {
    switch (l1)
    {
    case 29:                        // '/'
      consume(29);                  // '/'
      lookahead1W(78);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | EOF | '!=' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' |
                                    // '-' | '.' | '..' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '@' | ']' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'at' | 'attribute' | 'cast' |
                                    // 'castable' | 'child' | 'comment' | 'descendant' | 'descendant-or-self' |
                                    // 'different' | 'distance' | 'div' | 'document-node' | 'element' | 'else' |
                                    // 'entire' | 'eq' | 'except' | 'following' | 'following-sibling' | 'ftand' |
                                    // 'ftcontains' | 'ftor' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                    // 'le' | 'levels' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'not' | 'or' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'same' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'sentences' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'window' | 'without' | 'words' | '|' | '}'
      switch (l1)
      {
      case 3:                       // IntegerLiteral
      case 4:                       // DecimalLiteral
      case 5:                       // DoubleLiteral
      case 6:                       // StringLiteral
      case 7:                       // Wildcard
      case 8:                       // QName
      case 16:                      // '$'
      case 17:                      // '('
      case 27:                      // '.'
      case 28:                      // '..'
      case 41:                      // '@'
      case 45:                      // 'ancestor'
      case 46:                      // 'ancestor-or-self'
      case 51:                      // 'attribute'
      case 55:                      // 'child'
      case 56:                      // 'comment'
      case 59:                      // 'descendant'
      case 60:                      // 'descendant-or-self'
      case 65:                      // 'document-node'
      case 66:                      // 'element'
      case 75:                      // 'following'
      case 76:                      // 'following-sibling'
      case 101:                     // 'namespace'
      case 103:                     // 'node'
      case 112:                     // 'parent'
      case 114:                     // 'preceding'
      case 115:                     // 'preceding-sibling'
      case 116:                     // 'processing-instruction'
      case 121:                     // 'schema-attribute'
      case 122:                     // 'schema-element'
      case 124:                     // 'self'
      case 132:                     // 'text'
        parse_RelativePathExpr();
        break;
      default:
        break;
      }
      break;
    case 30:                        // '//'
      consume(30);                  // '//'
      lookahead1W(57);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '.' | '..' | '@' | 'ancestor' |
                                    // 'ancestor-or-self' | 'attribute' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    parse_StepExpr();
    for (;;)
    {
      if (l1 != 29                  // '/'
       && l1 != 30)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 29:                      // '/'
        consume(29);                // '/'
        break;
      default:
        consume(30);                // '//'
      }
      lookahead1W(57);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '.' | '..' | '@' | 'ancestor' |
                                    // 'ancestor-or-self' | 'attribute' | 'child' | 'comment' | 'descendant' |
                                    // 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    switch (l1)
    {
    case 8:                         // QName
      lookahead2W(77);              // S^WhiteSpace | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'at' |
                                    // 'cast' | 'castable' | 'different' | 'distance' | 'div' | 'else' | 'entire' |
                                    // 'eq' | 'except' | 'ftand' | 'ftcontains' | 'ftor' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'levels' | 'lt' | 'mod' | 'ne' | 'not' |
                                    // 'or' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'window' | 'without' | 'words' | '|' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 3:                         // IntegerLiteral
    case 4:                         // DecimalLiteral
    case 5:                         // DoubleLiteral
    case 6:                         // StringLiteral
    case 16:                        // '$'
    case 17:                        // '('
    case 27:                        // '.'
    case 4360:                      // QName '('
      parse_FilterExpr();
      break;
    default:
      parse_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    switch (l1)
    {
    case 28:                        // '..'
    case 45:                        // 'ancestor'
    case 46:                        // 'ancestor-or-self'
    case 112:                       // 'parent'
    case 114:                       // 'preceding'
    case 115:                       // 'preceding-sibling'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(76);                // S^WhiteSpace | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'at' | 'cast' |
                                    // 'castable' | 'different' | 'distance' | 'div' | 'else' | 'entire' | 'eq' |
                                    // 'except' | 'ftand' | 'ftcontains' | 'ftor' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'levels' | 'lt' | 'mod' | 'ne' | 'not' | 'or' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'window' | 'without' | 'words' | '|' | '}'
    parse_PredicateList();
  }

  function parse_ForwardStep()
  {
    switch (l1)
    {
    case 51:                        // 'attribute'
      lookahead2W(31);              // S^WhiteSpace | '(' | '(:' | '::'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 55:                        // 'child'
    case 59:                        // 'descendant'
    case 60:                        // 'descendant-or-self'
    case 75:                        // 'following'
    case 76:                        // 'following-sibling'
    case 101:                       // 'namespace'
    case 124:                       // 'self'
    case 8243:                      // 'attribute' '::'
      parse_ForwardAxis();
      lookahead1W(55);              // Wildcard | QName | S^WhiteSpace | '(:' | 'attribute' | 'comment' |
                                    // 'document-node' | 'element' | 'node' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    switch (l1)
    {
    case 55:                        // 'child'
      consume(55);                  // 'child'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    case 59:                        // 'descendant'
      consume(59);                  // 'descendant'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    case 51:                        // 'attribute'
      consume(51);                  // 'attribute'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    case 124:                       // 'self'
      consume(124);                 // 'self'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    case 60:                        // 'descendant-or-self'
      consume(60);                  // 'descendant-or-self'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    case 76:                        // 'following-sibling'
      consume(76);                  // 'following-sibling'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    case 75:                        // 'following'
      consume(75);                  // 'following'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    default:
      consume(101);                 // 'namespace'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    if (l1 == 41)                   // '@'
    {
      consume(41);                  // '@'
    }
    lookahead1W(55);                // Wildcard | QName | S^WhiteSpace | '(:' | 'attribute' | 'comment' |
                                    // 'document-node' | 'element' | 'node' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
    parse_NodeTest();
  }

  function parse_ReverseStep()
  {
    switch (l1)
    {
    case 28:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(55);              // Wildcard | QName | S^WhiteSpace | '(:' | 'attribute' | 'comment' |
                                    // 'document-node' | 'element' | 'node' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
      parse_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    switch (l1)
    {
    case 112:                       // 'parent'
      consume(112);                 // 'parent'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    case 45:                        // 'ancestor'
      consume(45);                  // 'ancestor'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    case 115:                       // 'preceding-sibling'
      consume(115);                 // 'preceding-sibling'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    case 114:                       // 'preceding'
      consume(114);                 // 'preceding'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
      break;
    default:
      consume(46);                  // 'ancestor-or-self'
      lookahead1W(11);              // S^WhiteSpace | '(:' | '::'
      consume(32);                  // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    consume(28);                    // '..'
  }

  function parse_NodeTest()
  {
    switch (l1)
    {
    case 7:                         // Wildcard
    case 8:                         // QName
      parse_NameTest();
      break;
    default:
      parse_KindTest();
    }
  }

  function parse_NameTest()
  {
    switch (l1)
    {
    case 8:                         // QName
      consume(8);                   // QName
      break;
    default:
      consume(7);                   // Wildcard
    }
  }

  function parse_FilterExpr()
  {
    parse_PrimaryExpr();
    lookahead1W(76);                // S^WhiteSpace | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'at' | 'cast' |
                                    // 'castable' | 'different' | 'distance' | 'div' | 'else' | 'entire' | 'eq' |
                                    // 'except' | 'ftand' | 'ftcontains' | 'ftor' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'levels' | 'lt' | 'mod' | 'ne' | 'not' | 'or' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'window' | 'without' | 'words' | '|' | '}'
    parse_PredicateList();
  }

  function parse_PredicateList()
  {
    for (;;)
    {
      lookahead1W(76);              // S^WhiteSpace | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' | 'at' | 'cast' |
                                    // 'castable' | 'different' | 'distance' | 'div' | 'else' | 'entire' | 'eq' |
                                    // 'except' | 'ftand' | 'ftcontains' | 'ftor' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'levels' | 'lt' | 'mod' | 'ne' | 'not' | 'or' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'window' | 'without' | 'words' | '|' | '}'
      if (l1 != 42)                 // '['
      {
        break;
      }
      parse_Predicate();
    }
  }

  function parse_Predicate()
  {
    consume(42);                    // '['
    lookahead1W(60);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
    parse_Expr();
    consume(43);                    // ']'
  }

  function parse_PrimaryExpr()
  {
    switch (l1)
    {
    case 16:                        // '$'
      parse_VarRef();
      break;
    case 17:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 27:                        // '.'
      parse_ContextItemExpr();
      break;
    case 8:                         // QName
      parse_FunctionCall();
      break;
    default:
      parse_Literal();
    }
  }

  function parse_Literal()
  {
    switch (l1)
    {
    case 6:                         // StringLiteral
      consume(6);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    switch (l1)
    {
    case 3:                         // IntegerLiteral
      consume(3);                   // IntegerLiteral
      break;
    case 4:                         // DecimalLiteral
      consume(4);                   // DecimalLiteral
      break;
    default:
      consume(5);                   // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    consume(16);                    // '$'
    lookahead1W(7);                 // QName | S^WhiteSpace | '(:'
    parse_VarName();
  }

  function parse_VarName()
  {
    consume(8);                     // QName
  }

  function parse_ParenthesizedExpr()
  {
    consume(17);                    // '('
    lookahead1W(61);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | ')' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' |
                                    // 'comment' | 'descendant' | 'descendant-or-self' | 'document-node' | 'element' |
                                    // 'every' | 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' |
                                    // 'node' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text'
    if (l1 != 20)                   // ')'
    {
      parse_Expr();
    }
    consume(20);                    // ')'
  }

  function parse_ContextItemExpr()
  {
    consume(27);                    // '.'
  }

  function parse_FunctionCall()
  {
    consume(8);                     // QName
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(61);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | ')' | '+' | '-' | '.' | '..' | '/' |
                                    // '//' | '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' |
                                    // 'comment' | 'descendant' | 'descendant-or-self' | 'document-node' | 'element' |
                                    // 'every' | 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' |
                                    // 'node' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'text'
    if (l1 != 20)                   // ')'
    {
      parse_ExprSingle();
      for (;;)
      {
        if (l1 != 25)               // ','
        {
          break;
        }
        consume(25);                // ','
        lookahead1W(60);            // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
        parse_ExprSingle();
      }
    }
    consume(20);                    // ')'
  }

  function parse_SingleType()
  {
    parse_AtomicType();
    lookahead1W(75);                // S^WhiteSpace | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'at' | 'castable' |
                                    // 'different' | 'distance' | 'div' | 'else' | 'entire' | 'eq' | 'except' |
                                    // 'ftand' | 'ftcontains' | 'ftor' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'levels' | 'lt' | 'mod' | 'ne' | 'not' | 'or' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'window' | 'without' | 'words' | '|' | '}'
    if (l1 == 40)                   // '?'
    {
      consume(40);                  // '?'
    }
  }

  function parse_SequenceType()
  {
    switch (l1)
    {
    case 68:                        // 'empty-sequence'
      consume(68);                  // 'empty-sequence'
      lookahead1W(9);               // S^WhiteSpace | '(' | '(:'
      consume(17);                  // '('
      lookahead1W(10);              // S^WhiteSpace | '(:' | ')'
      consume(20);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(74);              // S^WhiteSpace | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | '+' | ',' | '-' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'at' |
                                    // 'different' | 'distance' | 'div' | 'else' | 'entire' | 'eq' | 'except' |
                                    // 'ftand' | 'ftcontains' | 'ftor' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'levels' | 'lt' | 'mod' | 'ne' | 'not' | 'or' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'times' | 'to' | 'union' | 'window' | 'without' | 'words' | '|' | '}'
      if (l1 == 22                  // '*'
       || l1 == 24                  // '+'
       || l1 == 40)                 // '?'
      {
        parse_OccurrenceIndicator();
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 40:                        // '?'
      consume(40);                  // '?'
      break;
    case 22:                        // '*'
      consume(22);                  // '*'
      break;
    default:
      consume(24);                  // '+'
    }
  }

  function parse_ItemType()
  {
    switch (l1)
    {
    case 92:                        // 'item'
      consume(92);                  // 'item'
      lookahead1W(9);               // S^WhiteSpace | '(' | '(:'
      consume(17);                  // '('
      lookahead1W(10);              // S^WhiteSpace | '(:' | ')'
      consume(20);                  // ')'
      break;
    case 8:                         // QName
      parse_AtomicType();
      break;
    default:
      parse_KindTest();
    }
  }

  function parse_AtomicType()
  {
    consume(8);                     // QName
  }

  function parse_KindTest()
  {
    switch (l1)
    {
    case 65:                        // 'document-node'
      parse_DocumentTest();
      break;
    case 66:                        // 'element'
      parse_ElementTest();
      break;
    case 51:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 122:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 121:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 116:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 56:                        // 'comment'
      parse_CommentTest();
      break;
    case 132:                       // 'text'
      parse_TextTest();
      break;
    default:
      parse_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    consume(103);                   // 'node'
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(10);                // S^WhiteSpace | '(:' | ')'
    consume(20);                    // ')'
  }

  function parse_DocumentTest()
  {
    consume(65);                    // 'document-node'
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(46);                // S^WhiteSpace | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 20)                   // ')'
    {
      switch (l1)
      {
      case 66:                      // 'element'
        parse_ElementTest();
        break;
      default:
        parse_SchemaElementTest();
      }
    }
    lookahead1W(10);                // S^WhiteSpace | '(:' | ')'
    consume(20);                    // ')'
  }

  function parse_TextTest()
  {
    consume(132);                   // 'text'
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(10);                // S^WhiteSpace | '(:' | ')'
    consume(20);                    // ')'
  }

  function parse_CommentTest()
  {
    consume(56);                    // 'comment'
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(10);                // S^WhiteSpace | '(:' | ')'
    consume(20);                    // ')'
  }

  function parse_PITest()
  {
    consume(116);                   // 'processing-instruction'
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(43);                // StringLiteral | NCName | S^WhiteSpace | '(:' | ')'
    if (l1 != 20)                   // ')'
    {
      switch (l1)
      {
      case 9:                       // NCName
        consume(9);                 // NCName
        break;
      default:
        consume(6);                 // StringLiteral
      }
    }
    lookahead1W(10);                // S^WhiteSpace | '(:' | ')'
    consume(20);                    // ')'
  }

  function parse_AttributeTest()
  {
    consume(51);                    // 'attribute'
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(44);                // QName | S^WhiteSpace | '(:' | ')' | '*'
    if (l1 != 20)                   // ')'
    {
      parse_AttribNameOrWildcard();
      lookahead1W(34);              // S^WhiteSpace | '(:' | ')' | ','
      if (l1 == 25)                 // ','
      {
        consume(25);                // ','
        lookahead1W(7);             // QName | S^WhiteSpace | '(:'
        parse_TypeName();
      }
    }
    lookahead1W(10);                // S^WhiteSpace | '(:' | ')'
    consume(20);                    // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 8:                         // QName
      parse_AttributeName();
      break;
    default:
      consume(21);                  // '*'
    }
  }

  function parse_SchemaAttributeTest()
  {
    consume(121);                   // 'schema-attribute'
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(7);                 // QName | S^WhiteSpace | '(:'
    parse_AttributeDeclaration();
    lookahead1W(10);                // S^WhiteSpace | '(:' | ')'
    consume(20);                    // ')'
  }

  function parse_AttributeDeclaration()
  {
    parse_AttributeName();
  }

  function parse_ElementTest()
  {
    consume(66);                    // 'element'
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(44);                // QName | S^WhiteSpace | '(:' | ')' | '*'
    if (l1 != 20)                   // ')'
    {
      parse_ElementNameOrWildcard();
      lookahead1W(34);              // S^WhiteSpace | '(:' | ')' | ','
      if (l1 == 25)                 // ','
      {
        consume(25);                // ','
        lookahead1W(7);             // QName | S^WhiteSpace | '(:'
        parse_TypeName();
        lookahead1W(35);            // S^WhiteSpace | '(:' | ')' | '?'
        if (l1 == 40)               // '?'
        {
          consume(40);              // '?'
        }
      }
    }
    lookahead1W(10);                // S^WhiteSpace | '(:' | ')'
    consume(20);                    // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 8:                         // QName
      parse_ElementName();
      break;
    default:
      consume(21);                  // '*'
    }
  }

  function parse_SchemaElementTest()
  {
    consume(122);                   // 'schema-element'
    lookahead1W(9);                 // S^WhiteSpace | '(' | '(:'
    consume(17);                    // '('
    lookahead1W(7);                 // QName | S^WhiteSpace | '(:'
    parse_ElementDeclaration();
    lookahead1W(10);                // S^WhiteSpace | '(:' | ')'
    consume(20);                    // ')'
  }

  function parse_ElementDeclaration()
  {
    parse_ElementName();
  }

  function parse_AttributeName()
  {
    consume(8);                     // QName
  }

  function parse_ElementName()
  {
    consume(8);                     // QName
  }

  function parse_TypeName()
  {
    consume(8);                     // QName
  }

  function parse_URILiteral()
  {
    consume(6);                     // StringLiteral
  }

  function parse_FTSelection()
  {
    parse_FTOr();
    for (;;)
    {
      lookahead1W(58);              // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'and' | 'at' | 'different' | 'distance' | 'else' | 'entire' |
                                    // 'eq' | 'ge' | 'gt' | 'is' | 'le' | 'lt' | 'ne' | 'or' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'window' | 'without' | '}'
      if (l1 != 50                  // 'at'
       && l1 != 62                  // 'different'
       && l1 != 63                  // 'distance'
       && l1 != 70                  // 'entire'
       && l1 != 109                 // 'ordered'
       && l1 != 119                 // 'same'
       && l1 != 142)                // 'window'
      {
        break;
      }
      parse_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    consume(140);                   // 'weight'
    lookahead1W(59);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
    parse_RangeExpr();
  }

  function parse_FTOr()
  {
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 82)                 // 'ftor'
      {
        break;
      }
      consume(82);                  // 'ftor'
      lookahead1W(53);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WhiteSpace |
                                    // '(' | '(#' | '(:' | 'ftnot' | '{'
      parse_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 79)                 // 'ftand'
      {
        break;
      }
      consume(79);                  // 'ftand'
      lookahead1W(53);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WhiteSpace |
                                    // '(' | '(#' | '(:' | 'ftnot' | '{'
      parse_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    parse_FTUnaryNot();
    for (;;)
    {
      if (l1 != 104)                // 'not'
      {
        break;
      }
      consume(104);                 // 'not'
      lookahead1W(17);              // S^WhiteSpace | '(:' | 'in'
      consume(87);                  // 'in'
      lookahead1W(53);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WhiteSpace |
                                    // '(' | '(#' | '(:' | 'ftnot' | '{'
      parse_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    if (l1 == 81)                   // 'ftnot'
    {
      consume(81);                  // 'ftnot'
    }
    lookahead1W(52);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WhiteSpace |
                                    // '(' | '(#' | '(:' | '{'
    parse_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    parse_FTPrimary();
    lookahead1W(62);                // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'and' | 'at' | 'case' | 'diacritics' | 'different' |
                                    // 'distance' | 'else' | 'entire' | 'eq' | 'ftand' | 'ftor' | 'ge' | 'gt' | 'is' |
                                    // 'language' | 'le' | 'lowercase' | 'lt' | 'ne' | 'not' | 'option' | 'or' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'uppercase' | 'weight' | 'window' |
                                    // 'with' | 'without' | '}'
    switch (l1)
    {
    case 144:                       // 'without'
      lookahead2W(50);              // S^WhiteSpace | '(:' | 'content' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    if (lk == 52                    // 'case'
     || lk == 61                    // 'diacritics'
     || lk == 93                    // 'language'
     || lk == 97                    // 'lowercase'
     || lk == 107                   // 'option'
     || lk == 139                   // 'uppercase'
     || lk == 143                   // 'with'
     || lk == 33424                 // 'without' 'stemming'
     || lk == 33680                 // 'without' 'stop'
     || lk == 34448                 // 'without' 'thesaurus'
     || lk == 36240)                // 'without' 'wildcards'
    {
      parse_FTMatchOptions();
    }
    if (l1 == 140)                  // 'weight'
    {
      parse_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    switch (l1)
    {
    case 17:                        // '('
      consume(17);                  // '('
      lookahead1W(53);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WhiteSpace |
                                    // '(' | '(#' | '(:' | 'ftnot' | '{'
      parse_FTSelection();
      consume(20);                  // ')'
      break;
    case 18:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(63);              // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'and' | 'at' | 'case' | 'diacritics' | 'different' |
                                    // 'distance' | 'else' | 'entire' | 'eq' | 'ftand' | 'ftor' | 'ge' | 'gt' | 'is' |
                                    // 'language' | 'le' | 'lowercase' | 'lt' | 'ne' | 'not' | 'occurs' | 'option' |
                                    // 'or' | 'ordered' | 'return' | 'same' | 'satisfies' | 'uppercase' | 'weight' |
                                    // 'window' | 'with' | 'without' | '}'
      if (l1 == 105)                // 'occurs'
      {
        parse_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    parse_FTWordsValue();
    lookahead1W(69);                // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'all' | 'and' | 'any' | 'at' | 'case' | 'diacritics' |
                                    // 'different' | 'distance' | 'else' | 'entire' | 'eq' | 'ftand' | 'ftor' | 'ge' |
                                    // 'gt' | 'is' | 'language' | 'le' | 'lowercase' | 'lt' | 'ne' | 'not' | 'occurs' |
                                    // 'option' | 'or' | 'ordered' | 'phrase' | 'return' | 'same' | 'satisfies' |
                                    // 'uppercase' | 'weight' | 'window' | 'with' | 'without' | '}'
    if (l1 == 44                    // 'all'
     || l1 == 48                    // 'any'
     || l1 == 113)                  // 'phrase'
    {
      parse_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    switch (l1)
    {
    case 147:                       // '{'
      consume(147);                 // '{'
      lookahead1W(60);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'every' |
                                    // 'following' | 'following-sibling' | 'for' | 'if' | 'namespace' | 'node' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text'
      parse_Expr();
      consume(149);                 // '}'
      break;
    default:
      parse_Literal();
    }
  }

  function parse_FTExtensionSelection()
  {
    for (;;)
    {
      parse_Pragma();
      lookahead1W(33);              // S^WhiteSpace | '(#' | '(:' | '{'
      if (l1 != 18)                 // '(#'
      {
        break;
      }
    }
    consume(147);                   // '{'
    lookahead1W(54);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WhiteSpace |
                                    // '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 149)                  // '}'
    {
      parse_FTSelection();
    }
    consume(149);                   // '}'
  }

  function parse_FTAnyallOption()
  {
    switch (l1)
    {
    case 48:                        // 'any'
      consume(48);                  // 'any'
      lookahead1W(66);              // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'and' | 'at' | 'case' | 'diacritics' | 'different' |
                                    // 'distance' | 'else' | 'entire' | 'eq' | 'ftand' | 'ftor' | 'ge' | 'gt' | 'is' |
                                    // 'language' | 'le' | 'lowercase' | 'lt' | 'ne' | 'not' | 'occurs' | 'option' |
                                    // 'or' | 'ordered' | 'return' | 'same' | 'satisfies' | 'uppercase' | 'weight' |
                                    // 'window' | 'with' | 'without' | 'word' | '}'
      if (l1 == 145)                // 'word'
      {
        consume(145);               // 'word'
      }
      break;
    case 44:                        // 'all'
      consume(44);                  // 'all'
      lookahead1W(67);              // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'and' | 'at' | 'case' | 'diacritics' | 'different' |
                                    // 'distance' | 'else' | 'entire' | 'eq' | 'ftand' | 'ftor' | 'ge' | 'gt' | 'is' |
                                    // 'language' | 'le' | 'lowercase' | 'lt' | 'ne' | 'not' | 'occurs' | 'option' |
                                    // 'or' | 'ordered' | 'return' | 'same' | 'satisfies' | 'uppercase' | 'weight' |
                                    // 'window' | 'with' | 'without' | 'words' | '}'
      if (l1 == 146)                // 'words'
      {
        consume(146);               // 'words'
      }
      break;
    default:
      consume(113);                 // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    consume(105);                   // 'occurs'
    lookahead1W(47);                // S^WhiteSpace | '(:' | 'at' | 'exactly' | 'from'
    parse_FTRange();
    consume(135);                   // 'times'
  }

  function parse_FTRange()
  {
    switch (l1)
    {
    case 50:                        // 'at'
      lookahead2W(41);              // S^WhiteSpace | '(:' | 'least' | 'most'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 73:                        // 'exactly'
      consume(73);                  // 'exactly'
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_AdditiveExpr();
      break;
    case 24370:                     // 'at' 'least'
      consume(50);                  // 'at'
      lookahead1W(19);              // S^WhiteSpace | '(:' | 'least'
      consume(95);                  // 'least'
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_AdditiveExpr();
      break;
    case 25650:                     // 'at' 'most'
      consume(50);                  // 'at'
      lookahead1W(20);              // S^WhiteSpace | '(:' | 'most'
      consume(100);                 // 'most'
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_AdditiveExpr();
      break;
    default:
      consume(78);                  // 'from'
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_AdditiveExpr();
      consume(136);                 // 'to'
      lookahead1W(59);              // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
      parse_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    switch (l1)
    {
    case 109:                       // 'ordered'
      parse_FTOrder();
      break;
    case 142:                       // 'window'
      parse_FTWindow();
      break;
    case 63:                        // 'distance'
      parse_FTDistance();
      break;
    case 62:                        // 'different'
    case 119:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
  }

  function parse_FTOrder()
  {
    consume(109);                   // 'ordered'
  }

  function parse_FTWindow()
  {
    consume(142);                   // 'window'
    lookahead1W(59);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
    parse_AdditiveExpr();
    parse_FTUnit();
  }

  function parse_FTDistance()
  {
    consume(63);                    // 'distance'
    lookahead1W(47);                // S^WhiteSpace | '(:' | 'at' | 'exactly' | 'from'
    parse_FTRange();
    parse_FTUnit();
  }

  function parse_FTUnit()
  {
    switch (l1)
    {
    case 146:                       // 'words'
      consume(146);                 // 'words'
      break;
    case 127:                       // 'sentences'
      consume(127);                 // 'sentences'
      break;
    default:
      consume(111);                 // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    switch (l1)
    {
    case 119:                       // 'same'
      consume(119);                 // 'same'
      break;
    default:
      consume(62);                  // 'different'
    }
    lookahead1W(42);                // S^WhiteSpace | '(:' | 'paragraph' | 'sentence'
    parse_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    switch (l1)
    {
    case 126:                       // 'sentence'
      consume(126);                 // 'sentence'
      break;
    default:
      consume(110);                 // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    switch (l1)
    {
    case 50:                        // 'at'
      lookahead2W(38);              // S^WhiteSpace | '(:' | 'end' | 'start'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33074:                     // 'at' 'start'
      consume(50);                  // 'at'
      lookahead1W(23);              // S^WhiteSpace | '(:' | 'start'
      consume(129);                 // 'start'
      break;
    case 17714:                     // 'at' 'end'
      consume(50);                  // 'at'
      lookahead1W(16);              // S^WhiteSpace | '(:' | 'end'
      consume(69);                  // 'end'
      break;
    default:
      consume(70);                  // 'entire'
      lookahead1W(14);              // S^WhiteSpace | '(:' | 'content'
      consume(57);                  // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    for (;;)
    {
      parse_FTMatchOption();
      lookahead1W(62);              // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'and' | 'at' | 'case' | 'diacritics' | 'different' |
                                    // 'distance' | 'else' | 'entire' | 'eq' | 'ftand' | 'ftor' | 'ge' | 'gt' | 'is' |
                                    // 'language' | 'le' | 'lowercase' | 'lt' | 'ne' | 'not' | 'option' | 'or' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'uppercase' | 'weight' | 'window' |
                                    // 'with' | 'without' | '}'
      switch (l1)
      {
      case 144:                     // 'without'
        lookahead2W(50);            // S^WhiteSpace | '(:' | 'content' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
        break;
      default:
        lk = l1;
      }
      if (lk != 52                  // 'case'
       && lk != 61                  // 'diacritics'
       && lk != 93                  // 'language'
       && lk != 97                  // 'lowercase'
       && lk != 107                 // 'option'
       && lk != 139                 // 'uppercase'
       && lk != 143                 // 'with'
       && lk != 33424               // 'without' 'stemming'
       && lk != 33680               // 'without' 'stop'
       && lk != 34448               // 'without' 'thesaurus'
       && lk != 36240)              // 'without' 'wildcards'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    switch (l1)
    {
    case 143:                       // 'with'
      lookahead2W(51);              // S^WhiteSpace | '(:' | 'default' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    case 144:                       // 'without'
      lookahead2W(49);              // S^WhiteSpace | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 93:                        // 'language'
      parse_FTLanguageOption();
      break;
    case 36239:                     // 'with' 'wildcards'
    case 36240:                     // 'without' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 34447:                     // 'with' 'thesaurus'
    case 34448:                     // 'without' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 33423:                     // 'with' 'stemming'
    case 33424:                     // 'without' 'stemming'
      parse_FTStemOption();
      break;
    case 52:                        // 'case'
    case 97:                        // 'lowercase'
    case 139:                       // 'uppercase'
      parse_FTCaseOption();
      break;
    case 61:                        // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 107:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTStopWordOption();
    }
  }

  function parse_FTCaseOption()
  {
    switch (l1)
    {
    case 52:                        // 'case'
      lookahead2W(40);              // S^WhiteSpace | '(:' | 'insensitive' | 'sensitive'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 22580:                     // 'case' 'insensitive'
      consume(52);                  // 'case'
      lookahead1W(18);              // S^WhiteSpace | '(:' | 'insensitive'
      consume(88);                  // 'insensitive'
      break;
    case 32052:                     // 'case' 'sensitive'
      consume(52);                  // 'case'
      lookahead1W(22);              // S^WhiteSpace | '(:' | 'sensitive'
      consume(125);                 // 'sensitive'
      break;
    case 97:                        // 'lowercase'
      consume(97);                  // 'lowercase'
      break;
    default:
      consume(139);                 // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    switch (l1)
    {
    case 61:                        // 'diacritics'
      lookahead2W(40);              // S^WhiteSpace | '(:' | 'insensitive' | 'sensitive'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 22589:                     // 'diacritics' 'insensitive'
      consume(61);                  // 'diacritics'
      lookahead1W(18);              // S^WhiteSpace | '(:' | 'insensitive'
      consume(88);                  // 'insensitive'
      break;
    default:
      consume(61);                  // 'diacritics'
      lookahead1W(22);              // S^WhiteSpace | '(:' | 'sensitive'
      consume(125);                 // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    switch (l1)
    {
    case 143:                       // 'with'
      consume(143);                 // 'with'
      lookahead1W(24);              // S^WhiteSpace | '(:' | 'stemming'
      consume(130);                 // 'stemming'
      break;
    default:
      consume(144);                 // 'without'
      lookahead1W(24);              // S^WhiteSpace | '(:' | 'stemming'
      consume(130);                 // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    switch (l1)
    {
    case 143:                       // 'with'
      lookahead2W(27);              // S^WhiteSpace | '(:' | 'thesaurus'
      switch (lk)
      {
      case 34447:                   // 'with' 'thesaurus'
        lookahead3W(45);            // S^WhiteSpace | '(' | '(:' | 'at' | 'default'
        break;
      }
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1148559:                   // 'with' 'thesaurus' '('
      consume(143);                 // 'with'
      lookahead1W(27);              // S^WhiteSpace | '(:' | 'thesaurus'
      consume(134);                 // 'thesaurus'
      lookahead1W(9);               // S^WhiteSpace | '(' | '(:'
      consume(17);                  // '('
      lookahead1W(36);              // S^WhiteSpace | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 50:                      // 'at'
        parse_FTThesaurusID();
        break;
      default:
        consume(58);                // 'default'
      }
      for (;;)
      {
        lookahead1W(34);            // S^WhiteSpace | '(:' | ')' | ','
        if (l1 != 25)               // ','
        {
          break;
        }
        consume(25);                // ','
        lookahead1W(13);            // S^WhiteSpace | '(:' | 'at'
        parse_FTThesaurusID();
      }
      consume(20);                  // ')'
      break;
    case 144:                       // 'without'
      consume(144);                 // 'without'
      lookahead1W(27);              // S^WhiteSpace | '(:' | 'thesaurus'
      consume(134);                 // 'thesaurus'
      break;
    default:
      consume(143);                 // 'with'
      lookahead1W(27);              // S^WhiteSpace | '(:' | 'thesaurus'
      consume(134);                 // 'thesaurus'
      lookahead1W(36);              // S^WhiteSpace | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 50:                      // 'at'
        parse_FTThesaurusID();
        break;
      default:
        consume(58);                // 'default'
      }
    }
  }

  function parse_FTThesaurusID()
  {
    consume(50);                    // 'at'
    lookahead1W(6);                 // StringLiteral | S^WhiteSpace | '(:'
    parse_URILiteral();
    lookahead1W(68);                // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'and' | 'at' | 'case' | 'diacritics' | 'different' |
                                    // 'distance' | 'else' | 'entire' | 'eq' | 'exactly' | 'from' | 'ftand' | 'ftor' |
                                    // 'ge' | 'gt' | 'is' | 'language' | 'le' | 'lowercase' | 'lt' | 'ne' | 'not' |
                                    // 'option' | 'or' | 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' |
                                    // 'uppercase' | 'weight' | 'window' | 'with' | 'without' | '}'
    if (l1 == 117)                  // 'relationship'
    {
      consume(117);                 // 'relationship'
      lookahead1W(6);               // StringLiteral | S^WhiteSpace | '(:'
      consume(6);                   // StringLiteral
    }
    lookahead1W(64);                // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'and' | 'at' | 'case' | 'diacritics' | 'different' |
                                    // 'distance' | 'else' | 'entire' | 'eq' | 'exactly' | 'from' | 'ftand' | 'ftor' |
                                    // 'ge' | 'gt' | 'is' | 'language' | 'le' | 'lowercase' | 'lt' | 'ne' | 'not' |
                                    // 'option' | 'or' | 'ordered' | 'return' | 'same' | 'satisfies' | 'uppercase' |
                                    // 'weight' | 'window' | 'with' | 'without' | '}'
    switch (l1)
    {
    case 50:                        // 'at'
      lookahead2W(48);              // S^WhiteSpace | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 73                    // 'exactly'
     || lk == 78                    // 'from'
     || lk == 24370                 // 'at' 'least'
     || lk == 25650)                // 'at' 'most'
    {
      parse_FTRange();
      consume(96);                  // 'levels'
    }
  }

  function parse_FTStopWordOption()
  {
    switch (l1)
    {
    case 143:                       // 'with'
      lookahead2W(37);              // S^WhiteSpace | '(:' | 'default' | 'stop'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33679:                     // 'with' 'stop'
      consume(143);                 // 'with'
      lookahead1W(25);              // S^WhiteSpace | '(:' | 'stop'
      consume(131);                 // 'stop'
      lookahead1W(29);              // S^WhiteSpace | '(:' | 'words'
      consume(146);                 // 'words'
      lookahead1W(32);              // S^WhiteSpace | '(' | '(:' | 'at'
      parse_FTStopWords();
      for (;;)
      {
        lookahead1W(65);            // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'and' | 'at' | 'case' | 'diacritics' | 'different' |
                                    // 'distance' | 'else' | 'entire' | 'eq' | 'except' | 'ftand' | 'ftor' | 'ge' |
                                    // 'gt' | 'is' | 'language' | 'le' | 'lowercase' | 'lt' | 'ne' | 'not' | 'option' |
                                    // 'or' | 'ordered' | 'return' | 'same' | 'satisfies' | 'union' | 'uppercase' |
                                    // 'weight' | 'window' | 'with' | 'without' | '}'
        if (l1 != 74                // 'except'
         && l1 != 138)              // 'union'
        {
          break;
        }
        parse_FTStopWordsInclExcl();
      }
      break;
    case 144:                       // 'without'
      consume(144);                 // 'without'
      lookahead1W(25);              // S^WhiteSpace | '(:' | 'stop'
      consume(131);                 // 'stop'
      lookahead1W(29);              // S^WhiteSpace | '(:' | 'words'
      consume(146);                 // 'words'
      break;
    default:
      consume(143);                 // 'with'
      lookahead1W(15);              // S^WhiteSpace | '(:' | 'default'
      consume(58);                  // 'default'
      lookahead1W(25);              // S^WhiteSpace | '(:' | 'stop'
      consume(131);                 // 'stop'
      lookahead1W(29);              // S^WhiteSpace | '(:' | 'words'
      consume(146);                 // 'words'
      for (;;)
      {
        lookahead1W(65);            // S^WhiteSpace | EOF | '!=' | '(:' | ')' | ',' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | ']' | 'and' | 'at' | 'case' | 'diacritics' | 'different' |
                                    // 'distance' | 'else' | 'entire' | 'eq' | 'except' | 'ftand' | 'ftor' | 'ge' |
                                    // 'gt' | 'is' | 'language' | 'le' | 'lowercase' | 'lt' | 'ne' | 'not' | 'option' |
                                    // 'or' | 'ordered' | 'return' | 'same' | 'satisfies' | 'union' | 'uppercase' |
                                    // 'weight' | 'window' | 'with' | 'without' | '}'
        if (l1 != 74                // 'except'
         && l1 != 138)              // 'union'
        {
          break;
        }
        parse_FTStopWordsInclExcl();
      }
    }
  }

  function parse_FTStopWords()
  {
    switch (l1)
    {
    case 50:                        // 'at'
      consume(50);                  // 'at'
      lookahead1W(6);               // StringLiteral | S^WhiteSpace | '(:'
      parse_URILiteral();
      break;
    default:
      consume(17);                  // '('
      lookahead1W(6);               // StringLiteral | S^WhiteSpace | '(:'
      consume(6);                   // StringLiteral
      for (;;)
      {
        lookahead1W(34);            // S^WhiteSpace | '(:' | ')' | ','
        if (l1 != 25)               // ','
        {
          break;
        }
        consume(25);                // ','
        lookahead1W(6);             // StringLiteral | S^WhiteSpace | '(:'
        consume(6);                 // StringLiteral
      }
      consume(20);                  // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 138:                       // 'union'
      consume(138);                 // 'union'
      break;
    default:
      consume(74);                  // 'except'
    }
    lookahead1W(32);                // S^WhiteSpace | '(' | '(:' | 'at'
    parse_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    consume(93);                    // 'language'
    lookahead1W(6);                 // StringLiteral | S^WhiteSpace | '(:'
    consume(6);                     // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    switch (l1)
    {
    case 143:                       // 'with'
      consume(143);                 // 'with'
      lookahead1W(28);              // S^WhiteSpace | '(:' | 'wildcards'
      consume(141);                 // 'wildcards'
      break;
    default:
      consume(144);                 // 'without'
      lookahead1W(28);              // S^WhiteSpace | '(:' | 'wildcards'
      consume(141);                 // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    consume(107);                   // 'option'
    lookahead1W(7);                 // QName | S^WhiteSpace | '(:'
    consume(8);                     // QName
    lookahead1W(6);                 // StringLiteral | S^WhiteSpace | '(:'
    consume(6);                     // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    consume(144);                   // 'without'
    lookahead1W(14);                // S^WhiteSpace | '(:' | 'content'
    consume(57);                    // 'content'
    lookahead1W(59);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | Wildcard |
                                    // QName | S^WhiteSpace | '$' | '(' | '(:' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // '@' | 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'comment' |
                                    // 'descendant' | 'descendant-or-self' | 'document-node' | 'element' | 'following' |
                                    // 'following-sibling' | 'namespace' | 'node' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'text'
    parse_UnionExpr();
  }

  function try_WhiteSpace()
  {
    for (;;)
    {
      switch (l1)
      {
      case 11:                      // S^WhiteSpace
        consume(11);                // S^WhiteSpace
        break;
      default:
        try_Comment();
      }
      lookahead1(5);                // %OTHER | S^WhiteSpace | '(:'
      if (l1 == 1)                  // %OTHER
      {
        break;
      }
    }
  }

  function try_Comment()
  {
    consume(19);                    // '(:'
    for (;;)
    {
      lookahead1(30);               // CommentContents | '(:' | ':)'
      if (l1 == 31)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 12:                      // CommentContents
        consume(12);                // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consume(31);                    // ':)'
  }

  function consume(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = 0; }}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1; var l2W = l2;
    var b2W = b2; var e2W = e2;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;
    l3 = 0;

    try_WhiteSpace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; l2 = l2W; if (l2 != 0) {
    b2 = b2W; e2 = e2W; }}
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 11)               // S^WhiteSpace
      {
        if (code != 19)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 8) | l1;
  }

  function lookahead3W(tokenSetId)
  {
    if (l3 == 0)
    {
      l3 = matchW(tokenSetId);
      b3 = begin;
      e3 = end;
    }
    lk |= l3 << 16;
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    throw new thisParser.ParseException(b, e, s, l, t);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var l3, b3, e3;

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XPathV20withFullText.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 1023; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XPathV20withFullText.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XPathV20withFullText.MAP1[(c0 & 15) + XPathV20withFullText.MAP1[(c1 & 31) + XPathV20withFullText.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XPathV20withFullText.MAP2[m] > c0) hi = m - 1;
          else if (XPathV20withFullText.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XPathV20withFullText.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 10) + code - 1;
      code = XPathV20withFullText.TRANSITION[(i0 & 15) + XPathV20withFullText.TRANSITION[i0 >> 4]];

      if (code > 1023)
      {
        result = code;
        code &= 1023;
        end = current;
      }
    }

    result >>= 10;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 8; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 8;
    }

    if (end > size) end = size;
    return (result & 255) - 1;
  }

}

XPathV20withFullText.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XPathV20withFullText.INITIAL[tokenSetId] & 1023;
  for (var i = 0; i < 150; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 864 + s - 1;
    var i1 = i0 >> 1;
    var f = XPathV20withFullText.EXPECTED[(i0 & 1) + XPathV20withFullText.EXPECTED[(i1 & 3) + XPathV20withFullText.EXPECTED[i1 >> 2]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XPathV20withFullText.TOKEN[j]);
      }
    }
  }
  return set;
};

XPathV20withFullText.MAP0 =
[
  /*   0 */ 54, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 6, 18, 19, 20, 21, 22,
  /*  65 */ 23, 23, 23, 23, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 25,
  /*  92 */ 6, 26, 6, 23, 6, 27, 28, 29, 30, 31, 32, 33, 34, 35, 23, 23, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
  /* 120 */ 48, 49, 23, 50, 51, 52, 6, 6
];

XPathV20withFullText.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 331, 370, 386, 422, 422, 422, 414, 354, 346, 354, 346, 354, 354,
  /* 126 */ 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 439, 439, 439, 439, 439, 439, 439,
  /* 147 */ 315, 354, 354, 354, 354, 354, 354, 354, 354, 400, 422, 422, 423, 421, 422, 422, 354, 354, 354, 354, 354,
  /* 168 */ 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 422, 422, 422, 422, 422, 422, 422, 422,
  /* 189 */ 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
  /* 210 */ 422, 422, 422, 353, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
  /* 231 */ 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 422, 54, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 291 */ 14, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 6, 18, 19, 20, 21, 22, 23, 23, 23, 23, 24, 23, 23, 23,
  /* 318 */ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 6, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 25, 6, 26, 6,
  /* 346 */ 23, 23, 23, 23, 23, 23, 23, 6, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 6, 27, 28,
  /* 373 */ 29, 30, 31, 32, 33, 34, 35, 23, 23, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 23, 50, 51, 52,
  /* 400 */ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 23, 23, 6, 6, 6, 6, 6, 6, 6, 53, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  /* 435 */ 6, 6, 6, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
];

XPathV20withFullText.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 6, 23, 6, 23, 23, 6
];

XPathV20withFullText.INITIAL =
[
  /*  0 */ 3073, 2, 3, 4, 5, 2054, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /* 28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /* 55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79
];

XPathV20withFullText.TRANSITION =
[
  /*     0 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*    17 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*    34 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*    51 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5265, 5270, 3520, 3520,
  /*    68 */ 3521, 3537, 11383, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 10060, 3576, 3576, 3576, 3576, 3576, 3576,
  /*    85 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   102 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   119 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 3576, 3768, 3560, 8384, 11383, 3576,
  /*   136 */ 3576, 3576, 3576, 3576, 3576, 3576, 10060, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   153 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   170 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   187 */ 3576, 3576, 3576, 3576, 3576, 4585, 8995, 10842, 10675, 4294, 7988, 11383, 3576, 3576, 3576, 3576, 3576,
  /*   204 */ 3576, 10843, 10060, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   221 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   238 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   255 */ 3576, 3593, 8995, 3576, 3576, 6938, 8384, 4592, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 10060, 3576,
  /*   272 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   289 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   306 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 4545, 8995, 3576,
  /*   323 */ 8477, 4134, 8384, 11383, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 10060, 3576, 3576, 3576, 3576, 3576,
  /*   340 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   357 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   374 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 3576, 3576, 5369, 8384, 11383,
  /*   391 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 10060, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   408 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   425 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   442 */ 3576, 3576, 3576, 3576, 3576, 3576, 4668, 8995, 7534, 11612, 4889, 5585, 11383, 3576, 3576, 3576, 3576,
  /*   459 */ 3576, 3576, 7534, 10060, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   476 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   493 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   510 */ 3576, 3576, 4706, 4716, 3614, 3644, 3628, 8384, 3947, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 8734,
  /*   527 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   544 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   561 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 4493, 8995,
  /*   578 */ 3660, 10363, 3709, 3761, 7995, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 4675, 3576, 3576, 3576, 3576,
  /*   595 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   612 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   629 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 11516, 7490, 4062, 8384,
  /*   646 */ 11383, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 10060, 8303, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   663 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   680 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   697 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 3576, 5764, 4164, 8384, 11383, 3576, 3576, 3576,
  /*   714 */ 3576, 3576, 3576, 3576, 10060, 8727, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   731 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   748 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   765 */ 3576, 3576, 3576, 3575, 8995, 3784, 9215, 3805, 8384, 11383, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   782 */ 10060, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   799 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   816 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575,
  /*   833 */ 8995, 3576, 5786, 5038, 3940, 11383, 3848, 5832, 8451, 6773, 3576, 7842, 8447, 10060, 8835, 7344, 4981,
  /*   850 */ 3576, 3870, 6977, 9986, 9149, 7342, 8450, 5185, 3871, 6977, 8450, 7610, 7586, 3866, 7841, 6222, 7840,
  /*   867 */ 3887, 3576, 7861, 8450, 3910, 8452, 7863, 5703, 8451, 8444, 3963, 7838, 11012, 4013, 10766, 4029, 6053,
  /*   884 */ 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 3576, 4048, 4265,
  /*   901 */ 3940, 11383, 4078, 11291, 8451, 6773, 3576, 7842, 8447, 10060, 7840, 7344, 4981, 3576, 3870, 6977, 9986,
  /*   918 */ 9149, 7342, 8450, 5185, 3871, 6977, 8450, 7610, 7586, 3866, 7841, 6222, 7840, 8655, 3576, 7861, 8450,
  /*   935 */ 7080, 8452, 7863, 5703, 8451, 8444, 4087, 7838, 4032, 6817, 6105, 6106, 7578, 5661, 11163, 3576, 3576,
  /*   952 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 3576, 7252, 3598, 8384, 11383, 3576, 3576,
  /*   969 */ 3576, 4130, 3576, 3576, 3576, 10060, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*   986 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1003 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1020 */ 3576, 3576, 3576, 3576, 3575, 8995, 3576, 4150, 6996, 3940, 11383, 4180, 9238, 8451, 6773, 3576, 7842,
  /*  1037 */ 8447, 10060, 7665, 7344, 4981, 3576, 3870, 6977, 9986, 7765, 7342, 8450, 5185, 3871, 6977, 8450, 7610,
  /*  1054 */ 7586, 3866, 7841, 6222, 7840, 8655, 3576, 7861, 8450, 7080, 8452, 7863, 5703, 8451, 8444, 4087, 7838,
  /*  1071 */ 4032, 6817, 6105, 6106, 7578, 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1088 */ 3820, 11558, 3576, 3576, 5369, 4454, 3745, 4953, 10578, 4317, 4205, 3576, 4375, 4313, 5352, 4373, 4245,
  /*  1105 */ 4209, 3576, 3787, 4225, 4318, 3789, 4243, 4316, 4292, 3788, 4225, 4316, 9766, 4355, 4261, 4374, 4227,
  /*  1122 */ 4373, 4281, 3576, 8595, 4316, 9771, 4318, 8597, 10571, 4317, 4310, 4334, 4371, 4396, 4391, 4422, 4423,
  /*  1139 */ 4347, 4412, 4439, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 3576, 10934,
  /*  1156 */ 4478, 8384, 11383, 3576, 3576, 3738, 3576, 3576, 3576, 3576, 10060, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1173 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1190 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1207 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 3576, 11581, 4530, 8384, 11383, 3576,
  /*  1224 */ 3576, 8065, 3576, 3576, 3576, 3576, 10060, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1241 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1258 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1275 */ 3576, 3576, 3576, 3576, 3576, 3575, 8995, 3576, 4462, 4570, 8384, 11383, 3576, 3576, 10391, 3576, 3576,
  /*  1292 */ 3576, 3576, 10060, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1309 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1326 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1343 */ 3576, 3575, 8995, 4608, 3576, 8073, 8384, 11383, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 10060, 3576,
  /*  1360 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1377 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1394 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 3576,
  /*  1411 */ 9128, 4612, 8384, 11383, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 10060, 3576, 3576, 3576, 3576, 3576,
  /*  1428 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1445 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1462 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 8995, 5490, 11421, 9408, 3940, 11383,
  /*  1479 */ 3848, 5832, 8451, 6773, 3576, 7842, 9981, 10060, 7289, 7344, 4981, 3576, 3870, 6977, 9986, 9149, 7342,
  /*  1496 */ 8450, 5185, 3871, 6977, 8450, 7610, 7586, 3866, 7841, 6222, 7840, 8655, 3576, 7861, 8450, 7080, 8452,
  /*  1513 */ 7863, 5703, 8451, 8444, 4087, 7838, 4032, 6817, 6105, 6106, 7578, 5661, 11163, 3576, 3576, 3576, 3576,
  /*  1530 */ 3576, 3576, 3576, 3576, 3576, 3576, 5910, 8995, 5490, 11421, 9408, 3940, 11383, 4628, 5832, 8451, 6773,
  /*  1547 */ 3576, 7842, 9981, 10060, 3675, 7344, 4981, 3576, 3870, 6977, 9986, 9149, 7342, 8450, 5185, 3871, 6977,
  /*  1564 */ 8450, 7610, 7586, 3866, 7841, 6222, 7840, 8655, 3576, 7861, 8450, 7080, 8452, 7863, 5703, 8451, 8444,
  /*  1581 */ 4087, 7838, 4032, 6817, 6105, 6106, 7578, 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1598 */ 3576, 3576, 3575, 8995, 3576, 3576, 9991, 8384, 11383, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 10060,
  /*  1615 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1632 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1649 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995,
  /*  1666 */ 3576, 10399, 4653, 8384, 11383, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 10060, 3576, 3576, 3576, 3576,
  /*  1683 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1700 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1717 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 7413, 8995, 7426, 6192, 4691, 3940,
  /*  1734 */ 3544, 3848, 5832, 4732, 4753, 3577, 4781, 4807, 4833, 4861, 7344, 4981, 4887, 4905, 4925, 4946, 4969,
  /*  1751 */ 7342, 8450, 5185, 4997, 8771, 5024, 7610, 10644, 3866, 10284, 5054, 5078, 9477, 11626, 7861, 9484, 7080,
  /*  1768 */ 5094, 5148, 7513, 5182, 8444, 4087, 7838, 4032, 6817, 6105, 6106, 7578, 5661, 11163, 3576, 3576, 3576,
  /*  1785 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 8995, 5490, 11421, 9408, 3940, 11383, 3848, 5832, 8451,
  /*  1802 */ 6773, 3576, 7842, 9981, 10060, 7289, 7344, 4981, 3576, 3870, 6977, 9986, 9149, 7342, 8450, 5185, 3871,
  /*  1819 */ 6977, 8450, 7610, 7586, 3866, 7841, 6222, 5809, 5203, 3576, 7375, 8450, 7080, 8452, 7863, 5703, 8451,
  /*  1836 */ 8444, 4087, 7838, 4032, 6817, 6105, 7957, 5226, 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  1853 */ 3576, 3576, 3576, 7047, 8995, 5490, 7059, 5250, 3940, 8391, 5286, 5310, 10837, 5344, 5368, 7842, 9354,
  /*  1870 */ 10060, 10136, 7565, 4981, 3693, 5385, 5425, 9986, 8034, 5446, 5484, 5324, 3871, 6977, 8619, 7610, 7586,
  /*  1887 */ 3866, 7841, 6222, 7840, 8655, 7279, 7861, 3894, 7080, 11469, 5506, 5703, 5556, 5294, 4087, 5698, 4032,
  /*  1904 */ 6817, 6105, 7230, 7578, 5661, 11149, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 6857,
  /*  1921 */ 8995, 6868, 5608, 5622, 3940, 11383, 3848, 5832, 8451, 6773, 11361, 5638, 5132, 10060, 6164, 6095, 5685,
  /*  1938 */ 9942, 6386, 5972, 9986, 5719, 7342, 11496, 8806, 3871, 6977, 5758, 7610, 8560, 5780, 3850, 6222, 7840,
  /*  1955 */ 9588, 3576, 7861, 8450, 7080, 5802, 10737, 5825, 8451, 8444, 4087, 7838, 4032, 6817, 9842, 6106, 7578,
  /*  1972 */ 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 5848, 6356, 5879, 5895,
  /*  1989 */ 5934, 5950, 5988, 6026, 6069, 6122, 3724, 6138, 6154, 6180, 6208, 10636, 6238, 3576, 5166, 6220, 6280,
  /*  2006 */ 9744, 6304, 6343, 6372, 6402, 6427, 6469, 6492, 6544, 3866, 6572, 8927, 4909, 6599, 6615, 11223, 8450,
  /*  2023 */ 7080, 8506, 6674, 8334, 10126, 6708, 6738, 6765, 6040, 3925, 10199, 6793, 7933, 6327, 11163, 3576, 3576,
  /*  2040 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 8995, 11475, 10429, 6842, 3940, 6884, 3848, 5832,
  /*  2057 */ 8451, 6913, 3576, 7842, 9715, 10060, 7289, 7344, 10606, 6937, 6954, 6976, 9986, 9149, 7342, 10356, 5185,
  /*  2074 */ 9258, 6977, 8450, 7610, 7586, 3866, 7841, 6222, 7840, 8655, 6993, 7861, 7012, 7080, 8452, 7863, 5703,
  /*  2091 */ 8451, 8444, 4087, 7838, 4032, 6817, 6105, 6106, 7578, 8262, 11093, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  2108 */ 3576, 3576, 3576, 3576, 5910, 8995, 5490, 8698, 7032, 3940, 11383, 3848, 5832, 8451, 6773, 3576, 7842,
  /*  2125 */ 9981, 10060, 7289, 7344, 4981, 3576, 3870, 6977, 9986, 9149, 7342, 8450, 8023, 3871, 6977, 8450, 7075,
  /*  2142 */ 7586, 3866, 7096, 7117, 7840, 8655, 3576, 7861, 8450, 7080, 5731, 7863, 7141, 8451, 8444, 4189, 7164,
  /*  2159 */ 10703, 6817, 6105, 6106, 7578, 5661, 11079, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  2176 */ 5910, 8995, 5490, 11421, 9408, 3940, 8210, 3848, 7148, 8451, 6773, 7634, 8917, 9981, 10060, 7183, 7219,
  /*  2193 */ 4981, 3576, 3870, 6977, 9986, 9149, 7342, 7591, 7740, 3871, 6977, 7246, 7610, 7586, 7268, 7841, 6222,
  /*  2210 */ 7840, 8655, 3576, 7861, 8450, 7080, 8452, 7863, 5703, 8451, 8444, 7323, 11199, 4032, 5400, 6105, 6106,
  /*  2227 */ 7578, 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 7360, 10255, 4845,
  /*  2244 */ 7398, 3940, 9897, 3848, 5832, 9301, 7442, 7452, 7468, 7193, 10060, 7289, 5468, 4981, 6010, 7506, 8765,
  /*  2261 */ 7529, 9149, 7342, 8935, 4105, 3871, 7550, 5062, 9638, 7586, 3866, 7841, 6222, 7607, 8655, 6630, 7861,
  /*  2278 */ 7904, 7080, 7626, 6528, 9018, 9565, 10507, 4087, 7838, 4032, 6817, 6749, 8884, 7578, 5653, 11121, 3576,
  /*  2295 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 7650, 6288, 7688, 7702, 3940, 11383, 7718,
  /*  2312 */ 6826, 5999, 7734, 7756, 9060, 9981, 4817, 7289, 8165, 7781, 5328, 3870, 8354, 9986, 9149, 11035, 7834,
  /*  2329 */ 5185, 3871, 6977, 8450, 7610, 7586, 3866, 7858, 7879, 4114, 8655, 3576, 7861, 8450, 7080, 8452, 7895,
  /*  2346 */ 5703, 8451, 8444, 7920, 7838, 4032, 6817, 6105, 6106, 6264, 8254, 11065, 3576, 3576, 3576, 3576, 3576,
  /*  2363 */ 3576, 3576, 3576, 3576, 3576, 5910, 7973, 6921, 8011, 8223, 3940, 11383, 3848, 5409, 8451, 6773, 3576,
  /*  2380 */ 7842, 9981, 10060, 7203, 8650, 8050, 3576, 4554, 5430, 8089, 5863, 8871, 8450, 5185, 3871, 6977, 5210,
  /*  2397 */ 8118, 8134, 3866, 7841, 6222, 7840, 8655, 3576, 7861, 8450, 7080, 8452, 7863, 5703, 8451, 8444, 4087,
  /*  2414 */ 7838, 4032, 9464, 8155, 6106, 7578, 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  2431 */ 3576, 5910, 8995, 5490, 6556, 8181, 6507, 11383, 3848, 8891, 11410, 6773, 8197, 8239, 4791, 8278, 4504,
  /*  2448 */ 7344, 10296, 8294, 9364, 4930, 8319, 9149, 7342, 8450, 5161, 3871, 8350, 9691, 7610, 10545, 8370, 8407,
  /*  2465 */ 7382, 10689, 8423, 8468, 8493, 8522, 8549, 8452, 7863, 5703, 8582, 8613, 8635, 7818, 3977, 6817, 10173,
  /*  2482 */ 10715, 7578, 5669, 11177, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 9179, 5490,
  /*  2499 */ 3832, 8671, 8687, 8714, 8750, 8787, 8803, 8822, 5109, 8858, 8907, 5571, 8951, 10163, 8964, 8993, 9011,
  /*  2516 */ 9034, 9986, 11633, 7342, 8450, 9790, 9055, 9076, 9097, 7610, 4096, 9119, 7841, 10097, 7840, 8655, 3576,
  /*  2533 */ 7861, 8450, 10958, 6777, 7863, 5703, 8451, 8444, 4087, 7838, 10770, 7795, 6105, 11009, 7578, 5661, 11107,
  /*  2550 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 8995, 5592, 9536, 10480, 3940, 11383,
  /*  2567 */ 3848, 5832, 8451, 6411, 9144, 7842, 9981, 10060, 7289, 10537, 4981, 9208, 3870, 6977, 9165, 9149, 7342,
  /*  2584 */ 8450, 5185, 3871, 6977, 8450, 7610, 7586, 9195, 7167, 6222, 7840, 3997, 3576, 7861, 8450, 7080, 8452,
  /*  2601 */ 7863, 9231, 8566, 7672, 4087, 7838, 4032, 6817, 6105, 7335, 7578, 5661, 11163, 3576, 3576, 3576, 3576,
  /*  2618 */ 3576, 3576, 3576, 3576, 3576, 3576, 5910, 8995, 5490, 11421, 9408, 3940, 11383, 3848, 5832, 7479, 6773,
  /*  2635 */ 9254, 6960, 9981, 10060, 7289, 7344, 4981, 3576, 3870, 6977, 9986, 9149, 7342, 8450, 5185, 3871, 6977,
  /*  2652 */ 8450, 7610, 7586, 3866, 7841, 6222, 7840, 8655, 3576, 7861, 8450, 7080, 8452, 7863, 5703, 8451, 8444,
  /*  2669 */ 4637, 7838, 4032, 6817, 6105, 6106, 7578, 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  2686 */ 3576, 3576, 5910, 8995, 5490, 4765, 9274, 3940, 11383, 9290, 9327, 9390, 9374, 9405, 5124, 9424, 7307,
  /*  2703 */ 7289, 7344, 9450, 11441, 9500, 9081, 9524, 9552, 9581, 8450, 9604, 3871, 10091, 8450, 7610, 5234, 9626,
  /*  2720 */ 9654, 9683, 6522, 10450, 3576, 9707, 9731, 7080, 8452, 7863, 5703, 9787, 8444, 4087, 7838, 4032, 5520,
  /*  2737 */ 9806, 6106, 9832, 10895, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 6897,
  /*  2754 */ 10229, 9858, 9872, 9888, 11383, 3848, 5832, 6684, 6773, 4737, 6692, 10806, 9913, 7289, 9816, 10871, 9941,
  /*  2771 */ 9958, 9974, 10007, 9149, 7342, 8450, 5185, 3871, 6977, 8139, 7610, 7809, 10023, 8438, 4514, 10039, 5533,
  /*  2788 */ 9103, 10076, 8450, 5008, 8452, 7863, 5703, 6583, 8842, 4087, 6441, 10113, 10152, 5458, 6106, 10189, 6319,
  /*  2805 */ 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 9610, 5490, 10215, 8102, 10245,
  /*  2822 */ 10271, 10312, 10341, 9667, 10379, 10415, 9434, 9981, 10060, 9311, 10445, 6453, 10466, 10496, 10523, 10561,
  /*  2838 */ 10594, 10622, 7299, 5185, 5742, 4871, 7125, 6084, 7586, 10660, 5963, 11247, 10731, 6805, 5918, 9508,
  /*  2854 */ 10325, 10753, 9756, 7101, 9925, 8451, 8444, 10786, 10822, 8977, 6817, 6105, 6106, 10859, 10887, 11135,
  /*  2870 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 8995, 5490, 8533, 10911, 3940, 11383,
  /*  2887 */ 3848, 5832, 8451, 6773, 3576, 7842, 9981, 10060, 7289, 7344, 4981, 3576, 3870, 6977, 9986, 10979, 3990,
  /*  2904 */ 5540, 7016, 3871, 9039, 3685, 7610, 7586, 10927, 7841, 6222, 10950, 8655, 10974, 7861, 10054, 10995, 8452,
  /*  2921 */ 7863, 11028, 8451, 8444, 4087, 7838, 6251, 6817, 6105, 6106, 7946, 5661, 11051, 3576, 3576, 3576, 3576,
  /*  2938 */ 3576, 3576, 3576, 3576, 3576, 3576, 5910, 8995, 5490, 11421, 9408, 3940, 11383, 3848, 5832, 8451, 11193,
  /*  2955 */ 3576, 7842, 9981, 10060, 7289, 7344, 4981, 3576, 11215, 11239, 9986, 9149, 7342, 8450, 5185, 11263, 10799,
  /*  2972 */ 8450, 7610, 7586, 3866, 7841, 6222, 7840, 8655, 3576, 7861, 8450, 7080, 8452, 7863, 11284, 8451, 8444,
  /*  2989 */ 4087, 7838, 9341, 6817, 6105, 6106, 7578, 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3006 */ 3576, 3576, 5910, 11341, 5490, 11307, 11321, 3940, 11383, 3848, 5832, 8451, 6773, 3576, 7842, 9981, 10060,
  /*  3023 */ 7289, 7344, 4981, 11337, 3870, 6977, 9986, 9149, 7342, 8450, 5185, 3871, 6977, 8450, 7610, 7586, 3866,
  /*  3040 */ 7841, 6222, 7840, 11540, 11357, 7861, 11377, 7080, 8452, 7863, 5703, 8451, 8444, 4087, 7838, 4032, 6817,
  /*  3057 */ 6105, 6106, 7578, 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 8995,
  /*  3074 */ 5490, 11421, 9408, 3940, 11383, 11399, 5832, 8451, 6773, 11437, 11268, 9981, 10060, 7289, 11457, 4981,
  /*  3090 */ 3576, 3870, 6977, 9986, 9149, 7342, 8450, 5185, 3871, 6977, 8450, 7610, 7586, 3866, 7841, 6222, 7840,
  /*  3107 */ 8655, 3576, 7861, 8450, 7080, 8452, 7863, 5703, 8451, 8444, 4087, 7838, 4032, 6817, 6105, 6106, 7578,
  /*  3124 */ 5661, 11163, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 5910, 8995, 5490, 11421, 9408,
  /*  3141 */ 3940, 11383, 3848, 5832, 8451, 6773, 3576, 7842, 9981, 10060, 7289, 7344, 4981, 5187, 3870, 6977, 9986,
  /*  3158 */ 9149, 7342, 8450, 5185, 3871, 6977, 8450, 7610, 11491, 11512, 7841, 6222, 7840, 8655, 3576, 7861, 8450,
  /*  3175 */ 11532, 8452, 7863, 5703, 8451, 8444, 4087, 7838, 4032, 6817, 6105, 6106, 7578, 5661, 11163, 3576, 3576,
  /*  3192 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 11556, 11574, 5369, 8384, 11383, 3576, 3576,
  /*  3209 */ 3576, 3576, 3576, 3576, 3576, 10060, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3226 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3243 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3260 */ 3576, 3576, 3576, 3576, 3575, 8995, 3576, 3576, 6722, 8384, 11383, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3277 */ 3576, 10060, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3294 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3311 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3328 */ 3575, 8995, 3576, 6644, 6658, 8384, 11383, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 10060, 3576, 3576,
  /*  3345 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3362 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3379 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3575, 8995, 3576, 3576,
  /*  3396 */ 5369, 3940, 11383, 3848, 5832, 8451, 6773, 3576, 7842, 8447, 10060, 7840, 7344, 4981, 3576, 3870, 6977,
  /*  3413 */ 9986, 9149, 7342, 8450, 5185, 3871, 6977, 8450, 7610, 7586, 3866, 7841, 6222, 7840, 8655, 3576, 7861,
  /*  3430 */ 8450, 7080, 8452, 7863, 5703, 8451, 8444, 4087, 7838, 4032, 6817, 6105, 6106, 7578, 5661, 11163, 3576,
  /*  3447 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 6476, 11597, 3576, 3576, 3576,
  /*  3464 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3481 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3498 */ 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576, 3576,
  /*  3515 */ 3576, 3576, 3576, 3576, 3576, 12372, 12372, 12372, 12372, 12372, 12372, 12372, 12372, 12372, 12372, 12372,
  /*  3531 */ 12372, 12372, 12372, 12372, 12372, 3073, 0, 0, 11347, 12372, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
  /*  3555 */ 107, 107, 0, 0, 239, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 3073, 0,
  /*  3577 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 3152, 0, 82, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  3610 */ 30884, 30884, 0, 3073, 18517, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 18517, 85, 85, 85, 85, 85,
  /*  3633 */ 85, 85, 85, 85, 85, 85, 85, 85, 18517, 18517, 3073, 85, 85, 85, 85, 18542, 18542, 18542, 85, 85, 18517,
  /*  3654 */ 85, 18517, 18517, 18517, 85, 85, 0, 0, 21504, 21504, 0, 0, 0, 0, 0, 0, 0, 21504, 21504, 0, 21504, 0, 0, 0,
  /*  3678 */ 0, 0, 247, 0, 0, 8556, 9557, 9340, 9340, 9340, 9340, 9340, 9340, 0, 544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
  /*  3703 */ 414, 0, 0, 0, 0, 0, 21504, 21504, 21504, 21504, 21504, 21504, 21504, 21504, 21504, 21504, 21504, 21504,
  /*  3721 */ 21504, 21504, 21504, 0, 0, 0, 0, 0, 296, 296, 302, 0, 0, 0, 0, 0, 97590, 0, 0, 0, 0, 0, 0, 35840, 0, 0, 0,
  /*  3748 */ 0, 0, 0, 0, 0, 0, 0, 236, 20717, 236, 20480, 0, 0, 0, 16384, 0, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  3777 */ 0, 150, 0, 0, 0, 150, 150, 0, 0, 26624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 250, 250, 250,
  /*  3805 */ 26624, 26624, 26624, 26624, 26624, 26624, 26624, 26624, 26624, 26624, 26624, 26624, 26624, 26624, 26624,
  /*  3820 */ 3073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 9340, 9297, 9340, 160, 9340, 9340, 9340, 174,
  /*  3847 */ 177, 0, 10354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 82044, 9340, 0, 0, 0, 9340, 0, 0,
  /*  3872 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9853, 9297, 9297, 9340,
  /*  3895 */ 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 678, 0, 679, 0, 9340, 9340, 9340, 9340, 9340, 9899,
  /*  3918 */ 9297, 9297, 9297, 9297, 9297, 9297, 9904, 9340, 0, 0, 0, 0, 9340, 9340, 91136, 0, 9340, 9340, 9340, 9340,
  /*  3938 */ 9297, 10014, 9297, 0, 0, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 235, 235, 0, 0, 0, 0, 0, 9340,
  /*  3966 */ 9973, 9340, 9340, 9340, 9297, 9977, 9297, 9297, 9297, 9297, 9982, 9340, 9340, 0, 0, 9994, 9340, 9340,
  /*  3984 */ 9340, 9998, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 9297, 9297, 9696, 9297, 9297, 9297, 9297,
  /*  4001 */ 9297, 9297, 9297, 9340, 9340, 9340, 9859, 9340, 9340, 0, 0, 0, 10006, 0, 0, 0, 0, 9340, 9340, 0, 0, 9340,
  /*  4023 */ 10010, 9340, 9340, 9297, 9297, 10015, 9297, 10033, 9340, 9340, 9340, 0, 0, 9340, 9340, 9340, 9340, 9297,
  /*  4041 */ 9297, 9297, 9297, 9297, 9340, 9340, 9340, 0, 0, 0, 0, 120, 120, 120, 0, 0, 28814, 0, 28814, 28814, 28814,
  /*  4062 */ 0, 0, 0, 0, 0, 0, 22528, 22528, 22528, 22528, 23552, 22528, 22528, 22528, 8315, 3073, 0, 10354, 0, 0, 0,
  /*  4083 */ 0, 0, 0, 5366, 0, 0, 9340, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9340,
  /*  4103 */ 9786, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 626, 9340, 9340, 9340, 9340,
  /*  4128 */ 9340, 9340, 0, 0, 0, 31744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17408, 3073, 0, 0, 0, 0, 4217, 4217,
  /*  4156 */ 4217, 0, 0, 4217, 0, 4217, 4217, 4217, 0, 0, 0, 0, 0, 0, 24576, 24576, 24576, 24576, 25600, 24576, 24576,
  /*  4177 */ 24576, 24576, 3073, 0, 10354, 0, 0, 0, 0, 0, 5366, 4217, 0, 0, 9340, 9340, 9340, 9340, 9340, 9297, 9297,
  /*  4198 */ 9297, 9297, 9297, 9297, 9340, 9340, 78592, 0, 0, 0, 0, 250, 250, 250, 250, 0, 0, 0, 0, 0, 0, 0, 0, 250,
  /*  4222 */ 250, 250, 0, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0, 0, 250,
  /*  4244 */ 250, 250, 250, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 250, 250, 250, 250, 0, 0, 0, 250, 0, 0,
  /*  4267 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28814, 3073, 218, 218, 218, 218, 218, 218, 218, 250, 250, 250, 250,
  /*  4292 */ 250, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 3073, 0, 0, 0, 250, 250, 250, 250, 250, 250, 250,
  /*  4320 */ 250, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 250, 250, 250, 250, 218, 218, 218, 218, 218, 218,
  /*  4347 */ 250, 250, 250, 250, 0, 250, 250, 250, 218, 218, 218, 218, 250, 250, 250, 250, 250, 250, 250, 0, 0, 0, 0,
  /*  4370 */ 0, 250, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 250, 250, 250, 250, 250, 250, 250, 250, 0, 0, 0, 0, 250,
  /*  4397 */ 250, 0, 0, 250, 250, 250, 250, 218, 218, 218, 218, 218, 250, 250, 250, 250, 250, 218, 218, 250, 250, 250,
  /*  4419 */ 250, 250, 250, 218, 218, 250, 250, 250, 250, 0, 0, 250, 250, 250, 250, 218, 218, 218, 218, 218, 250, 218,
  /*  4441 */ 250, 250, 250, 250, 218, 250, 250, 218, 250, 218, 250, 218, 250, 218, 0, 0, 0, 20480, 86, 87, 33792, 0, 0,
  /*  4464 */ 0, 0, 0, 0, 0, 0, 0, 0, 39064, 0, 0, 0, 39064, 39064, 34967, 34967, 34967, 34967, 34967, 34967, 34967,
  /*  4485 */ 34967, 34967, 34967, 34967, 34967, 34967, 34967, 34967, 3073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21504, 0, 0, 0,
  /*  4507 */ 0, 0, 0, 0, 363, 8556, 9557, 9340, 9340, 9340, 9340, 9340, 9340, 9827, 9340, 139388, 9340, 9340, 9340,
  /*  4526 */ 9340, 150652, 0, 0, 37888, 37888, 37888, 37888, 37888, 37888, 37888, 37888, 37888, 37888, 37888, 37888,
  /*  4542 */ 37888, 37888, 37888, 3073, 0, 0, 0, 0, 0, 0, 0, 17408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 425, 0, 0, 0, 0, 9340,
  /*  4569 */ 9340, 39064, 39064, 39064, 39064, 39064, 39064, 39064, 39064, 39064, 39064, 39064, 39064, 39064, 39064,
  /*  4584 */ 39064, 3073, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 107, 107, 19456, 0, 0, 0, 0, 0, 41984,
  /*  4612 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43008, 3073, 0, 10354, 0, 0, 0, 0, 0, 0, 247, 0, 0, 9340, 9340,
  /*  4641 */ 9340, 9340, 9340, 9297, 9297, 9978, 9297, 9297, 9297, 9340, 9340, 9340, 45056, 45056, 45056, 45056, 45056,
  /*  4658 */ 45056, 45056, 45056, 45056, 45056, 45056, 45056, 45056, 45056, 45056, 3073, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
  /*  4679 */ 0, 0, 0, 0, 0, 0, 107, 537600, 537600, 0, 0, 0, 153, 153, 153, 153, 153, 185, 153, 153, 153, 153, 153,
  /*  4702 */ 153, 153, 153, 9417, 3073, 0, 0, 0, 0, 85, 85, 85, 85, 18517, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  /*  4727 */ 85, 85, 85, 108, 18517, 9340, 9340, 9489, 9490, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94208, 0, 0, 0,
  /*  4753 */ 0, 283, 0, 0, 9340, 9340, 9340, 9340, 288, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 9340, 9297, 9340, 161, 9340,
  /*  4777 */ 9340, 9340, 161, 161, 283, 0, 0, 0, 0, 0, 317, 318, 9340, 9536, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  4798 */ 9554, 9340, 9557, 0, 0, 342, 0, 0, 0, 9340, 9489, 9340, 9548, 9340, 9550, 9340, 9340, 9340, 9557, 0, 0, 0,
  /*  4820 */ 0, 0, 0, 0, 0, 353, 0, 107, 107, 0, 0, 0, 0, 345, 0, 0, 348, 0, 0, 0, 0, 0, 0, 107, 107, 0, 0, 0, 0, 0, 0,
  /*  4851 */ 0, 9340, 9353, 9340, 157, 9340, 9383, 9383, 157, 157, 0, 0, 360, 0, 0, 0, 0, 0, 8556, 9557, 9340, 9340,
  /*  4873 */ 9340, 9340, 9340, 9340, 9340, 9745, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9752, 404, 405, 0, 0, 0, 0,
  /*  4893 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 3073, 0, 0, 405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9845,
  /*  4922 */ 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9652, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  4939 */ 9340, 9340, 9340, 9340, 9340, 9664, 9340, 9340, 9340, 9340, 9340, 9557, 0, 456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  4962 */ 0, 249, 250, 250, 250, 250, 250, 0, 0, 0, 466, 0, 0, 0, 0, 0, 0, 0, 8556, 9340, 9340, 9340, 9340, 0, 0, 0,
  /*  4988 */ 0, 0, 0, 0, 0, 9340, 9340, 9340, 0, 511, 512, 0, 0, 0, 0, 516, 0, 0, 0, 520, 0, 0, 9340, 9340, 9340, 9340,
  /*  5014 */ 9898, 9340, 9297, 9297, 9297, 9297, 9902, 9903, 9297, 9340, 9340, 9754, 9340, 9340, 9340, 9340, 0, 0, 0,
  /*  5033 */ 0, 0, 0, 0, 548, 0, 0, 0, 0, 0, 0, 27648, 27648, 27648, 27648, 27648, 27648, 27648, 27648, 27648, 3073,
  /*  5054 */ 9821, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 546, 0, 0,
  /*  5075 */ 0, 0, 0, 0, 0, 0, 0, 621, 0, 0, 0, 625, 0, 9340, 9340, 9340, 9340, 9340, 9848, 9340, 9340, 9908, 9340, 0,
  /*  5099 */ 0, 0, 0, 0, 0, 0, 699, 700, 0, 702, 0, 0, 0, 0, 0, 301, 234, 0, 0, 0, 0, 0, 0, 0, 311, 0, 0, 0, 0, 0, 316,
  /*  5130 */ 0, 0, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9557, 0, 0, 0, 0, 71680, 0, 704, 0, 0, 0,
  /*  5152 */ 9340, 9340, 9340, 9927, 9340, 9340, 9340, 9930, 9340, 9340, 9340, 0, 0, 502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  5176 */ 0, 427, 0, 0, 9340, 9340, 9340, 9951, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  5202 */ 50176, 9849, 9297, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0,
  /*  5222 */ 547, 0, 0, 0, 9340, 9340, 10047, 10048, 0, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9340, 9340, 9340,
  /*  5241 */ 9340, 9340, 9340, 9340, 0, 0, 576, 577, 578, 169, 169, 169, 169, 169, 169, 0, 0, 0, 199, 0, 199, 200, 200,
  /*  5264 */ 9418, 3073, 0, 0, 11347, 11347, 12372, 12372, 12372, 12372, 12372, 12372, 12372, 12372, 12372, 12372,
  /*  5280 */ 12372, 12372, 12372, 12372, 107, 12372, 0, 10354, 0, 242, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340,
  /*  5301 */ 9340, 9967, 9340, 9340, 9340, 0, 0, 0, 0, 9340, 9340, 9473, 9340, 9297, 9297, 9297, 9297, 9297, 9297,
  /*  5320 */ 9297, 9483, 9297, 0, 9340, 9340, 0, 501, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417, 46080, 0, 0, 0, 0, 0,
  /*  5348 */ 9340, 9340, 9340, 9473, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 537837, 236, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
  /*  5376 */ 0, 0, 0, 0, 0, 0, 0, 0, 3073, 0, 0, 419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9599, 9340, 0, 791, 0, 0, 9340,
  /*  5406 */ 9340, 0, 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9479, 9297, 9297, 9297, 9297, 9297, 0, 9340, 9340,
  /*  5425 */ 9340, 9340, 9340, 9651, 9653, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  5442 */ 9340, 9662, 9340, 9665, 9340, 9692, 9340, 9340, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9699, 9297,
  /*  5459 */ 9297, 9340, 9340, 10020, 10021, 0, 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297, 9297, 9297,
  /*  5477 */ 9297, 9297, 9297, 9340, 9600, 9340, 9340, 9703, 9340, 9340, 9340, 9707, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  5499 */ 0, 0, 10354, 9297, 0, 0, 0, 0, 705, 706, 0, 9340, 9340, 9926, 9340, 9928, 9340, 9340, 9340, 9340, 9932,
  /*  5520 */ 9340, 0, 0, 0, 0, 9340, 9340, 0, 0, 9340, 9340, 10011, 9340, 9297, 9297, 9297, 9297, 9297, 9854, 9297,
  /*  5540 */ 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 496, 0, 0, 0, 0, 9340, 9340, 9340, 9953, 9340, 0, 0, 0,
  /*  5564 */ 0, 0, 0, 0, 0, 0, 746, 0, 0, 0, 0, 0, 350, 0, 0, 0, 0, 107, 107, 0, 355, 0, 0, 0, 0, 0, 86, 7388, 0, 0, 0,
  /*  5595 */ 0, 0, 0, 0, 0, 0, 0, 112, 10354, 9297, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 9343, 9351, 9361, 154, 9361, 9361,
  /*  5621 */ 9361, 170, 170, 170, 170, 170, 170, 187, 187, 187, 187, 187, 187, 187, 187, 9419, 3073, 0, 0, 0, 0, 308,
  /*  5643 */ 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 9340, 9542, 9340, 9340, 9297, 9297, 9340, 9340, 10063, 10064, 9340,
  /*  5662 */ 9340, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 9340, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  5679 */ 9297, 9297, 9340, 9340, 10068, 10069, 9340, 9340, 9340, 9340, 49152, 0, 0, 0, 395, 0, 0, 0, 9340, 9340,
  /*  5699 */ 9340, 0, 0, 770, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297, 463, 464, 0,
  /*  5722 */ 0, 0, 0, 0, 0, 0, 0, 0, 8556, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 698, 0, 0, 0, 0, 0, 0, 0, 517, 0,
  /*  5751 */ 519, 0, 521, 55817, 55818, 9340, 9740, 9340, 9340, 9340, 9756, 9340, 9758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  5774 */ 0, 24576, 24576, 24576, 0, 0, 0, 0, 0, 9340, 0, 81920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27648, 27648,
  /*  5799 */ 27648, 0, 0, 9906, 9340, 9340, 9340, 0, 0, 112640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9843, 9340, 9340, 9340,
  /*  5823 */ 9340, 9340, 0, 0, 0, 720, 0, 0, 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297,
  /*  5844 */ 9297, 0, 9340, 9340, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 468, 0, 0, 80896, 0,
  /*  5873 */ 0, 8556, 9340, 9689, 9340, 9691, 93, 0, 0, 0, 0, 0, 0, 9344, 9352, 9344, 155, 9344, 9381, 9381, 155, 155,
  /*  5895 */ 178, 180, 155, 155, 178, 155, 180, 180, 180, 180, 180, 180, 180, 180, 9420, 3073, 9297, 0, 9297, 0, 0, 0,
  /*  5917 */ 9297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144384, 0, 76800, 0, 0, 655, 9297, 0, 0, 0, 0, 86, 87, 0, 0, 0, 0,
  /*  5945 */ 222, 0, 0, 0, 225, 0, 0, 227, 0, 0, 0, 0, 0, 0, 0, 107, 107, 107, 0, 0, 0, 0, 0, 0, 0, 141312, 0, 9340,
  /*  5973 */ 9340, 9340, 9340, 9340, 9340, 9340, 9340, 102524, 9585, 9659, 9340, 9340, 9340, 9340, 9340, 240, 10354, 0,
  /*  5991 */ 0, 0, 0, 0, 0, 247, 0, 0, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 279, 0, 0, 0, 0, 0, 0, 0, 411, 0,
  /*  6019 */ 0, 0, 415, 0, 0, 0, 0, 9340, 9340, 9340, 9474, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9484, 0,
  /*  6040 */ 9340, 9340, 0, 777, 9340, 9340, 9340, 9997, 9297, 9297, 9297, 9297, 10002, 9340, 9340, 9340, 9340, 0,
  /*  6058 */ 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9340, 10054, 9340, 9340, 9487, 9340, 9340, 9340, 9492, 0, 0, 0,
  /*  6077 */ 0, 0, 0, 86016, 0, 97280, 105472, 0, 0, 0, 0, 0, 554, 83968, 9340, 9340, 9340, 9340, 9340, 9340, 9297,
  /*  6098 */ 9297, 9297, 9297, 9297, 9297, 9595, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 0, 0, 9340, 9340, 9340,
  /*  6116 */ 9340, 9297, 9297, 9297, 9297, 9297, 282, 0, 0, 0, 9340, 9340, 9340, 9492, 0, 0, 0, 97280, 105472, 0, 0,
  /*  6137 */ 296, 313, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9487, 9340, 9340, 86140, 9340, 97608, 9340, 105596, 9340, 9340,
  /*  6158 */ 9549, 9551, 9474, 9340, 9340, 9557, 0, 0, 0, 0, 0, 0, 0, 0, 8556, 9557, 9340, 9340, 9340, 9340, 9585,
  /*  6179 */ 9340, 0, 0, 0, 0, 349, 0, 351, 352, 0, 0, 107, 107, 0, 0, 0, 0, 0, 0, 0, 9341, 9349, 9359, 153, 9359,
  /*  6204 */ 9359, 9359, 153, 153, 358, 0, 0, 0, 349, 247, 0, 0, 8556, 9557, 9340, 9340, 9340, 9584, 9340, 9340, 9340,
  /*  6225 */ 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 9340, 9340, 9605, 9340, 0, 0, 0,
  /*  6245 */ 0, 0, 0, 0, 0, 9617, 9340, 9340, 0, 0, 9340, 9340, 9340, 9340, 9297, 9999, 9297, 9297, 9297, 9340, 9340,
  /*  6266 */ 9340, 9340, 0, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9340, 9340, 10055, 10056, 9666, 9340, 9340, 9340,
  /*  6284 */ 9557, 0, 0, 457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 10354, 9297, 0, 0, 0, 106620, 9340, 9693, 9340, 9297,
  /*  6309 */ 9297, 9297, 9297, 9297, 9297, 106577, 9297, 9700, 9297, 9701, 9340, 9340, 9297, 9297, 9340, 10062, 9340,
  /*  6326 */ 9340, 9340, 9340, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 125052, 9297, 125009, 9340, 10067, 9340, 9340,
  /*  6343 */ 9340, 9340, 9705, 9706, 9340, 9340, 0, 0, 69632, 0, 495, 0, 122880, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
  /*  6367 */ 10354, 9297, 0, 115, 117, 9340, 132220, 54272, 0, 0, 0, 0, 504, 0, 506, 0, 0, 0, 509, 0, 0, 0, 0, 0, 0,
  /*  6392 */ 102400, 0, 0, 0, 0, 0, 0, 0, 49276, 9340, 0, 0, 0, 0, 514, 515, 0, 0, 518, 0, 0, 0, 0, 9340, 9340, 9340,
  /*  6418 */ 9340, 0, 0, 0, 0, 0, 294, 295, 0, 69756, 9340, 9742, 9340, 9340, 9340, 9340, 9340, 9746, 9747, 9748, 9706,
  /*  6439 */ 9340, 123004, 9340, 9340, 0, 123904, 0, 0, 0, 771, 0, 0, 0, 131072, 9340, 9340, 9340, 9340, 0, 0, 0, 394,
  /*  6461 */ 0, 396, 398, 400, 9340, 9340, 9340, 0, 9753, 9340, 9340, 9340, 9340, 9340, 543, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  6485 */ 0, 14336, 0, 0, 0, 14336, 14336, 126976, 0, 551, 552, 0, 0, 0, 9340, 9772, 9340, 9774, 9775, 9340, 9297,
  /*  6506 */ 9778, 9297, 0, 0, 0, 0, 86, 87, 0, 0, 0, 0, 0, 223, 90112, 224, 0, 0, 0, 0, 0, 622, 0, 0, 0, 0, 9340,
  /*  6533 */ 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9931, 9340, 9340, 0, 9780, 9297, 9782, 9297, 9340, 9340, 9785,
  /*  6551 */ 9340, 9340, 9340, 9789, 574, 0, 0, 0, 0, 0, 0, 0, 9345, 9354, 9363, 159, 9363, 9363, 9363, 173, 173, 0, 0,
  /*  6574 */ 0, 0, 596, 0, 0, 0, 0, 9340, 9816, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 742, 743, 0, 0, 0, 0,
  /*  6599 */ 9297, 9297, 9851, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 72704, 647, 0, 0, 0,
  /*  6619 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116736, 0, 0, 0, 0, 0, 650, 0, 0, 0, 0, 0, 0, 0, 654, 0, 0, 0, 0, 0, 0,
  /*  6650 */ 153600, 0, 0, 0, 153600, 0, 0, 0, 153600, 153600, 153600, 153600, 153600, 153600, 153600, 153600, 153600,
  /*  6667 */ 153600, 153600, 153600, 153600, 153600, 153600, 3073, 0, 0, 0, 0, 9340, 9925, 9340, 9340, 9340, 9929,
  /*  6684 */ 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 94208, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  6706 */ 94332, 9340, 748, 92160, 56320, 56444, 9340, 65660, 9340, 92284, 9340, 9340, 9969, 9970, 0, 129024, 0, 0,
  /*  6724 */ 0, 0, 0, 0, 152576, 152576, 152576, 152576, 152576, 152576, 152576, 152576, 152576, 3073, 0, 0, 53372,
  /*  6741 */ 9340, 9340, 9340, 9340, 53329, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 806, 0, 9340, 10025,
  /*  6759 */ 10026, 9340, 9297, 9297, 10030, 10031, 104572, 9340, 0, 0, 0, 100352, 143360, 0, 0, 0, 0, 0, 9340, 9340,
  /*  6779 */ 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 701, 0, 0, 10032, 9340, 9340, 9340, 9340, 0, 0, 67708, 9340, 9340,
  /*  6803 */ 9340, 67665, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9856, 9340, 9340, 9340, 115836, 9340, 0, 0, 0, 0,
  /*  6822 */ 9340, 9340, 0, 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9478, 9297, 9297, 9297, 9297, 9297, 0, 9340,
  /*  6841 */ 9340, 179, 171, 171, 171, 179, 171, 188, 188, 188, 188, 188, 188, 188, 188, 9421, 3073, 9297, 0, 9297, 0,
  /*  6862 */ 0, 0, 9297, 0, 0, 0, 0, 0, 0, 0, 92, 92, 0, 0, 0, 0, 0, 10354, 9297, 92, 0, 0, 0, 109568, 0, 0, 0, 0, 0,
  /*  6891 */ 0, 0, 0, 107, 107, 107, 0, 0, 0, 0, 0, 0, 99, 100, 101, 102, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 9340, 9340,
  /*  6919 */ 89212, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 10354, 9297, 0, 0, 0, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  6949 */ 0, 0, 0, 0, 3152, 0, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 73852, 9340, 9340, 9340,
  /*  6975 */ 9340, 9647, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  6992 */ 9340, 0, 0, 648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4217, 3073, 9340, 9340, 9885, 9340, 9340, 9340,
  /*  7018 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 508, 0, 0, 0, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
  /*  7044 */ 156, 156, 9422, 3073, 9297, 0, 9297, 0, 0, 0, 9297, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 9342, 9350, 9360, 0,
  /*  7070 */ 9360, 9360, 9360, 169, 169, 0, 550, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 9340, 9297, 9297, 9297,
  /*  7091 */ 9297, 9297, 9297, 9297, 9340, 0, 0, 0, 595, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  7113 */ 9340, 9340, 148604, 717, 9340, 9340, 9340, 9340, 9825, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  7130 */ 9340, 0, 0, 0, 98304, 0, 133120, 0, 0, 0, 0, 0, 134144, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9297, 9297,
  /*  7154 */ 9297, 9297, 9297, 9297, 9297, 9297, 9297, 0, 9340, 9486, 9340, 118529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340,
  /*  7177 */ 9340, 9340, 9340, 9819, 9340, 9340, 0, 359, 0, 0, 0, 0, 0, 0, 8556, 9557, 9340, 9340, 9340, 9340, 9340,
  /*  7198 */ 9340, 9552, 9340, 9555, 9557, 0, 0, 0, 0, 0, 0, 0, 0, 8556, 9557, 9340, 9582, 9340, 9340, 9340, 9340,
  /*  7219 */ 9587, 9340, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9597, 9297, 9340, 9340, 9340, 9340, 0, 0,
  /*  7237 */ 9340, 9340, 9340, 9340, 9297, 10041, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 9757, 9340, 0, 0, 0, 0, 0,
  /*  7257 */ 0, 0, 0, 0, 0, 0, 30884, 30884, 30884, 0, 0, 0, 0, 0, 9340, 0, 0, 0, 0, 0, 0, 587, 0, 0, 0, 0, 0, 0, 0,
  /*  7286 */ 652, 0, 653, 0, 0, 0, 0, 0, 0, 0, 0, 8556, 9557, 9340, 9340, 9340, 9340, 9340, 9340, 0, 493, 0, 0, 0, 0,
  /*  7311 */ 0, 0, 0, 0, 0, 354, 107, 107, 0, 0, 356, 0, 113664, 0, 9340, 9340, 9340, 9340, 9340, 9297, 9297, 9297,
  /*  7333 */ 9297, 9297, 9297, 9340, 9340, 9340, 9340, 120832, 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297,
  /*  7351 */ 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
  /*  7376 */ 0, 0, 0, 0, 660, 9877, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 142460, 9340, 9340,
  /*  7395 */ 9340, 615, 0, 157, 157, 157, 157, 157, 157, 189, 197, 197, 197, 197, 197, 197, 197, 9423, 3073, 9297, 0,
  /*  7416 */ 9297, 0, 0, 0, 9297, 0, 0, 0, 0, 89, 90, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 10354, 9297, 90, 0, 90, 0, 0, 284,
  /*  7445 */ 0, 9340, 9340, 9340, 9340, 0, 289, 0, 0, 0, 0, 0, 297, 297, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 314, 0, 284,
  /*  7472 */ 0, 314, 0, 0, 9340, 9340, 9537, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 73728, 0, 0, 0, 0, 0, 0, 0,
  /*  7497 */ 8315, 0, 8315, 0, 8315, 8315, 8315, 0, 0, 0, 0, 0, 420, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340,
  /*  7523 */ 9942, 9297, 9297, 9297, 9297, 9948, 9340, 9667, 9340, 9340, 9557, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
  /*  7547 */ 0, 0, 0, 9340, 9741, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9751, 9340,
  /*  7566 */ 9340, 9297, 9297, 9591, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9599, 9340, 9340, 9340, 9340, 0, 9340,
  /*  7584 */ 9340, 9340, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  7606 */ 499, 0, 0, 619, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9340, 9907,
  /*  7628 */ 9340, 9909, 0, 0, 0, 696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
  /*  7660 */ 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 5366, 6506, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 9340, 9968, 9340, 9340,
  /*  7684 */ 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 9340, 9297, 9340, 158, 9340, 9340, 9340, 172, 172, 172, 172, 172, 172,
  /*  7708 */ 190, 190, 190, 190, 190, 190, 190, 190, 9424, 3073, 0, 10354, 241, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340,
  /*  7731 */ 9340, 9340, 9470, 0, 0, 0, 0, 9470, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147955, 0, 0, 0, 0, 0,
  /*  7757 */ 279, 0, 279, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6506, 0, 8556, 9340, 9340, 9340, 9340, 9340,
  /*  7782 */ 9340, 9340, 9606, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9602, 9340, 0, 0, 0, 0, 9340, 9340, 0, 0, 10009, 9340,
  /*  7806 */ 9340, 9340, 10013, 9297, 9297, 9297, 9297, 9784, 9340, 9340, 9340, 9787, 9340, 9340, 0, 0, 0, 0, 0, 0,
  /*  7826 */ 772, 0, 0, 0, 9340, 9990, 9340, 9340, 9340, 9704, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  7850 */ 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 594, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9340,
  /*  7872 */ 9340, 9340, 9340, 9340, 9340, 9340, 0, 9340, 9340, 9823, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  7890 */ 9340, 9340, 9340, 0, 616, 0, 0, 0, 707, 9924, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  7910 */ 0, 0, 672, 673, 0, 0, 0, 0, 0, 0, 0, 756, 9340, 9340, 9340, 9340, 9976, 9297, 9297, 9297, 9297, 9297,
  /*  7932 */ 9981, 9340, 9340, 9340, 9340, 0, 9340, 9340, 9340, 70737, 9297, 9297, 9297, 10053, 9340, 9340, 9340, 9340,
  /*  7950 */ 0, 9340, 10050, 9340, 9297, 9297, 10052, 9297, 9340, 9340, 9340, 9340, 0, 0, 9340, 9340, 10039, 9340,
  /*  7968 */ 9297, 9297, 9297, 10043, 9297, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 7387, 87, 0,
  /*  7996 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 107, 32768, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 9340, 9297, 9340, 0, 9340,
  /*  8023 */ 9340, 9340, 0, 0, 0, 0, 503, 0, 0, 0, 507, 0, 0, 0, 0, 0, 0, 0, 470, 0, 0, 0, 8556, 9340, 9340, 9340,
  /*  8049 */ 9340, 9603, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 397, 0, 9340, 9340, 9618, 0, 0, 0, 0, 0, 15360, 36864,
  /*  8072 */ 39936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41984, 41984, 0, 0, 0, 3073, 9340, 9340, 9340, 9340, 9557, 0, 0, 0,
  /*  8097 */ 0, 0, 0, 0, 461, 0, 0, 0, 0, 0, 0, 194, 194, 198, 198, 194, 198, 198, 198, 9431, 3073, 0, 0, 0, 0, 553, 0,
  /*  8124 */ 0, 9340, 9340, 9773, 9340, 9340, 9776, 9297, 9297, 9779, 9297, 9297, 9297, 9783, 9340, 9340, 9340, 9340,
  /*  8142 */ 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150528, 9297, 10017, 9340, 9340, 9340, 9340, 0, 0, 9340,
  /*  8164 */ 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9602, 173,
  /*  8182 */ 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 9426, 3073, 0, 280, 0, 280, 300, 0, 0, 0,
  /*  8205 */ 304, 0, 0, 0, 309, 0, 0, 0, 0, 0, 0, 231, 232, 0, 0, 107, 107, 107, 0, 0, 0, 0, 0, 0, 191, 191, 191, 191,
  /*  8233 */ 191, 191, 191, 191, 9425, 3073, 0, 0, 300, 0, 315, 0, 0, 0, 9535, 9340, 9340, 9539, 9340, 9340, 9543,
  /*  8254 */ 9340, 9340, 9297, 9297, 10061, 9340, 9340, 9340, 9340, 9340, 9297, 9297, 9340, 9340, 9340, 9340, 9340,
  /*  8271 */ 9340, 9297, 9297, 48252, 9340, 9340, 9340, 0, 0, 347, 0, 0, 0, 0, 0, 0, 0, 107, 107, 0, 0, 0, 357, 0, 0,
  /*  8296 */ 407, 0, 0, 0, 0, 0, 399, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8192, 0, 0, 0, 0, 0, 0, 9340, 9340, 9668, 9340, 9557,
  /*  8324 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 137216, 0, 0, 0, 0, 0, 130048, 722, 9340, 9340, 9340, 9943, 9297, 9297, 9946,
  /*  8348 */ 9297, 9949, 9340, 9340, 9340, 9743, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  8365 */ 9340, 9340, 9340, 9606, 9340, 0, 0, 0, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 142336, 0, 0, 0, 0, 0, 86, 87, 0,
  /*  8392 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 107, 107, 0, 238, 0, 592, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340,
  /*  8420 */ 9340, 9340, 9820, 9297, 9850, 9297, 9852, 9297, 9297, 9297, 9340, 9857, 9340, 9340, 9340, 9340, 0, 646, 0,
  /*  8439 */ 0, 0, 0, 0, 139264, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  8464 */ 0, 0, 0, 0, 0, 121856, 0, 0, 0, 0, 0, 0, 110592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17408, 0, 17408, 17408, 17408,
  /*  8491 */ 0, 0, 0, 0, 0, 658, 659, 0, 9340, 9340, 9879, 9340, 9340, 9340, 9881, 9340, 9340, 9340, 9340, 694, 0, 0,
  /*  8513 */ 0, 0, 0, 0, 0, 0, 0, 0, 703, 9340, 121980, 9340, 9886, 9340, 9340, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0,
  /*  8540 */ 9340, 9297, 9340, 0, 9340, 9340, 9340, 175, 175, 0, 0, 9340, 9340, 9897, 9340, 9340, 9340, 9297, 9297,
  /*  8559 */ 9901, 9297, 9297, 9297, 9297, 9340, 57468, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  8581 */ 747, 9340, 9340, 9952, 9340, 9954, 739, 0, 0, 0, 0, 0, 0, 744, 0, 0, 0, 0, 0, 0, 250, 250, 250, 250, 250,
  /*  8606 */ 250, 250, 250, 250, 250, 250, 0, 0, 0, 0, 9340, 9965, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 0,
  /*  8628 */ 0, 0, 0, 0, 0, 549, 0, 0, 0, 9340, 9340, 9974, 9340, 9340, 9297, 9297, 9297, 9979, 9297, 9297, 9340, 9983,
  /*  8650 */ 9340, 9340, 9297, 9590, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 9340,
  /*  8667 */ 9340, 0, 0, 0, 174, 174, 177, 177, 174, 177, 160, 160, 160, 160, 160, 160, 160, 160, 9427, 3073, 9297, 0,
  /*  8689 */ 0, 0, 0, 86, 87, 0, 0, 0, 221, 0, 0, 0, 0, 0, 0, 0, 9340, 9297, 9340, 156, 9340, 9340, 9340, 156, 156,
  /*  8714 */ 226, 0, 0, 0, 0, 0, 0, 0, 0, 234, 107, 107, 107, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235,
  /*  8745 */ 235, 0, 0, 0, 0, 0, 10354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9468, 9469, 9340, 9340, 9340, 9340,
  /*  8769 */ 9340, 9655, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9749, 9340, 9340, 9340,
  /*  8786 */ 9340, 9471, 9340, 9340, 9340, 9297, 9476, 9477, 9297, 9297, 9481, 9297, 9297, 9297, 0, 9340, 9468, 9469,
  /*  8804 */ 9488, 9471, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149504, 0, 0, 0, 0, 9340, 9502, 9340, 9503,
  /*  8830 */ 0, 0, 0, 292, 293, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  8854 */ 0, 0, 138240, 145408, 0, 140288, 0, 234, 0, 140288, 0, 0, 9340, 9468, 9469, 9340, 9488, 9340, 9340, 9340,
  /*  8874 */ 9340, 9297, 9695, 9297, 9697, 9297, 95313, 9297, 9297, 9297, 9297, 9340, 9340, 10035, 10036, 0, 0, 9340,
  /*  8892 */ 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 0, 9485, 9340, 9545, 9546, 9340,
  /*  8910 */ 9340, 9340, 9340, 140412, 9340, 9556, 9557, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9486, 9340, 9340, 9340, 9340,
  /*  8931 */ 9340, 9340, 9340, 9828, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 494, 0, 0, 0, 497, 0, 0, 0, 0, 0,
  /*  8954 */ 361, 350, 0, 0, 0, 8556, 9557, 9340, 9340, 9340, 9340, 9340, 9586, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 9340,
  /*  8977 */ 9340, 9340, 0, 0, 9340, 9340, 9996, 9340, 9297, 9297, 9297, 10001, 9297, 9340, 62228, 9340, 0, 406, 0, 0,
  /*  8997 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9941,
  /*  9028 */ 9340, 9297, 9297, 9297, 9947, 9297, 9340, 9340, 9340, 9340, 9654, 9340, 9340, 9340, 9340, 9340, 9340,
  /*  9045 */ 9340, 9340, 9340, 9340, 9340, 9340, 9750, 9340, 9340, 9340, 0, 0, 513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340,
  /*  9069 */ 9340, 9340, 9538, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9744, 9340, 9340, 9340, 9340, 9340,
  /*  9086 */ 9340, 9340, 9340, 9340, 9340, 9340, 9660, 9340, 9340, 9340, 9340, 9340, 9340, 9755, 9340, 9340, 9340, 0,
  /*  9104 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108544, 0, 0, 0, 0, 0, 580, 581, 9340, 0, 0, 0, 0, 585, 0, 0, 0, 0, 0, 0, 0,
  /*  9135 */ 0, 0, 43008, 0, 43008, 43008, 43008, 0, 0, 294, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8556, 9340,
  /*  9162 */ 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9557, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 98, 0, 0,
  /*  9187 */ 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 589, 0, 0, 0, 0, 0, 0, 410, 0, 0, 0, 0,
  /*  9219 */ 0, 0, 0, 0, 0, 0, 26624, 0, 0, 0, 26624, 26624, 0, 0, 0, 0, 721, 0, 0, 9340, 9340, 9340, 9340, 9297, 9297,
  /*  9244 */ 9297, 9297, 9297, 9297, 9297, 9297, 9297, 5366, 9340, 9340, 0, 73728, 0, 73728, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  9267 */ 0, 0, 0, 0, 9340, 9739, 9340, 161, 161, 161, 161, 184, 161, 161, 161, 161, 161, 161, 161, 161, 161, 9429,
  /*  9289 */ 3073, 0, 10354, 0, 0, 0, 244, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 278, 0, 0, 0, 0, 0,
  /*  9316 */ 0, 0, 0, 8556, 9557, 9581, 9340, 9340, 9340, 9340, 9340, 9340, 9472, 9340, 9340, 9297, 9297, 9297, 9297,
  /*  9335 */ 9297, 9297, 9482, 9297, 9297, 0, 9340, 9340, 776, 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297,
  /*  9354 */ 9340, 9340, 9340, 9340, 9340, 9473, 9340, 9340, 9340, 9557, 0, 0, 0, 0, 0, 0, 0, 0, 424, 0, 0, 0, 0, 0,
  /*  9378 */ 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 111897, 0, 0, 9340, 9340, 9340, 9491, 9340, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  9403 */ 0, 0, 111897, 0, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 3073, 9340, 9340, 111947, 9491,
  /*  9428 */ 9340, 9340, 9553, 9340, 9340, 9557, 0, 0, 0, 0, 0, 0, 0, 0, 52475, 9340, 9340, 9340, 9541, 87164, 9340,
  /*  9449 */ 101500, 9340, 9604, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 79996, 9340, 0, 0, 0, 0, 9340, 9340, 0, 792,
  /*  9473 */ 9340, 9340, 9340, 10012, 9297, 9297, 9297, 9297, 9297, 9297, 9855, 9340, 9340, 9340, 9340, 9340, 9340, 0,
  /*  9491 */ 0, 0, 0, 0, 0, 0, 677, 0, 0, 418, 0, 0, 0, 0, 0, 0, 423, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 76924,
  /*  9519 */ 9880, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9670, 9557, 0, 0, 0, 0, 0, 0, 460, 0, 0, 0, 0, 0, 0, 0,
  /*  9543 */ 9346, 9355, 9364, 0, 9364, 9364, 9364, 0, 0, 0, 0, 465, 0, 0, 0, 0, 0, 0, 0, 0, 8556, 9688, 9340, 9340,
  /*  9567 */ 9340, 9340, 9340, 0, 0, 0, 741, 0, 0, 0, 0, 745, 0, 0, 9340, 9340, 9340, 9340, 9694, 9297, 9297, 9297,
  /*  9589 */ 9297, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 9860, 0, 0, 0, 9716, 9340, 0, 0, 0,
  /*  9609 */ 84992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 104, 0, 0, 107, 0, 0, 0, 0, 9340, 582, 0, 0, 584, 0, 586, 0,
  /*  9637 */ 588, 0, 0, 0, 0, 0, 0, 0, 9771, 9340, 9340, 9340, 9340, 9340, 9777, 9297, 9297, 0, 593, 0, 0, 0, 0, 0, 0,
  /*  9662 */ 0, 9340, 9340, 9340, 9818, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 52224, 0, 0, 87040, 0, 101376, 0, 0,
  /*  9683 */ 9340, 9822, 9340, 9824, 9340, 9826, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 545, 0, 0, 0, 0,
  /*  9704 */ 0, 0, 0, 0, 0, 657, 0, 0, 0, 9340, 9878, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9557, 0, 0,
  /*  9727 */ 0, 343, 0, 0, 9884, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 675, 676, 0, 0, 0, 0, 0, 0, 469, 0, 0, 0,
  /*  9754 */ 0, 8556, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 148480, 697, 0, 0, 0, 0, 0, 0, 0, 250, 250, 250, 250, 250,
  /*  9778 */ 250, 218, 218, 218, 218, 218, 218, 218, 250, 47838, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  9802 */ 0, 0, 510, 0, 10016, 9297, 10018, 9340, 9340, 9340, 0, 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9297,
  /*  9822 */ 9297, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9601, 9340, 9340, 10046, 9340, 9340, 0, 9340, 9340, 9340,
  /*  9840 */ 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 0, 0, 10024, 9340, 9340, 9340, 10028, 9297, 9297, 9297,
  /*  9858 */ 100, 119, 119, 119, 0, 0, 0, 9347, 9356, 9365, 162, 9365, 9384, 9384, 162, 162, 162, 162, 162, 162, 193,
  /*  9879 */ 193, 193, 193, 193, 193, 193, 193, 9430, 3073, 9297, 0, 0, 0, 0, 86, 87, 0, 51200, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  9905 */ 233, 0, 107, 107, 107, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 107, 107, 0, 0, 0, 0, 0, 0, 0, 9939, 9940,
  /*  9934 */ 9340, 9340, 9944, 9945, 9297, 9297, 9297, 392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49152, 0, 392,
  /*  9960 */ 0, 0, 0, 0, 0, 0, 0, 0, 426, 0, 428, 429, 9340, 9646, 9648, 9649, 9340, 9340, 9340, 9340, 9656, 9340,
  /*  9982 */ 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9557, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44032, 44032, 0,
  /* 10006 */ 3073, 9340, 9340, 9340, 9340, 9557, 0, 0, 0, 458, 0, 459, 0, 0, 0, 0, 462, 579, 0, 0, 9340, 0, 0, 0, 0, 0,
  /* 10032 */ 0, 0, 0, 0, 0, 0, 591, 617, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9847, 9340, 9340, 9340,
  /* 10057 */ 9340, 9340, 9887, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 107, 0, 0, 0, 0, 656, 99328, 0, 0, 0, 0, 9340, 9340,
  /* 10084 */ 9340, 9340, 9340, 9340, 9340, 9882, 99452, 9340, 9340, 9340, 9340, 9340, 85116, 9340, 9340, 9340, 9340,
  /* 10101 */ 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9829, 9830, 9340, 0, 0, 124028, 131196, 0, 0, 9340, 9340, 9340,
  /* 10120 */ 9340, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 0, 65536, 740, 0, 96256, 0, 0, 0, 0, 0,
  /* 10141 */ 0, 0, 0, 8556, 9557, 9340, 9340, 9583, 9340, 9340, 9340, 9340, 63488, 0, 82944, 114688, 83068, 114812, 0,
  /* 10160 */ 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9596, 9297, 9297, 9340, 9340, 9340,
  /* 10178 */ 9340, 0, 0, 9340, 9340, 9340, 9340, 9297, 10029, 9297, 9297, 10045, 9340, 9340, 9340, 0, 10049, 9340,
  /* 10196 */ 9340, 9297, 10051, 9297, 9297, 9340, 9340, 9340, 9340, 0, 807, 9340, 9340, 9340, 10027, 9297, 9297, 9297,
  /* 10214 */ 9297, 0, 104, 104, 104, 0, 0, 0, 9348, 9357, 9348, 0, 9348, 9348, 9348, 0, 0, 0, 0, 0, 102, 100, 111, 99,
  /* 10238 */ 0, 113, 10354, 9297, 0, 116, 0, 9297, 0, 0, 0, 0, 86, 87, 0, 0, 52224, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 0,
  /* 10266 */ 10354, 9297, 0, 0, 0, 0, 0, 0, 228, 229, 230, 0, 0, 0, 0, 107, 107, 107, 0, 0, 0, 0, 0, 0, 597, 0, 598,
  /* 10293 */ 9815, 9340, 9817, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 399, 9340, 9340, 9340, 0, 0, 10354, 0, 0,
  /* 10316 */ 0, 0, 245, 0, 0, 248, 0, 9340, 9467, 9340, 9340, 9340, 9340, 9340, 9340, 59392, 60416, 0, 0, 0, 0, 0, 0,
  /* 10339 */ 0, 68608, 9340, 9340, 9340, 9340, 9475, 9297, 9297, 9297, 9480, 9297, 9297, 9297, 9297, 0, 9467, 9340,
  /* 10357 */ 9340, 9340, 9340, 9340, 128124, 492, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21504, 0, 0, 21504, 21504, 21504, 0, 0,
  /* 10381 */ 0, 0, 9340, 9340, 9340, 9340, 0, 0, 290, 101376, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 10409 */ 45056, 0, 0, 0, 45056, 45056, 0, 0, 290, 0, 0, 0, 0, 0, 52224, 0, 0, 307, 0, 101376, 0, 0, 0, 0, 0, 122,
  /* 10435 */ 122, 9340, 9297, 9362, 0, 9362, 9382, 9382, 171, 171, 9340, 9340, 9589, 9297, 9297, 9297, 9297, 9297,
  /* 10453 */ 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 9340, 645, 0, 0, 0, 0, 0, 0, 107520, 409, 0, 0, 412,
  /* 10475 */ 0, 0, 0, 0, 396, 0, 0, 0, 0, 0, 186, 192, 192, 192, 192, 192, 192, 192, 192, 9428, 3073, 0, 0, 0, 0, 421,
  /* 10501 */ 0, 0, 0, 0, 0, 421, 0, 0, 0, 9340, 9340, 9340, 9966, 9340, 9340, 9340, 9340, 9340, 755, 0, 0, 0, 9340,
  /* 10524 */ 9340, 9650, 9340, 9340, 9340, 9657, 9340, 9340, 107644, 9340, 9340, 9661, 9663, 9340, 9340, 9297, 9297,
  /* 10541 */ 9297, 9297, 9593, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 9788, 9340, 0, 0, 0, 0, 0,
  /* 10561 */ 9340, 9340, 9669, 9340, 9557, 455, 0, 0, 0, 103424, 0, 0, 0, 0, 0, 0, 0, 250, 250, 250, 250, 218, 218,
  /* 10584 */ 218, 218, 218, 218, 218, 218, 218, 0, 250, 250, 0, 0, 0, 0, 467, 0, 0, 0, 0, 0, 0, 8556, 9340, 9340, 9340,
  /* 10609 */ 9340, 0, 391, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 0, 9340, 9340, 9340, 136316, 9297, 9297, 9297, 9297,
  /* 10630 */ 9698, 9297, 9297, 9297, 9297, 136273, 9340, 9340, 9297, 9297, 9297, 9592, 9297, 9594, 9297, 9297, 9297,
  /* 10647 */ 9297, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 0, 575, 0, 0, 0, 0, 0, 0, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 10673 */ 0, 590, 0, 0, 0, 0, 86, 86, 86, 0, 0, 86, 0, 86, 86, 86, 0, 0, 0, 0, 0, 0, 623, 624, 0, 0, 9340, 9844,
  /* 10701 */ 9340, 9846, 9340, 9340, 0, 0, 9340, 9995, 9340, 9340, 9297, 9297, 10000, 9297, 9297, 9340, 9340, 9340,
  /* 10719 */ 9340, 0, 821, 9340, 10038, 9340, 10040, 9297, 9297, 10042, 9297, 10044, 0, 618, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 10741 */ 9340, 9340, 9340, 9340, 9340, 9340, 112764, 9340, 9340, 9340, 9340, 0, 0, 0, 9340, 58492, 9340, 68732,
  /* 10759 */ 9340, 9340, 9297, 58449, 9297, 68689, 9297, 9297, 9297, 9340, 10019, 9340, 9340, 0, 0, 9340, 9340, 9340,
  /* 10777 */ 9340, 9297, 9297, 9297, 9297, 9297, 10003, 9340, 9340, 0, 0, 9340, 9340, 9340, 9975, 9340, 9297, 9297,
  /* 10795 */ 9297, 9297, 9980, 9297, 9340, 9340, 9340, 9340, 9340, 9340, 88188, 9340, 9340, 9340, 9340, 9340, 9340,
  /* 10812 */ 9340, 9340, 9340, 9557, 0, 0, 0, 0, 0, 344, 9340, 9340, 64512, 0, 0, 0, 0, 0, 0, 93184, 0, 0, 64636, 9340,
  /* 10836 */ 93308, 9340, 9340, 9340, 9340, 9473, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 9340, 9340, 9340,
  /* 10862 */ 9340, 125952, 9340, 9340, 126076, 9297, 9297, 9297, 126033, 9340, 9340, 9340, 9340, 0, 392, 393, 0, 0, 0,
  /* 10881 */ 0, 0, 9340, 9340, 9340, 403, 10057, 10058, 10059, 10060, 9340, 9340, 9340, 9340, 9340, 9340, 9297, 9297,
  /* 10899 */ 9340, 9340, 9340, 9340, 10065, 9340, 10066, 9297, 9340, 9340, 9340, 9340, 175, 181, 175, 175, 175, 175,
  /* 10917 */ 195, 195, 195, 195, 195, 195, 195, 195, 9432, 3073, 0, 0, 0, 9340, 0, 0, 583, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 10943 */ 0, 34967, 0, 0, 0, 34967, 34967, 0, 0, 0, 620, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 9340, 9297,
  /* 10967 */ 9297, 9297, 9297, 9297, 9297, 9297, 9905, 0, 0, 0, 0, 649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8556, 9340,
  /* 10992 */ 9340, 9690, 9340, 0, 0, 9896, 9340, 9340, 9340, 9340, 9340, 9900, 9297, 9297, 9297, 9297, 9297, 9297,
  /* 11010 */ 9340, 10034, 9340, 9340, 0, 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 10005, 0,
  /* 11029 */ 0, 719, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297,
  /* 11049 */ 9340, 9702, 10070, 10071, 9340, 9340, 9340, 9340, 9297, 9340, 9340, 9297, 9340, 9297, 9340, 9297, 9340,
  /* 11066 */ 9297, 10072, 9340, 9340, 9340, 9297, 9340, 9340, 9297, 9340, 9297, 9340, 9297, 9340, 9297, 9340, 78972,
  /* 11083 */ 118908, 9340, 9297, 9340, 9340, 9297, 9340, 9297, 9340, 9297, 9340, 9297, 9340, 9340, 9340, 9340, 9297,
  /* 11100 */ 62588, 9340, 9297, 9340, 9297, 9340, 9297, 9340, 9297, 9340, 9340, 9340, 9340, 9297, 9340, 9340, 9297,
  /* 11117 */ 9340, 9297, 10079, 10080, 9340, 9297, 9340, 9340, 9340, 9340, 9297, 9340, 9340, 9297, 10077, 10078, 9340,
  /* 11134 */ 9297, 9340, 9297, 9340, 9340, 9340, 9340, 9297, 9340, 10075, 10076, 9340, 9297, 9340, 9297, 9340, 9297,
  /* 11151 */ 9340, 9340, 9340, 10073, 10074, 9340, 9340, 9297, 9340, 9297, 9340, 9297, 9340, 9297, 9340, 9340, 9340,
  /* 11168 */ 9340, 9297, 9340, 9340, 9297, 9340, 9297, 9340, 9297, 9340, 9297, 9340, 9340, 9340, 9340, 9297, 9340,
  /* 11185 */ 9340, 9297, 9340, 9297, 9340, 9297, 119932, 119889, 0, 0, 0, 0, 9501, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0,
  /* 11207 */ 0, 0, 773, 0, 9340, 9340, 9340, 9991, 0, 66560, 0, 0, 0, 422, 0, 0, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340,
  /* 11232 */ 72828, 9340, 9340, 9340, 9340, 9340, 9883, 66684, 9340, 9340, 9340, 9340, 9340, 9340, 9658, 9340, 9340,
  /* 11249 */ 9340, 9340, 9340, 9340, 9340, 9340, 9340, 141436, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 88064, 0, 0, 0,
  /* 11270 */ 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9540, 9340, 9340, 9340, 9340, 718, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340,
  /* 11294 */ 9340, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 29696, 9340, 9340, 0, 105, 105, 105, 0, 0, 0,
  /* 11314 */ 9340, 9297, 9340, 163, 9340, 9340, 9340, 176, 176, 182, 183, 176, 176, 196, 196, 196, 196, 196, 196, 196,
  /* 11334 */ 196, 9433, 3073, 0, 0, 0, 408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 106, 107, 0, 0, 0, 0, 146432, 0,
  /* 11362 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 9340, 9340, 9340, 9340, 146556, 9340, 0, 0, 0, 0, 0, 0, 0,
  /* 11390 */ 0, 0, 0, 107, 107, 107, 0, 0, 0, 0, 10354, 0, 0, 243, 0, 0, 0, 0, 0, 0, 9340, 9340, 9340, 9340, 9340, 0,
  /* 11416 */ 0, 0, 277, 0, 280, 0, 0, 0, 0, 0, 0, 0, 9340, 9297, 9340, 0, 9340, 9340, 9340, 0, 0, 0, 243, 0, 299, 0, 0,
  /* 11443 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 416, 0, 0, 0, 9340, 9588, 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9297,
  /* 11467 */ 9297, 9598, 9340, 9340, 9340, 9340, 0, 695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10354, 9297, 0, 0, 118, 9297,
  /* 11492 */ 9781, 9297, 9297, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 0, 0, 0, 0, 0, 0, 0, 0, 498, 0, 0, 0, 0,
  /* 11515 */ 74876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 0, 0, 0, 0, 75776, 9340, 9340, 9340, 9340, 9340, 9340,
  /* 11540 */ 9297, 9297, 9297, 9297, 9297, 9297, 9297, 9340, 9340, 9858, 9340, 9340, 9340, 0, 0, 0, 0, 151552, 0, 0, 0,
  /* 11561 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 88, 0, 0, 0, 0, 151552, 151552, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 11590 */ 0, 37888, 0, 0, 0, 37888, 37888, 14336, 14336, 14336, 14336, 14336, 14336, 14336, 14336, 14336, 14336,
  /* 11607 */ 14336, 14336, 14336, 14336, 14336, 0, 0, 0, 0, 87, 87, 87, 0, 0, 87, 0, 87, 87, 87, 0, 0, 0, 0, 0, 0, 651,
  /* 11633 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 471, 8556, 9340, 9340, 9340, 9340
];

XPathV20withFullText.EXPECTED =
[
  /*    0 */ 540, 544, 546, 547, 551, 557, 553, 561, 564, 567, 571, 580, 580, 1095, 1308, 575, 629, 585, 593, 580, 607,
  /*   21 */ 580, 580, 580, 580, 1197, 1197, 676, 580, 615, 1309, 576, 630, 637, 578, 603, 580, 580, 580, 602, 1197,
  /*   41 */ 1197, 609, 580, 580, 627, 629, 636, 577, 580, 579, 580, 580, 1194, 1197, 1197, 577, 580, 1193, 1106, 637,
  /*   61 */ 1200, 1149, 580, 580, 1196, 1197, 577, 580, 589, 631, 1199, 580, 580, 602, 1197, 577, 580, 589, 631, 578,
  /*   81 */ 580, 1104, 1198, 1193, 1107, 1199, 580, 1195, 578, 1105, 632, 579, 1104, 588, 632, 642, 650, 638, 629, 657,
  /*  101 */ 1107, 648, 637, 646, 646, 654, 673, 580, 1358, 580, 581, 682, 1331, 938, 689, 692, 696, 581, 1360, 580,
  /*  121 */ 580, 580, 1113, 1113, 799, 669, 700, 580, 705, 580, 710, 744, 716, 580, 937, 580, 580, 580, 1114, 1114,
  /*  141 */ 1152, 1373, 914, 727, 865, 733, 745, 711, 580, 1121, 580, 580, 1113, 1113, 1151, 738, 580, 742, 580, 580,
  /*  161 */ 749, 580, 580, 936, 580, 897, 753, 1152, 763, 836, 580, 580, 779, 580, 936, 580, 1114, 1115, 762, 599, 580,
  /*  182 */ 1385, 1192, 936, 580, 1114, 1115, 767, 601, 1386, 580, 897, 785, 774, 838, 778, 580, 783, 666, 791, 1315,
  /*  202 */ 580, 666, 601, 580, 1162, 580, 797, 580, 1163, 1161, 1161, 1161, 803, 580, 580, 580, 807, 580, 965, 723,
  /*  222 */ 813, 817, 821, 825, 580, 966, 580, 580, 872, 829, 1209, 798, 834, 845, 1098, 857, 863, 869, 596, 877, 580,
  /*  243 */ 1088, 1192, 580, 873, 830, 891, 1297, 706, 663, 881, 623, 887, 895, 901, 580, 809, 1192, 757, 905, 890,
  /*  263 */ 913, 964, 921, 611, 1000, 927, 942, 947, 889, 580, 808, 758, 951, 961, 981, 1128, 622, 994, 1028, 1361,
  /*  283 */ 580, 756, 970, 907, 980, 835, 1064, 1046, 985, 580, 756, 970, 907, 964, 991, 1047, 987, 580, 1340, 998,
  /*  303 */ 853, 1004, 1011, 953, 1342, 580, 1008, 1338, 1024, 1235, 1032, 840, 1340, 1037, 1033, 841, 909, 839, 839,
  /*  322 */ 1026, 580, 580, 580, 618, 580, 922, 1043, 957, 1051, 1055, 1058, 580, 580, 620, 943, 1207, 580, 1142, 1062,
  /*  342 */ 1068, 883, 1075, 973, 1079, 1083, 1087, 701, 1092, 580, 1102, 923, 1208, 1020, 896, 1142, 1111, 1119, 1039,
  /*  361 */ 1125, 1303, 1192, 581, 1132, 580, 1102, 1136, 580, 1142, 1141, 1146, 1156, 1362, 1379, 1181, 580, 580,
  /*  379 */ 1168, 580, 837, 1137, 916, 931, 1214, 1013, 1178, 1190, 580, 720, 580, 1204, 929, 915, 1213, 1218, 1224,
  /*  398 */ 1183, 718, 722, 1204, 929, 915, 1228, 1220, 1184, 1232, 793, 917, 1071, 848, 1192, 851, 1239, 1240, 1244,
  /*  417 */ 976, 1171, 1240, 1248, 1264, 1174, 1252, 1261, 1265, 1257, 1173, 1255, 1255, 1272, 1269, 580, 580, 1362,
  /*  435 */ 1017, 1276, 580, 1280, 1284, 1288, 1292, 580, 580, 1015, 1019, 1185, 580, 934, 955, 580, 580, 1356, 1164,
  /*  454 */ 685, 580, 660, 580, 859, 1296, 1015, 1019, 1186, 580, 935, 934, 580, 1349, 734, 1301, 580, 1307, 580, 728,
  /*  474 */ 1313, 1015, 1019, 580, 934, 933, 580, 1320, 1319, 1325, 580, 1329, 580, 580, 1335, 770, 580, 580, 580, 580,
  /*  494 */ 1367, 1346, 729, 580, 580, 1335, 1353, 580, 580, 580, 1366, 1371, 580, 580, 1321, 1353, 580, 580, 580,
  /*  513 */ 1377, 580, 678, 1383, 580, 580, 1159, 580, 787, 580, 580, 712, 580, 580, 580, 580, 580, 580, 580, 580, 580,
  /*  534 */ 580, 580, 580, 580, 580, 580, 1390, 1667, 1403, 1407, 1410, 1416, 1404, 1404, 1404, 1404, 1413, 1411, 1415,
  /*  553 */ 1404, 1404, 1420, 1421, 1404, 1405, 1418, 1416, 1408, 1424, 1425, 1423, 1423, 1423, 1428, 1427, 1430, 1432,
  /*  571 */ 1438, 1455, 1736, 1435, 1478, 1482, 1471, 1471, 1471, 1394, 1394, 1394, 1394, 1395, 1464, 1464, 1484, 1471,
  /*  589 */ 1394, 1471, 1471, 1471, 1471, 1471, 1472, 1394, 1394, 1615, 1394, 1394, 1618, 1394, 1394, 1394, 1471, 1443,
  /*  607 */ 1394, 1723, 1471, 1471, 1391, 1394, 1707, 1529, 1394, 1777, 1469, 1394, 1394, 1621, 1529, 1394, 1394, 1460,
  /*  625 */ 1394, 1394, 1446, 1461, 1471, 1471, 1464, 1464, 1464, 1465, 1471, 1464, 1464, 1464, 1471, 1471, 1394, 1443,
  /*  643 */ 1394, 1470, 1443, 1471, 1464, 1471, 1471, 1470, 1471, 1466, 1464, 1466, 1471, 1471, 1465, 1471, 1443, 1470,
  /*  661 */ 1762, 1739, 1394, 1394, 1633, 1394, 1394, 1697, 1547, 1394, 1394, 1515, 1466, 1466, 1466, 1466, 1458, 1394,
  /*  679 */ 1394, 1394, 1699, 1775, 1463, 1539, 1394, 1394, 1758, 1760, 1533, 1486, 1534, 1488, 1488, 1489, 1491, 1492,
  /*  697 */ 1494, 1496, 1498, 1513, 1394, 1394, 1394, 1401, 1541, 1394, 1394, 1394, 1434, 1517, 1393, 1394, 1394, 1394,
  /*  715 */ 1456, 1521, 1523, 1394, 1394, 1394, 1705, 1709, 1703, 1394, 1394, 1559, 1542, 1394, 1394, 1394, 1461, 1474,
  /*  733 */ 1392, 1394, 1394, 1394, 1468, 1547, 1394, 1394, 1724, 1394, 1528, 1394, 1394, 1394, 1710, 1526, 1394, 1554,
  /*  751 */ 1519, 1724, 1503, 1394, 1548, 1503, 1394, 1394, 1399, 1474, 1507, 1547, 1394, 1723, 1440, 1394, 1547, 1394,
  /*  769 */ 1724, 1394, 1397, 1785, 1730, 1546, 1394, 1723, 1440, 1394, 1679, 1724, 1394, 1394, 1394, 1549, 1394, 1548,
  /*  787 */ 1394, 1394, 1394, 1737, 1394, 1537, 1529, 1394, 1588, 1694, 1697, 1565, 1394, 1394, 1394, 1510, 1394, 1565,
  /*  805 */ 1394, 1585, 1557, 1703, 1394, 1394, 1394, 1524, 1561, 1394, 1506, 1611, 1570, 1572, 1574, 1579, 1576, 1579,
  /*  823 */ 1578, 1581, 1582, 1582, 1582, 1584, 1506, 1394, 1394, 1590, 1394, 1596, 1394, 1394, 1394, 1529, 1394, 1394,
  /*  841 */ 1394, 1469, 1394, 1394, 1394, 1598, 1600, 1394, 1398, 1553, 1543, 1703, 1618, 1394, 1499, 1694, 1394, 1604,
  /*  859 */ 1394, 1394, 1394, 1765, 1476, 1606, 1394, 1394, 1394, 1778, 1394, 1608, 1613, 1394, 1400, 1587, 1394, 1506,
  /*  877 */ 1394, 1625, 1627, 1629, 1512, 1529, 1394, 1394, 1399, 1727, 1395, 1609, 1694, 1394, 1394, 1394, 1590, 1592,
  /*  895 */ 1394, 1722, 1394, 1394, 1394, 1548, 1635, 1459, 1609, 1722, 1473, 1507, 1394, 1590, 1445, 1394, 1394, 1469,
  /*  913 */ 1592, 1394, 1394, 1394, 1550, 1722, 1394, 1721, 1434, 1394, 1394, 1394, 1562, 1588, 1394, 1691, 1694, 1394,
  /*  931 */ 1394, 1721, 1394, 1394, 1444, 1394, 1394, 1394, 1693, 1394, 1532, 1530, 1394, 1394, 1394, 1563, 1434, 1766,
  /*  949 */ 1500, 1692, 1397, 1400, 1394, 1397, 1394, 1394, 1445, 1394, 1394, 1566, 1591, 1394, 1394, 1695, 1394, 1394,
  /*  967 */ 1394, 1557, 1703, 1474, 1394, 1590, 1394, 1436, 1662, 1394, 1439, 1394, 1543, 1695, 1394, 1394, 1457, 1394,
  /*  985 */ 1457, 1782, 1693, 1394, 1394, 1524, 1394, 1529, 1394, 1674, 1394, 1394, 1531, 1394, 1696, 1394, 1394, 1454,
  /* 1003 */ 1394, 1530, 1394, 1394, 1783, 1674, 1394, 1499, 1694, 1394, 1503, 1394, 1394, 1397, 1433, 1726, 1730, 1394,
  /* 1021 */ 1394, 1394, 1654, 1638, 1394, 1394, 1776, 1394, 1394, 1459, 1690, 1397, 1394, 1397, 1445, 1394, 1394, 1776,
  /* 1039 */ 1394, 1397, 1467, 1394, 1619, 1640, 1394, 1694, 1394, 1531, 1394, 1499, 1567, 1642, 1568, 1645, 1644, 1646,
  /* 1057 */ 1648, 1650, 1650, 1650, 1652, 1461, 1721, 1394, 1394, 1460, 1499, 1394, 1658, 1617, 1394, 1446, 1453, 1524,
  /* 1075 */ 1660, 1394, 1394, 1616, 1664, 1394, 1394, 1518, 1506, 1394, 1401, 1666, 1669, 1394, 1394, 1394, 1631, 1671,
  /* 1093 */ 1728, 1555, 1394, 1450, 1452, 1394, 1394, 1602, 1680, 1444, 1529, 1394, 1394, 1471, 1471, 1466, 1464, 1464,
  /* 1111 */ 1673, 1676, 1394, 1394, 1502, 1394, 1394, 1700, 1678, 1511, 1394, 1394, 1530, 1694, 1474, 1394, 1518, 1394,
  /* 1129 */ 1463, 1543, 1529, 1442, 1683, 1660, 1685, 1394, 1563, 1537, 1694, 1394, 1394, 1654, 1722, 1394, 1394, 1394,
  /* 1147 */ 1673, 1713, 1394, 1470, 1394, 1394, 1394, 1701, 1547, 1394, 1678, 1702, 1394, 1479, 1394, 1394, 1564, 1394,
  /* 1165 */ 1394, 1394, 1480, 1395, 1683, 1687, 1703, 1681, 1550, 1693, 1394, 1548, 1718, 1456, 1474, 1394, 1610, 1394,
  /* 1183 */ 1395, 1439, 1394, 1394, 1394, 1636, 1394, 1394, 1689, 1440, 1394, 1394, 1394, 1470, 1471, 1471, 1471, 1471,
  /* 1201 */ 1443, 1394, 1394, 1618, 1394, 1697, 1537, 1681, 1394, 1394, 1394, 1594, 1394, 1673, 1453, 1394, 1678, 1678,
  /* 1219 */ 1503, 1394, 1397, 1552, 1394, 1456, 1474, 1552, 1507, 1394, 1712, 1394, 1715, 1394, 1706, 1703, 1394, 1499,
  /* 1237 */ 1499, 1524, 1623, 1394, 1656, 1694, 1394, 1712, 1524, 1397, 1552, 1549, 1553, 1767, 1767, 1550, 1693, 1394,
  /* 1255 */ 1656, 1656, 1394, 1548, 1540, 1693, 1694, 1394, 1717, 1694, 1656, 1694, 1550, 1693, 1655, 1655, 1655, 1655,
  /* 1273 */ 1394, 1720, 1551, 1548, 1394, 1441, 1398, 1732, 1733, 1735, 1741, 1620, 1743, 1745, 1747, 1748, 1750, 1747,
  /* 1291 */ 1752, 1754, 1753, 1754, 1756, 1763, 1394, 1394, 1394, 1695, 1769, 1454, 1507, 1394, 1395, 1666, 1461, 1474,
  /* 1309 */ 1394, 1394, 1448, 1447, 1781, 1771, 1394, 1394, 1537, 1394, 1395, 1394, 1394, 1394, 1698, 1394, 1479, 1778,
  /* 1327 */ 1394, 1773, 1462, 1475, 1394, 1394, 1538, 1508, 1780, 1622, 1500, 1394, 1503, 1398, 1394, 1638, 1394, 1394,
  /* 1345 */ 1695, 1479, 1469, 1454, 1394, 1504, 1394, 1396, 1394, 1785, 1738, 1394, 1505, 1394, 1395, 1774, 1693, 1394,
  /* 1363 */ 1394, 1394, 1397, 1394, 1697, 1699, 1394, 1394, 1479, 1469, 1394, 1394, 1544, 1394, 1699, 1394, 1456, 1394,
  /* 1381 */ 1475, 1394, 1399, 1737, 1394, 1394, 1554, 1536, 1440, 4, 256, 0, -1073741824, 0, 0, 1, 0, 2, 0, 4, 0, 5,
  /* 1403 */ 33792, 526336, 526336, 1575488, 526400, 526592, 403376632, 591872, 657408, 788480, -2146955264, 657408,
  /* 1415 */ 35129344, 1574912, 526336, 3672320, 657408, 919672, 919672, 526720, 35153920, 35153920, 2089486840,
  /* 1426 */ 2090535416, 123234304, 112748544, 112748544, 1723361280, 1723492352, 513501688, 4, 8, 64, 0, 6, 256, 32768,
  /* 1440 */ 0x80000000, 0, 8, 384, 0, 16, 0, 32, 0, 48, 4096, 528384, -2147479552, 786432, 0, 1024, 2048, 0, 64, 64,
  /* 1460 */ 1024, 0, 128, 0, 256, 256, 384, 256, 2048, 4096, 0, 384, 384, 16384, 0, 512, 0, 712, 56, 0, 2048, 118784,
  /* 1482 */ 128, 384, 256, 268435504, -1073444610, 428368384, -535525122, -535525122, -535455490, -1073444610,
  /* 1492 */ -1073444610, -1069250306, -1073444354, -1069250050, -1067152130, -1067152130, -638784770, 0, 65536, 262144,
  /* 1502 */ 524288, 16777216, 0, 81920, 0, 131072, 0, 262144, 548864, 25165824, 0, 294912, -1073741824, 12, 192,
  /* 1517 */ 364544, 0, 6291456, 6291456, 843776, 31457280, -671088640, 0, 16777216, 57344, 6291456, 1048576, 536870912,
  /* 1530 */ 0, 33554432, 0, 17301504, 428368384, 428368384, 4194304, 1073741824, 0, 67371008, 67108864, 1048576,
  /* 1542 */ -536870912, 0, 32768, -1073741824, 24576, 402653184, 0, 524288, 0, 1048576, 0, 2097152, 0, 4194304,
  /* 1556 */ -1753219072, 32, 8388608, 4, 16896, -2147483616, 0, 134217728, 16384, 268435456, 0, 101712000, 370999456,
  /* 1569 */ 370999456, 268435478, 6150, 1209532616, 6150, 4208902, 4208902, 1746715336, 1746699464, 1746715336,
  /* 1579 */ 1746698440, 1746698440, 1279100105, 1312654537, 1312654537, 1312660687, 0, 268435456, 512, 16384,
  /* 1589 */ 1073741824, 2, 4, 16, 268435456, 2, 20, 2, 6144, 200, 1572864, 134217728, 1073741824, 260, 14336, 294912,
  /* 1605 */ 1610612736, 311296, 1224, 1, 360448, 2097152, 131072, 6, 203423744, 1073741824, 236978176, 0, 369098752, 0,
  /* 1619 */ 536870912, 16, 16, 1024, 16384, 67108864, 3, 1228, 366592, 1572864, 236978176, 1073741824, 32, 16777216,
  /* 1633 */ 256, 14336, 1, 12, 0, 2, 16, 1073758208, 0, 29372484, 370999456, 29374790, 29374790, 29375302, 29375302,
  /* 1648 */ 31471942, 29506374, -2118078131, -2118078131, -1747078675, 0, 128, 1048576, 1048576, 33554432, 160,
  /* 1659 */ 1900544, 4194304, 25165824, 320, 14336, 14848, 0, 8, 32768, 1280, -2122317824, 0, 8, 480, 32, 65536,
  /* 1675 */ 67108864, 1835008, 268435456, 8192, 4194304, 4194304, 0, 67108864, 8192, 98304, -1879048192, 0, 4194304,
  /* 1688 */ 8388608, 1, 32768, 65536, 2097152, 33554432, 67108864, 0, 6144, 0, 16384, 65536, 0, 24576, 8388608,
  /* 1703 */ 16777216, 0x80000000, 1, 8192, 32768, 262144, 32768, 4194304, 6291456, 32, 786432, 268435456, 8192,
  /* 1716 */ 16777216, 524288, 2097152, 67108864, 524288, 1048576, 100663296, 0, 1073741824, 0x80000000, 32, 64, 12288,
  /* 1729 */ 1933312, 8192, 262144, 2, 8268, 8268, 524288, 524288, 64, 8192, 0, 896, 2621440, 16, 2179072, 16, 17, 17,
  /* 1747 */ 2217984, 2217984, 2219008, 2349056, 2480128, 3491200, 3491200, 3491712, 3491712, 3491728, 0, 3072, 249856,
  /* 1760 */ 380928, 0, 1024, 344064, 0, 912, 1024, 32768, 0, 114688, 0, 81920, 262144, 1024, 131072, 262144, 0, 4096,
  /* 1778 */ 4096, 98304, 128, 512, 1024, 65536, 33554432, 4, 64
];

XPathV20withFullText.TOKEN =
[
  "%ERROR",
  "%OTHER",
  "PragmaContents",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "Wildcard",
  "QName",
  "NCName",
  "S",
  "S",
  "CommentContents",
  "EOF",
  "'!='",
  "'#)'",
  "'$'",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "'+'",
  "','",
  "'-'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "':)'",
  "'::'",
  "'<'",
  "'<<'",
  "'<='",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'@'",
  "'['",
  "']'",
  "'all'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'as'",
  "'at'",
  "'attribute'",
  "'case'",
  "'cast'",
  "'castable'",
  "'child'",
  "'comment'",
  "'content'",
  "'default'",
  "'descendant'",
  "'descendant-or-self'",
  "'diacritics'",
  "'different'",
  "'distance'",
  "'div'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty-sequence'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'from'",
  "'ftand'",
  "'ftcontains'",
  "'ftnot'",
  "'ftor'",
  "'ge'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'in'",
  "'insensitive'",
  "'instance'",
  "'intersect'",
  "'is'",
  "'item'",
  "'language'",
  "'le'",
  "'least'",
  "'levels'",
  "'lowercase'",
  "'lt'",
  "'mod'",
  "'most'",
  "'namespace'",
  "'ne'",
  "'node'",
  "'not'",
  "'occurs'",
  "'of'",
  "'option'",
  "'or'",
  "'ordered'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'phrase'",
  "'preceding'",
  "'preceding-sibling'",
  "'processing-instruction'",
  "'relationship'",
  "'return'",
  "'same'",
  "'satisfies'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'some'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'union'",
  "'uppercase'",
  "'weight'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'{'",
  "'|'",
  "'}'"
];

// End
