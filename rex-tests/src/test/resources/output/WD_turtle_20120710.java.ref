// This file was generated on Sun Jun 6, 2021 17:04 (UTC+02) by REx v5.53 which is Copyright (c) 1979-2021 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q WD-turtle-20120710.ebnf -performance -tree -faster -java

import java.util.Arrays;

public class WD_turtle_20120710
{
  public static class ParseException extends RuntimeException
  {
    private static final long serialVersionUID = 1L;
    private int begin, end, offending, expected, state;

    public ParseException(int b, int e, int s, int o, int x)
    {
      begin = b;
      end = e;
      state = s;
      offending = o;
      expected = x;
    }

    @Override
    public String getMessage()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    }

    public void serialize(EventHandler eventHandler)
    {
    }

    public int getBegin() {return begin;}
    public int getEnd() {return end;}
    public int getState() {return state;}
    public int getOffending() {return offending;}
    public int getExpected() {return expected;}
    public boolean isAmbiguousInput() {return false;}
  }

  public interface EventHandler
  {
    public void reset(CharSequence string);
    public void startNonterminal(String name, int begin);
    public void endNonterminal(String name, int end);
    public void terminal(String name, int begin, int end);
    public void whitespace(int begin, int end);
  }

  public static class TopDownTreeBuilder implements EventHandler
  {
    private CharSequence input = null;
    private Nonterminal[] stack = new Nonterminal[64];
    private int top = -1;

    @Override
    public void reset(CharSequence input)
    {
      this.input = input;
      top = -1;
    }

    @Override
    public void startNonterminal(String name, int begin)
    {
      Nonterminal nonterminal = new Nonterminal(name, begin, begin, new Symbol[0]);
      if (top >= 0) addChild(nonterminal);
      if (++top >= stack.length) stack = Arrays.copyOf(stack, stack.length << 1);
      stack[top] = nonterminal;
    }

    @Override
    public void endNonterminal(String name, int end)
    {
      stack[top].end = end;
      if (top > 0) --top;
    }

    @Override
    public void terminal(String name, int begin, int end)
    {
      addChild(new Terminal(name, begin, end));
    }

    @Override
    public void whitespace(int begin, int end)
    {
    }

    private void addChild(Symbol s)
    {
      Nonterminal current = stack[top];
      current.children = Arrays.copyOf(current.children, current.children.length + 1);
      current.children[current.children.length - 1] = s;
    }

    public void serialize(EventHandler e)
    {
      e.reset(input);
      stack[0].send(e);
    }
  }

  public static abstract class Symbol
  {
    public String name;
    public int begin;
    public int end;

    protected Symbol(String name, int begin, int end)
    {
      this.name = name;
      this.begin = begin;
      this.end = end;
    }

    public abstract void send(EventHandler e);
  }

  public static class Terminal extends Symbol
  {
    public Terminal(String name, int begin, int end)
    {
      super(name, begin, end);
    }

    @Override
    public void send(EventHandler e)
    {
      e.terminal(name, begin, end);
    }
  }

  public static class Nonterminal extends Symbol
  {
    public Symbol[] children;

    public Nonterminal(String name, int begin, int end, Symbol[] children)
    {
      super(name, begin, end);
      this.children = children;
    }

    @Override
    public void send(EventHandler e)
    {
      e.startNonterminal(name, begin);
      int pos = begin;
      for (Symbol c : children)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
      if (pos < end) e.whitespace(pos, end);
      e.endNonterminal(name, end);
    }
  }

  public static class ContentCounter implements EventHandler
  {
    private int length = 0;
    public int getLength() {return length;}
    @Override
    public void reset(CharSequence string) {length = 0;}
    @Override
    public void startNonterminal(String name, int begin) {}
    @Override
    public void endNonterminal(String name, int end) {}
    @Override
    public void terminal(String name, int begin, int end) {length += end - begin;}
    @Override
    public void whitespace(int begin, int end) {length += end - begin;}
  }

  private static boolean quiet = false;
  private static long parsed = 0;
  private static int errorCount = 0;
  private static java.util.Collection<ParseJob> parsers = new java.util.ArrayList<>();

  private static class ParseJob
  {
    public String name;
    public String input;
    public WD_turtle_20120710 parser;
    public ContentCounter contentCounter;

    public ParseJob(String s, String i)
    {
      name = s;
      input = i;
      contentCounter = new ContentCounter();
      parser = new WD_turtle_20120710(input, contentCounter);
    }
  }

  public static void main(String[] args) throws Exception
  {
    if (args.length == 0)
    {
      System.out.println("Usage: java WD_turtle_20120710 [-q] [-r N] [-t N] ENDING...");
      System.out.println();
      System.out.println("  parse all files that have names ending with ENDING, in current dir and below,");
      System.out.println("  and display performance summary.");
      System.out.println();
      System.out.println("  -q     do not show file names");
      System.out.println("  -r N   repeat N times");
      System.out.println("  -t N   repeat until N seconds have elapsed");
    }
    else
    {
      int repeat = 1;
      int timeout = 0;
      int i;
      for (i = 0; i < args.length && args[i].startsWith("-"); ++i)
      {
        switch (args[i].length() == 2 ? args[i].charAt(1) : ' ')
        {
        case 'q':
          quiet = true;
          break;
        case 'r':
          repeat = Integer.parseInt(args[++i]);
          timeout = 0;
          break;
        case 't':
          repeat = 0;
          timeout = 1000 * Integer.parseInt(args[++i]);
          break;
        default:
          throw new RuntimeException("invalid option: " + args[i]);
        }
      }

      long start = System.currentTimeMillis();

      for (; i < args.length; ++i)
      {
        findFiles(new java.io.File("."), args[i]);
      }

      if (! parsers.isEmpty())
      {
        long msec = System.currentTimeMillis() - start;

        if (! quiet) System.out.println();
        System.out.println("loaded " + parsers.size() + " file" +
                           (parsers.size() == 1 ? "" : "s") + " in " +
                           msec + " msec");
        if (! quiet) System.out.println();
        System.out.flush();

        start = System.currentTimeMillis();
        for (i = 0; ; ++i)
        {
          if (repeat != 0 && i >= repeat) break;
          if (timeout != 0 && System.currentTimeMillis() - start >= timeout) break;

          for (ParseJob job : parsers)
          {
            if (job.parser != null)
            {
              try
              {
                if (! quiet) System.out.print("parsing " + job.name);
                job.parser.reset(0, 0, 0);
                job.parser.parse_turtleDoc();
                if (! quiet) System.out.println();
                if (job.contentCounter.getLength() != job.input.length())
                {
                  throw new RuntimeException("content counter saw " + job.contentCounter.getLength() + ", but input length is " + job.input.length());
                }
                parsed += job.input.length();
              }
              catch (ParseException pe)
              {
                ++errorCount;
                if (quiet) System.out.print("parsing " + job.name);
                System.out.println(": error: " + job.parser.getErrorMessage(pe));
                job.parser = null;
              }
            }
          }
        }
        msec = System.currentTimeMillis() - start;
        String mbPerSec = msec == 0
                        ? null
                        : new java.text.DecimalFormat("0.##").format(Double.valueOf(parsed / 1024e0 / 1024e0 * 1000e0 / msec));

        if (! quiet) System.out.println();
        System.out.print("parsed " + parsed + " byte" + (parsed == 1 ? "" : "s") +
                         " in " + msec + " msec");
        if (mbPerSec != null)
        {
          System.out.print(" (" + mbPerSec + " MB/sec)");
        }
        System.out.println();
        System.out.println(errorCount + " error" + (errorCount == 1 ? "" : "s"));
      }
    }
  }

  private static void collectInput(String name, String content) throws Exception
  {
    if (! quiet) System.out.println("loading " + name);
    parsers.add(new ParseJob(name, content));
  }

  private static void findFiles(java.io.File f, String filter) throws Exception
  {
    if (f.isDirectory())
    {
      java.io.File files[] = f.listFiles();
      if (files != null)
      {
        for (java.io.File file : files)
        {
          findFiles(file, filter);
        }
      }
    }
    else if (f.getName().toLowerCase().endsWith(filter.toLowerCase()))
    {
      collectInput(f.getPath(), read(f.getPath()));
    }
  }

  private static String read(String input) throws Exception
  {
    if (input.startsWith("{") && input.endsWith("}"))
    {
      return input.substring(1, input.length() - 1);
    }
    else
    {
      byte buffer[] = new byte[(int) new java.io.File(input).length()];
      java.io.FileInputStream stream = new java.io.FileInputStream(input);
      stream.read(buffer);
      stream.close();
      String content = new String(buffer, System.getProperty("file.encoding"));
      return content.length() > 0 && content.charAt(0) == '\uFEFF'
           ? content.substring(1)
           : content;
    }
  }

  public WD_turtle_20120710(CharSequence string, EventHandler t)
  {
    initialize(string, t);
  }

  public void initialize(CharSequence source, EventHandler parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length();
    reset(0, 0, 0);
  }

  public CharSequence getInput()
  {
    return input;
  }

  public int getTokenOffset()
  {
    return b0;
  }

  public int getTokenEnd()
  {
    return e0;
  }

  public final void reset(int l, int b, int e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    end = e;
    eventHandler.reset(input);
  }

  public void reset()
  {
    reset(0, 0, 0);
  }

  public static String getOffendingToken(ParseException e)
  {
    return e.getOffending() < 0 ? null : TOKEN[e.getOffending()];
  }

  public static String[] getExpectedTokenSet(ParseException e)
  {
    String[] expected;
    if (e.getExpected() >= 0)
    {
      expected = new String[]{TOKEN[e.getExpected()]};
    }
    else
    {
      expected = getTokenSet(- e.getState());
    }
    return expected;
  }

  public String getErrorMessage(ParseException e)
  {
    String message = e.getMessage();
    String[] tokenSet = getExpectedTokenSet(e);
    String found = getOffendingToken(e);
    int size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : java.util.Arrays.toString(tokenSet))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    String prefix = input.subSequence(0, e.getBegin()).toString();
    int line = prefix.replaceAll("[^\n]", "").length() + 1;
    int column = prefix.length() - prefix.lastIndexOf('\n');
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.subSequence(e.getBegin(), Math.min(input.length(), e.getBegin() + 64))
         + "...";
  }

  public void parse_turtleDoc()
  {
    eventHandler.startNonterminal("turtleDoc", e0);
    for (;;)
    {
      lookahead1W(8);               // WhiteSpace | PREFIX | BASE | IRIREF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL |
                                    // ANON | EOF | '(' | '@base' | '@prefix' | '['
      if (l1 == 17)                 // EOF
      {
        break;
      }
      whitespace();
      parse_statement();
    }
    consume(17);                    // EOF
    eventHandler.endNonterminal("turtleDoc", e0);
  }

  private void parse_statement()
  {
    eventHandler.startNonterminal("statement", e0);
    switch (l1)
    {
    case 2:                         // PREFIX
    case 3:                         // BASE
    case 23:                        // '@base'
    case 24:                        // '@prefix'
      parse_directive();
      break;
    default:
      parse_triples();
      consume(21);                  // '.'
    }
    eventHandler.endNonterminal("statement", e0);
  }

  private void parse_directive()
  {
    eventHandler.startNonterminal("directive", e0);
    switch (l1)
    {
    case 24:                        // '@prefix'
      parse_prefixID();
      break;
    case 23:                        // '@base'
      parse_base();
      break;
    case 2:                         // PREFIX
      parse_sparqlPrefix();
      break;
    default:
      parse_sparqlBase();
    }
    eventHandler.endNonterminal("directive", e0);
  }

  private void parse_prefixID()
  {
    eventHandler.startNonterminal("prefixID", e0);
    consume(24);                    // '@prefix'
    lookahead1W(1);                 // WhiteSpace | PNAME_NS
    consume(5);                     // PNAME_NS
    lookahead1W(0);                 // WhiteSpace | IRIREF
    consume(4);                     // IRIREF
    lookahead1W(2);                 // WhiteSpace | '.'
    consume(21);                    // '.'
    eventHandler.endNonterminal("prefixID", e0);
  }

  private void parse_base()
  {
    eventHandler.startNonterminal("base", e0);
    consume(23);                    // '@base'
    lookahead1W(0);                 // WhiteSpace | IRIREF
    consume(4);                     // IRIREF
    lookahead1W(2);                 // WhiteSpace | '.'
    consume(21);                    // '.'
    eventHandler.endNonterminal("base", e0);
  }

  private void parse_sparqlPrefix()
  {
    eventHandler.startNonterminal("sparqlPrefix", e0);
    consume(2);                     // PREFIX
    lookahead1W(1);                 // WhiteSpace | PNAME_NS
    consume(5);                     // PNAME_NS
    lookahead1W(0);                 // WhiteSpace | IRIREF
    consume(4);                     // IRIREF
    eventHandler.endNonterminal("sparqlPrefix", e0);
  }

  private void parse_sparqlBase()
  {
    eventHandler.startNonterminal("sparqlBase", e0);
    consume(3);                     // BASE
    lookahead1W(0);                 // WhiteSpace | IRIREF
    consume(4);                     // IRIREF
    eventHandler.endNonterminal("sparqlBase", e0);
  }

  private void parse_triples()
  {
    eventHandler.startNonterminal("triples", e0);
    switch (l1)
    {
    case 25:                        // '['
      parse_blankNodePropertyList();
      lookahead1W(6);               // WhiteSpace | IRIREF | PNAME_NS | PNAME_LN | '.' | 'a'
      if (l1 != 21)                 // '.'
      {
        whitespace();
        parse_predicateObjectList();
      }
      break;
    default:
      parse_subject();
      lookahead1W(4);               // WhiteSpace | IRIREF | PNAME_NS | PNAME_LN | 'a'
      whitespace();
      parse_predicateObjectList();
    }
    eventHandler.endNonterminal("triples", e0);
  }

  private void parse_predicateObjectList()
  {
    eventHandler.startNonterminal("predicateObjectList", e0);
    parse_verb();
    lookahead1W(9);                 // WhiteSpace | IRIREF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | INTEGER |
                                    // DECIMAL | DOUBLE | STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE |
                                    // STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE | ANON | '(' | '[' |
                                    // 'false' | 'true'
    whitespace();
    parse_objectList();
    for (;;)
    {
      if (l1 != 22)                 // ';'
      {
        break;
      }
      consume(22);                  // ';'
      lookahead1W(7);               // WhiteSpace | IRIREF | PNAME_NS | PNAME_LN | '.' | ';' | ']' | 'a'
      if (l1 != 21                  // '.'
       && l1 != 22                  // ';'
       && l1 != 26)                 // ']'
      {
        whitespace();
        parse_verb();
        lookahead1W(9);             // WhiteSpace | IRIREF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | INTEGER |
                                    // DECIMAL | DOUBLE | STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE |
                                    // STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE | ANON | '(' | '[' |
                                    // 'false' | 'true'
        whitespace();
        parse_objectList();
      }
    }
    eventHandler.endNonterminal("predicateObjectList", e0);
  }

  private void parse_objectList()
  {
    eventHandler.startNonterminal("objectList", e0);
    parse_object();
    for (;;)
    {
      lookahead1W(5);               // WhiteSpace | ',' | '.' | ';' | ']'
      if (l1 != 20)                 // ','
      {
        break;
      }
      consume(20);                  // ','
      lookahead1W(9);               // WhiteSpace | IRIREF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | INTEGER |
                                    // DECIMAL | DOUBLE | STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE |
                                    // STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE | ANON | '(' | '[' |
                                    // 'false' | 'true'
      whitespace();
      parse_object();
    }
    eventHandler.endNonterminal("objectList", e0);
  }

  private void parse_verb()
  {
    eventHandler.startNonterminal("verb", e0);
    switch (l1)
    {
    case 28:                        // 'a'
      consume(28);                  // 'a'
      break;
    default:
      parse_predicate();
    }
    eventHandler.endNonterminal("verb", e0);
  }

  private void parse_subject()
  {
    eventHandler.startNonterminal("subject", e0);
    switch (l1)
    {
    case 4:                         // IRIREF
    case 5:                         // PNAME_NS
    case 6:                         // PNAME_LN
      parse_iri();
      break;
    default:
      parse_blank();
    }
    eventHandler.endNonterminal("subject", e0);
  }

  private void parse_predicate()
  {
    eventHandler.startNonterminal("predicate", e0);
    parse_iri();
    eventHandler.endNonterminal("predicate", e0);
  }

  private void parse_object()
  {
    eventHandler.startNonterminal("object", e0);
    switch (l1)
    {
    case 4:                         // IRIREF
    case 5:                         // PNAME_NS
    case 6:                         // PNAME_LN
      parse_iri();
      break;
    case 7:                         // BLANK_NODE_LABEL
    case 16:                        // ANON
    case 18:                        // '('
      parse_blank();
      break;
    case 25:                        // '['
      parse_blankNodePropertyList();
      break;
    default:
      parse_literal();
    }
    eventHandler.endNonterminal("object", e0);
  }

  private void parse_literal()
  {
    eventHandler.startNonterminal("literal", e0);
    switch (l1)
    {
    case 9:                         // INTEGER
    case 10:                        // DECIMAL
    case 11:                        // DOUBLE
      parse_NumericLiteral();
      break;
    case 29:                        // 'false'
    case 30:                        // 'true'
      parse_BooleanLiteral();
      break;
    default:
      parse_RDFLiteral();
    }
    eventHandler.endNonterminal("literal", e0);
  }

  private void parse_blank()
  {
    eventHandler.startNonterminal("blank", e0);
    switch (l1)
    {
    case 18:                        // '('
      parse_collection();
      break;
    default:
      parse_BlankNode();
    }
    eventHandler.endNonterminal("blank", e0);
  }

  private void parse_blankNodePropertyList()
  {
    eventHandler.startNonterminal("blankNodePropertyList", e0);
    consume(25);                    // '['
    lookahead1W(4);                 // WhiteSpace | IRIREF | PNAME_NS | PNAME_LN | 'a'
    whitespace();
    parse_predicateObjectList();
    consume(26);                    // ']'
    eventHandler.endNonterminal("blankNodePropertyList", e0);
  }

  private void parse_collection()
  {
    eventHandler.startNonterminal("collection", e0);
    consume(18);                    // '('
    for (;;)
    {
      lookahead1W(10);              // WhiteSpace | IRIREF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | INTEGER |
                                    // DECIMAL | DOUBLE | STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE |
                                    // STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE | ANON | '(' | ')' |
                                    // '[' | 'false' | 'true'
      if (l1 == 19)                 // ')'
      {
        break;
      }
      whitespace();
      parse_object();
    }
    consume(19);                    // ')'
    eventHandler.endNonterminal("collection", e0);
  }

  private void parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 9:                         // INTEGER
      consume(9);                   // INTEGER
      break;
    case 10:                        // DECIMAL
      consume(10);                  // DECIMAL
      break;
    default:
      consume(11);                  // DOUBLE
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  private void parse_RDFLiteral()
  {
    eventHandler.startNonterminal("RDFLiteral", e0);
    parse_String();
    lookahead1W(11);                // WhiteSpace | IRIREF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | LANGTAG |
                                    // INTEGER | DECIMAL | DOUBLE | STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE |
                                    // STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE | ANON | '(' | ')' |
                                    // ',' | '.' | ';' | '[' | ']' | '^^' | 'false' | 'true'
    if (l1 == 8                     // LANGTAG
     || l1 == 27)                   // '^^'
    {
      switch (l1)
      {
      case 8:                       // LANGTAG
        consume(8);                 // LANGTAG
        break;
      default:
        consume(27);                // '^^'
        lookahead1W(3);             // WhiteSpace | IRIREF | PNAME_NS | PNAME_LN
        whitespace();
        parse_iri();
      }
    }
    eventHandler.endNonterminal("RDFLiteral", e0);
  }

  private void parse_BooleanLiteral()
  {
    eventHandler.startNonterminal("BooleanLiteral", e0);
    switch (l1)
    {
    case 30:                        // 'true'
      consume(30);                  // 'true'
      break;
    default:
      consume(29);                  // 'false'
    }
    eventHandler.endNonterminal("BooleanLiteral", e0);
  }

  private void parse_String()
  {
    eventHandler.startNonterminal("String", e0);
    switch (l1)
    {
    case 12:                        // STRING_LITERAL_QUOTE
      consume(12);                  // STRING_LITERAL_QUOTE
      break;
    case 13:                        // STRING_LITERAL_SINGLE_QUOTE
      consume(13);                  // STRING_LITERAL_SINGLE_QUOTE
      break;
    case 14:                        // STRING_LITERAL_LONG_SINGLE_QUOTE
      consume(14);                  // STRING_LITERAL_LONG_SINGLE_QUOTE
      break;
    default:
      consume(15);                  // STRING_LITERAL_LONG_QUOTE
    }
    eventHandler.endNonterminal("String", e0);
  }

  private void parse_iri()
  {
    eventHandler.startNonterminal("iri", e0);
    switch (l1)
    {
    case 4:                         // IRIREF
      consume(4);                   // IRIREF
      break;
    default:
      parse_PrefixedName();
    }
    eventHandler.endNonterminal("iri", e0);
  }

  private void parse_PrefixedName()
  {
    eventHandler.startNonterminal("PrefixedName", e0);
    switch (l1)
    {
    case 6:                         // PNAME_LN
      consume(6);                   // PNAME_LN
      break;
    default:
      consume(5);                   // PNAME_NS
    }
    eventHandler.endNonterminal("PrefixedName", e0);
  }

  private void parse_BlankNode()
  {
    eventHandler.startNonterminal("BlankNode", e0);
    switch (l1)
    {
    case 7:                         // BLANK_NODE_LABEL
      consume(7);                   // BLANK_NODE_LABEL
      break;
    default:
      consume(16);                  // ANON
    }
    eventHandler.endNonterminal("BlankNode", e0);
  }

  private void consume(int t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = 0;
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private void whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  private int matchW(int tokenSetId)
  {
    int code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 1)                // WhiteSpace
      {
        break;
      }
    }
    return code;
  }

  private void lookahead1W(int tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  private int error(int b, int e, int s, int l, int t)
  {
    throw new ParseException(b, e, s, l, t);
  }

  private int     b0, e0;
  private int l1, b1, e1;
  private EventHandler eventHandler = null;
  private CharSequence input = null;
  private int size = 0;
  private int begin = 0;
  private int end = 0;

  private int match(int tokenSetId)
  {
    begin = end;
    int current = end;
    int result = INITIAL[tokenSetId];
    int state = 0;

    for (int code = result & 127; code != 0; )
    {
      int charclass;
      int c0 = current < size ? input.charAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        int c1 = c0 >> 4;
        charclass = MAP1[(c0 & 15) + MAP1[(c1 & 31) + MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          int c1 = current < size ? input.charAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
          }
        }

        int lo = 0, hi = 5;
        for (int m = 3; ; m = (hi + lo) >> 1)
        {
          if (MAP2[m] > c0) {hi = m - 1;}
          else if (MAP2[6 + m] < c0) {lo = m + 1;}
          else {charclass = MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      int i0 = (charclass << 7) + code - 1;
      code = TRANSITION[(i0 & 7) + TRANSITION[i0 >> 3]];

      if (code > 127)
      {
        result = code;
        code &= 127;
        end = current;
      }
    }

    result >>= 7;
    if (result == 0)
    {
      end = current - 1;
      int c1 = end < size ? input.charAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000)
      {
        --end;
      }
      return error(begin, end, state, -1, -1);
    }

    if (end > size) end = size;
    return (result & 31) - 1;
  }

  private static String[] getTokenSet(int tokenSetId)
  {
    java.util.ArrayList<String> expected = new java.util.ArrayList<>();
    int s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 127;
    for (int i = 0; i < 31; i += 32)
    {
      int j = i;
      int i0 = (i >> 5) * 120 + s - 1;
      int f = EXPECTED[(i0 & 3) + EXPECTED[i0 >> 2]];
      for ( ; f != 0; f >>>= 1, ++j)
      {
        if ((f & 1) != 0)
        {
          expected.add(TOKEN[j]);
        }
      }
    }
    return expected.toArray(new String[]{});
  }

  private static final int[] MAP0 =
  {
    /*   0 */ 54, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4,
    /*  35 */ 5, 3, 6, 3, 7, 8, 9, 3, 10, 11, 12, 13, 3, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 16, 17, 3, 18, 3,
    /*  64 */ 19, 20, 21, 22, 22, 23, 24, 25, 25, 26, 25, 25, 25, 25, 25, 25, 27, 25, 28, 29, 25, 30, 25, 25, 31, 25,
    /*  90 */ 25, 32, 33, 34, 35, 36, 37, 38, 39, 22, 22, 40, 41, 25, 25, 42, 25, 25, 43, 25, 44, 25, 45, 25, 46, 47,
    /* 116 */ 48, 49, 25, 25, 50, 25, 25, 37, 37, 37, 3, 51
  };

  private static final int[] MAP1 =
  {
    /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
    /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 325, 341, 357, 394, 394, 394, 386, 442, 434, 442, 434, 442, 442,
    /* 126 */ 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 411, 411, 411, 411, 411, 411, 411,
    /* 147 */ 427, 442, 442, 442, 442, 442, 442, 442, 442, 372, 394, 394, 395, 393, 394, 394, 442, 442, 442, 442, 442,
    /* 168 */ 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 394, 394, 394, 394, 394, 394, 394, 394,
    /* 189 */ 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
    /* 210 */ 394, 394, 394, 441, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
    /* 231 */ 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 394, 54, 0, 0, 0, 0, 0, 0, 0,
    /* 255 */ 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 5, 3, 6, 3, 7, 8, 9, 3, 10, 11,
    /* 290 */ 12, 13, 3, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 16, 17, 3, 18, 3, 19, 20, 21, 22, 22, 23, 24, 25,
    /* 317 */ 25, 26, 25, 25, 25, 25, 25, 25, 27, 25, 28, 29, 25, 30, 25, 25, 31, 25, 25, 32, 33, 34, 35, 36, 37, 38,
    /* 343 */ 39, 22, 22, 40, 41, 25, 25, 42, 25, 25, 43, 25, 44, 25, 45, 25, 46, 47, 48, 49, 25, 25, 50, 25, 25, 37,
    /* 369 */ 37, 37, 3, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 53, 53, 51, 51, 51, 51, 51, 51, 51, 52, 51, 51,
    /* 396 */ 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
    /* 422 */ 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 51, 53, 53, 53, 53, 53, 53,
    /* 448 */ 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
  };

  private static final int[] MAP2 =
  {
    /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 51, 53, 51, 53, 53,
    /* 17 */ 51
  };

  private static final int[] INITIAL =
  {
    /*  0 */ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
  };

  private static final int[] TRANSITION =
  {
    /*    0 */ 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 880, 891,
    /*   18 */ 1052, 1931, 1932, 945, 1932, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932, 880, 883, 1005, 1932,
    /*   36 */ 1932, 1932, 1932, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932, 1932, 1897, 1933, 1931, 1224, 945,
    /*   54 */ 1932, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932, 1932, 905, 1345, 1931, 1932, 1925, 1931, 994,
    /*   72 */ 1343, 1672, 919, 1030, 1344, 1932, 1932, 1932, 929, 933, 1933, 1931, 1224, 945, 1932, 983, 1343, 984,
    /*   90 */ 1343, 1893, 1344, 1932, 1932, 1932, 1932, 1897, 941, 1931, 1656, 945, 1932, 983, 1343, 984, 1343, 1893,
    /*  108 */ 1344, 1932, 1932, 1932, 1932, 953, 1933, 981, 1224, 1694, 1931, 983, 992, 1731, 1002, 1893, 1013, 1932,
    /*  126 */ 1932, 1932, 1932, 1023, 1933, 1931, 1224, 945, 1932, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932,
    /*  144 */ 1932, 1314, 1933, 1931, 1224, 945, 1932, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932, 1932, 1042,
    /*  162 */ 1933, 1931, 1224, 945, 1049, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932, 1661, 1321, 1933, 1931,
    /*  180 */ 1224, 945, 1932, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932, 1932, 1060, 1068, 1243, 1822, 1081,
    /*  198 */ 1096, 1857, 1076, 971, 1089, 973, 1344, 1932, 1932, 1932, 1447, 1110, 1118, 1126, 1140, 1156, 1172, 1614,
    /*  216 */ 1170, 1146, 1180, 1148, 1344, 1932, 1932, 1932, 1932, 1202, 1210, 1218, 1851, 1237, 1252, 1260, 1268,
    /*  233 */ 1276, 1284, 1292, 1360, 1300, 1353, 1932, 1379, 1400, 1408, 1599, 1932, 1385, 1600, 1418, 1416, 1192,
    /*  250 */ 1426, 1194, 1344, 1932, 1932, 1932, 897, 1328, 1933, 1931, 1224, 945, 1932, 983, 1343, 984, 1343, 1893,
    /*  268 */ 1344, 1932, 1932, 1932, 959, 965, 1933, 1931, 1932, 945, 1932, 983, 1343, 984, 1343, 1893, 1344, 1932,
    /*  286 */ 1932, 1932, 1932, 1807, 1933, 1931, 1932, 945, 1932, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932,
    /*  304 */ 1932, 1440, 1933, 1931, 1224, 945, 1932, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932, 1532, 1538,
    /*  322 */ 1455, 1391, 1851, 1237, 1432, 1260, 1463, 1276, 1284, 1292, 1360, 1300, 1353, 1932, 1532, 1471, 1210,
    /*  339 */ 1391, 1851, 1237, 1432, 1260, 1463, 1276, 1284, 1292, 1360, 1300, 1353, 1932, 1532, 1538, 1210, 1391,
    /*  356 */ 1851, 1237, 1432, 1260, 1463, 1276, 1284, 1292, 1360, 1300, 1353, 1932, 1532, 1538, 1210, 1307, 1851,
    /*  373 */ 1479, 1493, 1501, 1463, 1276, 1284, 1292, 1360, 1300, 1353, 1932, 1532, 1538, 1210, 1391, 1851, 1237,
    /*  390 */ 1432, 1509, 1463, 1276, 1284, 1292, 1360, 1300, 1353, 1932, 1532, 1538, 1210, 1391, 1644, 1237, 1392,
    /*  407 */ 1857, 1517, 971, 1525, 973, 1344, 1932, 1932, 1932, 1532, 1538, 1210, 1391, 1644, 1237, 1392, 1857, 1517,
    /*  425 */ 1186, 1525, 973, 1344, 1932, 1932, 1932, 1532, 1546, 1210, 1391, 1644, 1237, 1392, 1857, 1517, 971, 1525,
    /*  443 */ 973, 1344, 1932, 1932, 1932, 1532, 1538, 1554, 1391, 1644, 1237, 1392, 1857, 1517, 971, 1525, 973, 1344,
    /*  461 */ 1932, 1932, 1932, 1532, 1538, 1210, 1391, 1644, 1562, 1392, 1857, 1517, 971, 1525, 973, 1344, 1932, 1932,
    /*  479 */ 1932, 1532, 1538, 1210, 1391, 1576, 1593, 1608, 1857, 1517, 1102, 1622, 973, 1344, 1932, 1932, 1932,
    /*  496 */ 1532, 1538, 1210, 1391, 1644, 1237, 1392, 1857, 1517, 971, 1525, 1367, 1344, 1932, 1932, 1932, 1932,
    /*  513 */ 1637, 1933, 1931, 1932, 945, 1932, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932, 1932, 1371, 1585,
    /*  531 */ 1728, 1582, 1722, 1931, 1015, 1669, 983, 1342, 1932, 1932, 1932, 1932, 1932, 911, 1335, 1229, 1931, 1932,
    /*  549 */ 945, 1932, 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932, 1932, 1650, 1933, 1162, 1932, 945, 1932,
    /*  567 */ 983, 1343, 984, 1343, 1893, 1344, 1932, 1932, 1932, 1932, 1680, 1210, 1243, 1822, 1237, 1244, 1857, 1076,
    /*  585 */ 971, 1688, 973, 1344, 1932, 1932, 1932, 1932, 1966, 1933, 1931, 1932, 945, 1932, 983, 1343, 984, 1343,
    /*  603 */ 1893, 1344, 1932, 1932, 1932, 1629, 1538, 1455, 1568, 1948, 1237, 1432, 1260, 1463, 1276, 1284, 1292,
    /*  620 */ 1360, 1300, 1353, 1932, 1532, 1471, 1702, 1391, 1851, 1710, 1911, 1260, 1463, 1739, 1747, 1292, 1360,
    /*  637 */ 1300, 1353, 1932, 1532, 1538, 1210, 1307, 1851, 1479, 1493, 1755, 1763, 1771, 1779, 1292, 1360, 1300,
    /*  654 */ 1353, 1932, 1532, 1787, 1210, 1391, 1851, 1710, 1911, 1509, 1463, 1795, 1747, 1292, 1360, 1300, 1353,
    /*  671 */ 1932, 1532, 1538, 1210, 1391, 1644, 1237, 1392, 1857, 1517, 1186, 1525, 1803, 1344, 1932, 1932, 1932,
    /*  688 */ 1532, 1538, 1210, 1391, 1644, 1237, 1887, 1857, 1517, 971, 1525, 973, 1344, 1932, 1932, 1932, 1532, 1538,
    /*  706 */ 1210, 1391, 1644, 1710, 1716, 1857, 1517, 1828, 1815, 973, 1344, 1932, 1932, 1932, 1532, 1546, 1836,
    /*  723 */ 1391, 1644, 1237, 1392, 1857, 1517, 971, 1525, 973, 1344, 1932, 1932, 1932, 1532, 1538, 1554, 1485, 1955,
    /*  741 */ 1710, 1716, 1857, 1517, 1828, 1815, 973, 1344, 1932, 1932, 1932, 1532, 1538, 1210, 1391, 1644, 1562,
    /*  758 */ 1392, 1844, 1865, 971, 1525, 973, 1344, 1932, 1932, 1932, 1532, 1873, 1210, 1391, 1644, 1710, 1716, 1857,
    /*  776 */ 1517, 1828, 1815, 973, 1344, 1932, 1932, 1932, 1532, 1538, 1210, 1391, 1881, 1905, 1919, 1857, 1517,
    /*  793 */ 1132, 1941, 973, 1344, 1932, 1932, 1932, 1532, 1538, 1210, 1391, 1644, 1237, 1392, 1857, 1517, 971, 1525,
    /*  811 */ 1367, 921, 1932, 1932, 1932, 1932, 1897, 1933, 1931, 1932, 945, 1932, 983, 1343, 984, 1343, 1893, 1344,
    /*  829 */ 1932, 1932, 1932, 1932, 1034, 1068, 1243, 1644, 1081, 1244, 1857, 1076, 971, 1688, 973, 1344, 1932, 1932,
    /*  847 */ 1932, 1532, 1538, 1210, 1243, 1644, 1237, 1244, 1857, 1076, 971, 1688, 973, 1344, 1932, 1932, 1932, 1932,
    /*  865 */ 1963, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 269, 269, 269,
    /*  883 */ 269, 269, 269, 269, 269, 0, 0, 0, 269, 269, 269, 269, 269, 270, 0, 0, 0, 0, 0, 2944, 0, 2944, 0, 24, 24,
    /*  908 */ 24, 0, 270, 0, 0, 0, 0, 0, 3456, 0, 3456, 0, 66, 66, 0, 0, 0, 0, 0, 0, 3200, 270, 270, 270, 270, 270,
    /*  934 */ 270, 270, 270, 0, 270, 15, 0, 35, 0, 0, 0, 0, 0, 0, 44, 0, 0, 47, 0, 0, 25, 25, 25, 0, 270, 15, 0, 0, 15,
    /*  963 */ 15, 0, 15, 15, 15, 15, 0, 270, 0, 0, 0, 0, 18, 63, 0, 0, 0, 0, 1840, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0,
    /*  993 */ 82, 0, 0, 0, 0, 0, 0, 78, 0, 0, 97, 66, 0, 0, 0, 0, 0, 22, 0, 0, 1920, 0, 0, 0, 0, 0, 0, 0, 79, 0, 2432,
    /* 1024 */ 2432, 2432, 2432, 0, 270, 15, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 270, 15, 16, 0, 26, 26, 26, 0, 270, 15, 0, 0,
    /* 1051 */ 69, 0, 0, 0, 0, 0, 22, 0, 44, 0, 26, 26, 26, 0, 270, 15, 16, 0, 18, 0, 18, 18, 0, 0, 44, 0, 66, 0, 0, 0,
    /* 1081 */ 18, 18, 0, 44, 0, 0, 47, 0, 0, 66, 0, 0, 0, 18, 72, 0, 0, 69, 18, 18, 72, 0, 0, 0, 0, 18, 63, 93, 0, 0,
    /* 1111 */ 27, 27, 2843, 0, 270, 15, 34, 0, 38, 0, 38, 38, 0, 0, 44, 47, 27, 0, 50, 38, 38, 0, 0, 0, 0, 18, 63, 94,
    /* 1139 */ 0, 0, 34, 0, 36, 932, 38, 0, 0, 0, 0, 38, 63, 0, 0, 0, 0, 38, 38, 0, 44, 0, 0, 47, 0, 0, 0, 0, 0, 0,
    /* 1169 */ 3584, 0, 66, 0, 0, 0, 38, 38, 0, 0, 0, 0, 66, 0, 0, 0, 38, 0, 0, 0, 0, 91, 63, 0, 0, 0, 0, 785, 63, 0, 0,
    /* 1200 */ 0, 0, 0, 1308, 1308, 1308, 0, 270, 15, 16, 932, 18, 0, 18, 18, 0, 0, 44, 47, 1308, 1458, 1308, 18, 18, 0,
    /* 1225 */ 0, 0, 0, 932, 0, 0, 0, 0, 0, 2176, 0, 44, 18, 18, 1086, 44, 0, 0, 47, 0, 0, 0, 18, 18, 0, 0, 0, 0, 1458,
    /* 1254 */ 1605, 18, 18, 0, 73, 74, 932, 0, 0, 18, 18, 1086, 63, 80, 81, 66, 84, 85, 1605, 18, 18, 1239, 88, 89, 0,
    /* 1279 */ 0, 18, 63, 0, 95, 96, 66, 0, 100, 101, 18, 1239, 102, 103, 0, 18, 63, 105, 106, 107, 108, 113, 114, 65,
    /* 1303 */ 44, 115, 116, 68, 47, 0, 0, 51, 18, 18, 1206, 0, 0, 2560, 2560, 0, 270, 15, 0, 0, 0, 2688, 0, 270, 15, 0,
    /* 1329 */ 0, 0, 2944, 0, 270, 15, 0, 0, 0, 3456, 0, 270, 15, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 1709, 117, 118, 119,
    /* 1356 */ 120, 94, 63, 99, 66, 109, 110, 111, 112, 56, 15, 0, 0, 402, 63, 0, 0, 0, 0, 0, 270, 33, 0, 0, 768, 0,
    /* 1382 */ 785, 785, 0, 785, 785, 0, 44, 0, 0, 47, 0, 0, 0, 18, 18, 1206, 0, 0, 785, 785, 785, 785, 0, 270, 15, 768,
    /* 1408 */ 0, 785, 0, 785, 785, 0, 43, 44, 0, 66, 0, 0, 0, 785, 785, 0, 63, 0, 0, 66, 0, 0, 0, 785, 0, 0, 0, 18, 18,
    /* 1437 */ 1206, 73, 74, 19, 0, 0, 31, 0, 270, 15, 0, 0, 2816, 0, 0, 2816, 2816, 2816, 932, 18, 0, 41, 18, 0, 0, 44,
    /* 1463 */ 81, 66, 84, 85, 0, 18, 18, 1239, 20, 18, 18, 18, 0, 270, 15, 16, 18, 61, 1086, 44, 0, 0, 47, 0, 0, 0, 18,
    /* 1490 */ 53, 1206, 0, 0, 51, 0, 18, 18, 1206, 73, 74, 932, 0, 0, 530, 18, 1086, 63, 80, 932, 0, 0, 18, 77, 1086,
    /* 1515 */ 63, 80, 0, 66, 0, 0, 0, 18, 18, 1239, 0, 66, 0, 0, 0, 18, 1239, 0, 16, 0, 18, 18, 0, 18, 18, 18, 18, 0,
    /* 1543 */ 270, 15, 16, 21, 18, 18, 18, 0, 270, 15, 16, 932, 18, 0, 18, 42, 0, 0, 44, 60, 18, 1086, 44, 0, 0, 47, 0,
    /* 1570 */ 0, 0, 52, 18, 1206, 0, 55, 16, 0, 932, 0, 18, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 46, 18, 18, 1086, 44, 0, 64,
    /* 1599 */ 47, 0, 0, 0, 785, 785, 0, 0, 0, 67, 0, 0, 18, 18, 1206, 0, 0, 0, 38, 38, 62, 63, 0, 0, 66, 98, 0, 0, 18,
    /* 1628 */ 1239, 0, 16, 0, 18, 3730, 0, 3730, 3730, 3350, 3350, 3350, 3350, 0, 270, 15, 0, 16, 0, 932, 0, 18, 0, 0,
    /* 1652 */ 0, 32, 0, 270, 0, 0, 0, 35, 932, 0, 0, 0, 0, 0, 2688, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 92, 63, 0, 23, 23,
    /* 1682 */ 23, 23, 0, 270, 15, 16, 0, 66, 0, 0, 0, 18, 0, 0, 0, 44, 0, 44, 1792, 66, 932, 18, 39, 18, 18, 0, 0, 44,
    /* 1710 */ 18, 18, 1086, 44, 0, 44, 47, 0, 0, 18, 18, 1206, 0, 0, 0, 46, 0, 44, 49, 0, 0, 0, 0, 0, 0, 0, 63, 63, 0,
    /* 1739 */ 88, 89, 0, 0, 18, 63, 63, 95, 96, 66, 66, 100, 101, 18, 1239, 102, 932, 0, 76, 530, 18, 1086, 63, 80, 81,
    /* 1764 */ 66, 84, 85, 0, 18, 3986, 1239, 88, 89, 3072, 0, 18, 63, 0, 95, 96, 66, 0, 100, 101, 3858, 1239, 102, 18,
    /* 1788 */ 29, 29, 29, 0, 270, 15, 16, 88, 89, 0, 90, 18, 63, 63, 95, 0, 104, 18, 63, 0, 0, 0, 0, 0, 270, 640, 0, 0,
    /* 1816 */ 66, 66, 0, 0, 18, 1239, 0, 16, 0, 932, 932, 18, 0, 0, 0, 0, 18, 63, 63, 0, 932, 18, 40, 18, 18, 0, 0, 44,
    /* 1844 */ 0, 75, 0, 18, 18, 1086, 63, 0, 16, 57, 932, 0, 18, 0, 0, 0, 18, 18, 1086, 63, 0, 0, 66, 0, 0, 0, 86, 18,
    /* 1872 */ 1239, 18, 30, 30, 30, 0, 270, 15, 16, 56, 16, 0, 932, 0, 18, 0, 0, 0, 70, 18, 1206, 0, 0, 0, 63, 0, 0, 0,
    /* 1900 */ 0, 0, 270, 15, 0, 18, 18, 1086, 44, 0, 65, 47, 0, 0, 18, 18, 1206, 73, 74, 68, 0, 0, 18, 71, 1206, 0, 0,
    /* 1927 */ 0, 1664, 63, 44, 47, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 66, 99, 0, 0, 18, 1239, 0, 16, 57, 932, 0, 18, 58, 0,
    /* 1956 */ 16, 0, 932, 0, 18, 0, 59, 2304, 0, 0, 0, 0, 0, 0, 0, 270, 0, 0
  };

  private static final int[] EXPECTED =
  {
    /*   0 */ 30, 34, 38, 42, 48, 66, 70, 81, 44, 74, 51, 97, 78, 85, 91, 95, 54, 80, 87, 61, 101, 106, 59, 62, 112, 57,
    /*  26 */ 62, 102, 110, 110, 18, 34, 2097154, 114, 268435570, 74448898, 270532722, 341835890, 59179262, 1644560114,
    /*  40 */ 1645084402, 1853751282, 2, 2, 16, 32, 64, 64, 64, 96, 25165824, 104, 100, 128, 4096, 16384, 8192, 8192,
    /*  58 */ 16, 16, 16777216, 100, 32768, 32768, 4096, 4096, 100, 65536, 128, 36864, 24576, 3584, 3072, 3584, 64, 96,
    /*  76 */ 8388608, 16777216, 8192, 3072, 2048, 536871008, 1073741920, 256, 134217728, 1073741920, 256, 16, 16,
    /*  89 */ 8388608, 16777216, 64, 8388608, 16777216, 104, 100, 128, 32768, 4096, 8192, 16384, 4096, 16384, 16384,
    /* 104 */ 8192, 8192, 8192, 536871008, 256, 16, 32768, 32768, 16384, 16384, 16384, 8192
  };

  private static final String[] TOKEN =
  {
    "(0)",
    "WhiteSpace",
    "PREFIX",
    "BASE",
    "IRIREF",
    "PNAME_NS",
    "PNAME_LN",
    "BLANK_NODE_LABEL",
    "LANGTAG",
    "INTEGER",
    "DECIMAL",
    "DOUBLE",
    "STRING_LITERAL_QUOTE",
    "STRING_LITERAL_SINGLE_QUOTE",
    "STRING_LITERAL_LONG_SINGLE_QUOTE",
    "STRING_LITERAL_LONG_QUOTE",
    "'[]'",
    "EOF",
    "'('",
    "')'",
    "','",
    "'.'",
    "';'",
    "'@base'",
    "'@prefix'",
    "'['",
    "']'",
    "'^^'",
    "'a'",
    "'false'",
    "'true'"
  };
}

// End
