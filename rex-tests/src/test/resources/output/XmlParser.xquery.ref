xquery version "1.0" encoding "UTF-8";

(: This file was generated on Sun Jun 6, 2021 17:04 (UTC+02) by REx v5.53 which is Copyright (c) 1979-2021 by Gunther Rademacher <grd@gmx.net> :)
(: REx command line: -q XmlParser.ebnf -xquery -a xquery :)

                                                                      (: line 68 "XmlParser.ebnf" :)
                                                                      declare namespace p="XmlParser";
                                                                      declare namespace saxon="http://saxon.sf.net/";
                                                                      (: line 10 "XmlParser.xquery" :)
(:~
 : The index of the lexer state for accessing the combined
 : (i.e. level > 1) lookahead code.
 :)
declare variable $p:lk as xs:integer := 1;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the token that has been consumed.
 :)
declare variable $p:b0 as xs:integer := 2;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the token that has been consumed.
 :)
declare variable $p:e0 as xs:integer := 3;

(:~
 : The index of the lexer state for accessing the code of the
 : level-1-lookahead token.
 :)
declare variable $p:l1 as xs:integer := 4;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the level-1-lookahead token.
 :)
declare variable $p:b1 as xs:integer := 5;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the level-1-lookahead token.
 :)
declare variable $p:e1 as xs:integer := 6;

(:~
 : The index of the lexer state for accessing the code of the
 : level-2-lookahead token.
 :)
declare variable $p:l2 as xs:integer := 7;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the level-2-lookahead token.
 :)
declare variable $p:b2 as xs:integer := 8;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the level-2-lookahead token.
 :)
declare variable $p:e2 as xs:integer := 9;

(:~
 : The index of the lexer state for accessing the code of the
 : level-3-lookahead token.
 :)
declare variable $p:l3 as xs:integer := 10;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the level-3-lookahead token.
 :)
declare variable $p:b3 as xs:integer := 11;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the level-3-lookahead token.
 :)
declare variable $p:e3 as xs:integer := 12;

(:~
 : The index of the lexer state for accessing the token code that
 : was expected when an error was found.
 :)
declare variable $p:error as xs:integer := 13;

(:~
 : The index of the lexer state that points to the first entry
 : used for collecting action results.
 :)
declare variable $p:result as xs:integer := 14;

(:~
 : The codepoint to charclass mapping for 7 bit codepoints.
 :)
declare variable $p:MAP0 as xs:integer+ :=
(
  71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8,
  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 18, 18, 18, 18, 18, 18, 18, 18, 20, 21, 22, 23, 24, 25, 6, 26, 27, 28, 29,
  30, 31, 32, 32, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 32, 32, 45, 46, 32, 47, 48, 49, 48, 50, 48, 51,
  52, 53, 54, 55, 52, 56, 32, 57, 32, 32, 58, 59, 60, 61, 32, 32, 62, 63, 64, 32, 65, 32, 66, 67, 32, 48, 68, 48, 48,
  48
);

(:~
 : The codepoint to charclass mapping for codepoints below the surrogate block.
 :)
declare variable $p:MAP1 as xs:integer+ :=
(
  108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214,
  215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 325, 341,
  357, 394, 394, 394, 386, 442, 434, 442, 434, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
  442, 442, 411, 411, 411, 411, 411, 411, 411, 427, 442, 442, 442, 442, 442, 442, 442, 442, 370, 394, 394, 395, 393,
  394, 394, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 394, 394, 394,
  394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
  394, 394, 394, 394, 394, 394, 441, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
  442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 394, 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
  19, 18, 18, 18, 18, 18, 18, 18, 18, 20, 21, 22, 23, 24, 25, 6, 26, 27, 28, 29, 30, 31, 32, 32, 33, 32, 34, 35, 36, 37,
  38, 39, 40, 41, 42, 43, 44, 32, 32, 45, 46, 32, 47, 48, 49, 48, 50, 48, 51, 52, 53, 54, 55, 52, 56, 32, 57, 32, 32,
  58, 59, 60, 61, 32, 32, 62, 63, 64, 32, 65, 32, 66, 67, 32, 48, 68, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
  70, 70, 48, 48, 48, 48, 48, 48, 48, 48, 48, 69, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 69,
  69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
  70, 48, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70
);

(:~
 : The codepoint to charclass mapping for codepoints above the surrogate block.
 :)
declare variable $p:MAP2 as xs:integer+ :=
(
  57344, 63744, 64976, 65008, 65536, 63743, 64975, 65007, 65533, 1114111, 48, 70, 48, 70, 48
);

(:~
 : The token-set-id to DFA-initial-state mapping.
 :)
declare variable $p:INITIAL as xs:integer+ :=
(
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
  33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72
);

(:~
 : The DFA transition table.
 :)
declare variable $p:TRANSITION as xs:integer+ :=
(
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2304, 2323, 5215, 2322, 2339, 4812,
  4178, 2305, 2794, 2305, 2368, 2305, 5429, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2304, 2323, 5215, 2322, 2392, 4812, 4178, 2305, 2794, 2305, 2368, 2305,
  5429, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 4042, 4812, 2443, 2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 4560, 2305, 2470, 2979, 4153,
  3220, 4178, 2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 5447, 5447, 2305, 2488, 4042, 4812, 5384, 2523, 2794, 2305, 2305,
  2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 4042, 4812, 4178, 2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305,
  3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3353, 3350, 2305, 2305,
  3513, 2831, 4178, 2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 4856, 2916, 2305, 2305, 2305, 2305,
  2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 3189, 2305, 2553, 3432, 5052, 3941, 4178, 2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305,
  2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2557, 2555, 2558,
  2574, 3695, 4812, 4178, 2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3789, 2305, 2600, 3891, 2650, 4812, 4178, 2305, 2794,
  2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2635, 2584, 4178, 2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608,
  2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2696, 4812, 4178, 2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2736, 2742, 2665, 4812, 4178, 2305,
  2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 4809, 4803, 2305, 2305, 4942, 3376, 4178, 2305, 2758, 4015, 2786, 2305, 2407, 2305,
  2810, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 4809,
  4803, 2305, 2305, 4531, 3376, 4178, 2305, 4624, 4015, 4616, 2305, 3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3307, 3938, 4042, 4812, 2418,
  2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 4809, 4803, 2305, 2305, 4942, 3376, 4178, 2828, 4187, 2847, 5176, 3575, 2862,
  3863, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2890, 4803, 2305, 2305, 4942, 3376, 4178, 2828, 4187, 2847, 5176, 3575, 2862, 3863, 3608, 2305, 2305, 3137, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2913, 2427, 5317, 2932, 4942, 4812,
  4680, 2965, 3006, 4015, 4616, 2305, 3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2812, 2305, 2305, 2305, 4042, 4812, 4178, 2305, 3469, 3669, 5194, 2990,
  3683, 3402, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 3770, 3033, 4812, 2305, 2305, 2305, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 5281, 2897, 2305, 2305, 4042,
  4812, 4178, 2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3110, 3095, 3080, 3124, 3161, 4178, 2305, 2305, 2305, 2305,
  2305, 5311, 2305, 3217, 2615, 2305, 3461, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 3236, 3240, 3241, 3257, 4812, 3296, 2305, 2794, 2305, 3323, 2305, 5373, 2305, 3347, 2305, 2305,
  3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 3392,
  4942, 3376, 4680, 3418, 3448, 4015, 4905, 3485, 3501, 3529, 3545, 2305, 3059, 3137, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4680, 3561, 3006, 4015,
  4905, 4970, 3501, 3863, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 3369, 2427, 5317, 2932, 5474, 3376, 4680, 3591, 3006, 4015, 5109, 4970, 3626, 5078, 3608, 2305,
  2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317,
  2932, 4942, 3654, 2720, 2965, 3711, 4459, 4905, 4970, 3749, 3863, 3786, 2305, 3805, 3137, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 3853, 3201, 3376, 4680, 2965, 3879,
  4015, 4905, 3907, 3923, 3863, 3957, 3046, 3987, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4002, 2965, 3006, 4015, 4905, 4970, 3501, 2680, 3608,
  2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427,
  5317, 2932, 4942, 3376, 4680, 2965, 3006, 4015, 4616, 2305, 3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 2770, 3376, 4073, 2965,
  4031, 4015, 4655, 2619, 3819, 2305, 4058, 4374, 4398, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4680, 2965, 3006, 4015, 4616, 2305, 3819, 4869,
  3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369,
  2427, 5317, 2932, 4942, 3376, 4680, 2965, 3006, 4086, 4757, 2305, 5041, 2305, 4102, 2305, 2305, 3137, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4126,
  2965, 4142, 4015, 4616, 2305, 3819, 5145, 4169, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 3369, 4474, 4915, 2932, 2874, 4203, 4779, 2965, 4219, 4015, 4843, 2305, 3819,
  2305, 3608, 4250, 2454, 3762, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  3369, 2427, 5317, 2932, 4942, 3376, 5264, 2965, 3006, 4015, 5415, 4247, 3819, 2305, 3608, 2472, 2305, 4266, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 3837, 4290, 4942, 4306,
  4680, 4350, 3006, 4015, 4366, 2305, 3819, 2305, 3608, 2305, 2503, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4680, 2965, 3006, 4015, 4390, 2305,
  3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 3369, 2427, 5317, 2932, 4942, 3376, 4321, 2965, 4414, 4015, 4616, 2305, 3819, 2305, 3608, 5120, 2305, 3137,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 2376, 4490, 4942,
  3376, 4680, 4506, 3006, 4015, 4616, 2305, 3819, 2305, 4547, 2305, 3722, 3137, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4680, 2965, 4585, 4601, 4640,
  2305, 3971, 4671, 4696, 4569, 2305, 4718, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 3369, 2427, 5317, 2932, 4942, 4742, 4680, 2965, 3006, 4015, 4616, 2305, 5000, 2305, 3608, 2305, 2305,
  3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932,
  4942, 3376, 4680, 2965, 3006, 4015, 4795, 2305, 3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 4828, 4680, 4890, 3006, 4015,
  4616, 2305, 4931, 2305, 4958, 5440, 5186, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2942, 2949, 3733, 4812, 4178, 2305, 4274, 2305, 2305, 2305, 3605, 2305, 3608, 2305,
  2306, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 3733, 4812, 4178, 2305, 2794, 2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3638, 4812, 5255, 2305, 3331,
  2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 4770, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2913, 2427, 5317, 2932, 4942, 3376, 4680, 2965, 3006, 4015, 4616, 2305, 3819, 2305, 3608,
  2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427,
  5317, 2932, 4942, 3376, 4680, 4986, 3006, 4015, 4905, 4970, 3501, 5343, 3608, 2305, 2305, 3137, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4680, 2965,
  3006, 4015, 4905, 4970, 3501, 3863, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4680, 5027, 3006, 4015, 4905, 4970, 3501, 3863,
  3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369,
  2427, 5317, 2932, 4942, 3376, 4680, 2965, 3006, 4015, 4905, 2352, 3501, 3863, 3608, 2305, 2305, 3137, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2537, 5317, 5068, 4942, 5094, 4680,
  2965, 3006, 4015, 4905, 4970, 3501, 3863, 3608, 2305, 2305, 2711, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4680, 2965, 3006, 4015, 4616, 2305, 3819,
  2305, 3608, 3610, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  3369, 2427, 5317, 2932, 4942, 3376, 4680, 2965, 3006, 4015, 4616, 3064, 3819, 3145, 3608, 2305, 2305, 3137, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376,
  4680, 2965, 3006, 4015, 4616, 2305, 4520, 2305, 3608, 5142, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4680, 2965, 3006, 4015, 5246, 2305,
  3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 3369, 2427, 5126, 2932, 4942, 5161, 4680, 2965, 3006, 4429, 4616, 2305, 3819, 2305, 3608, 5210, 2507, 3137,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942,
  5231, 4680, 2965, 3006, 4444, 4616, 2305, 3819, 4874, 3608, 2305, 5280, 3137, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4680, 5297, 3006, 4015, 4616,
  2305, 3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 3369, 4231, 4110, 5333, 4942, 3376, 4680, 5359, 3006, 4334, 4616, 2305, 3819, 2305, 3608, 2305, 2305,
  3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 5317, 2932,
  4942, 5400, 4680, 2965, 3006, 4015, 4616, 2305, 3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 3017, 5317, 2932, 4942, 3376, 4680, 2965, 3006, 4015,
  4616, 2305, 3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 3369, 2427, 5317, 2932, 4942, 3376, 4680, 2965, 5463, 5490, 4616, 2305, 3819, 2305, 3608, 2305,
  2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3369, 2427, 4702,
  2932, 4942, 3376, 4680, 2965, 3006, 4015, 4616, 2305, 3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 3830, 3272, 3280, 3176, 4812, 4178, 2305, 2794,
  2305, 2305, 2305, 3605, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 4809, 4803, 2305, 2305, 5011, 4812, 4178, 2305, 4624, 4015, 4616, 2305, 3819, 2305, 3608,
  2305, 2305, 3137, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2913, 2427,
  5317, 2932, 5011, 4812, 4680, 2965, 3006, 4015, 4616, 2305, 3819, 2305, 3608, 2305, 2305, 3137, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 4726, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
  2305, 2305, 2305, 2305, 2305, 1537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 277, 1537, 0, 0, 0, 0, 0, 0, 0,
  1537, 1537, 1537, 1537, 1537, 1537, 0, 0, 0, 1537, 1537, 1537, 1537, 0, 5224, 1537, 0, 0, 74, 75, 76, 77, 0, 0, 0, 0,
  215, 0, 216, 0, 0, 218, 219, 0, 0, 0, 0, 223, 0, 0, 197, 0, 0, 0, 0, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 2121, 0,
  0, 0, 0, 1537, 1537, 1537, 1537, 0, 5224, 1537, 0, 0, 74, 75, 76, 77, 78, 79, 0, 0, 0, 225, 197, 0, 0, 0, 0, 0, 163,
  0, 0, 0, 0, 0, 0, 20480, 5224, 5224, 0, 0, 0, 0, 0, 0, 0, 2121, 2563, 0, 0, 0, 0, 2121, 2121, 2121, 0, 129, 0, 134,
  134, 0, 137, 5224, 5224, 0, 140, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 0, 29184, 0, 0, 0, 0, 76, 9216, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 268, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 99, 0, 0, 0, 271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 276, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 0, 160, 0, 0, 0, 85, 0, 0, 0, 2121, 2563, 0, 0, 0, 0,
  2121, 2121, 2121, 77, 12800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13312, 0, 0, 0, 0, 0, 13312, 0, 0, 13312, 0, 0,
  0, 0, 13312, 0, 0, 0, 0, 0, 0, 0, 14336, 0, 0, 0, 0, 0, 94, 95, 0, 0, 0, 13824, 13824, 88, 0, 0, 0, 0, 0, 0, 0, 13824,
  13824, 88, 0, 0, 0, 5632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 0, 0, 0, 0, 14848, 0, 14848, 0, 5224, 0, 0, 0, 74,
  75, 76, 77, 78, 79, 0, 0, 0, 13824, 0, 5224, 0, 0, 0, 74, 75, 76, 77, 78, 79, 0, 0, 0, 15872, 0, 5224, 0, 0, 0, 74,
  75, 76, 77, 78, 79, 0, 0, 0, 26861, 0, 0, 215, 216, 0, 0, 0, 0, 0, 0, 223, 224, 0, 15360, 0, 15360, 0, 5224, 0, 0, 0,
  74, 75, 76, 77, 78, 79, 0, 0, 0, 32768, 277, 0, 277, 277, 0, 0, 0, 0, 0, 0, 0, 0, 5224, 5224, 139, 0, 141, 0, 26255,
  0, 147, 0, 0, 15872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15872, 0, 0, 0, 0, 0, 0, 15872, 0, 0, 162, 0, 0, 0, 0, 162, 0, 0, 162,
  5224, 139, 162, 0, 0, 0, 0, 0, 5224, 0, 110, 2121, 74, 75, 76, 77, 78, 79, 0, 0, 196, 163, 0, 0, 0, 0, 163, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 5224, 0, 0, 0, 0, 0, 0, 244, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16896, 0, 0, 7282, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 125, 0, 0, 180, 147, 182, 149, 0, 0, 0, 0, 0, 0, 0, 157, 191, 159, 193, 224,
  0, 196, 197, 0, 0, 0, 0, 0, 163, 204, 0, 0, 0, 0, 0, 5224, 0, 111, 2121, 74, 75, 76, 77, 78, 79, 0, 0, 0, 2563, 0, 0,
  0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21504, 0, 0, 0, 0, 0, 0, 2121, 2563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
  126, 0, 0, 2121, 2121, 0, 0, 0, 0, 0, 0, 2121, 0, 0, 0, 0, 0, 0, 0, 30720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  30720, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 157, 159, 159, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 9290, 0, 0, 0, 74, 0, 75, 0,
  0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 163, 0, 0, 0, 0, 163, 0, 0, 5224, 139, 0, 0, 0, 0, 0, 87, 0, 2121, 2563, 0, 0, 0, 0,
  2121, 2121, 2121, 17508, 0, 17509, 0, 17511, 17511, 107, 0, 0, 0, 0, 76, 77, 0, 0, 0, 0, 258, 0, 0, 0, 0, 263, 0, 0,
  266, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0, 22016, 0, 22016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 22016, 0, 0, 0, 0, 22016, 22016, 22016, 0, 0, 0, 0, 0, 0, 0, 22016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22016, 0, 0,
  0, 22016, 0, 0, 0, 5224, 0, 0, 0, 74, 75, 76, 77, 0, 0, 0, 0, 277, 0, 277, 277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0,
  0, 0, 0, 0, 0, 0, 23040, 0, 0, 0, 0, 0, 16384, 0, 0, 0, 0, 94, 95, 0, 0, 0, 34304, 0, 5224, 0, 0, 0, 74, 75, 76, 77,
  0, 0, 0, 75, 77, 79, 0, 0, 0, 0, 0, 12800, 0, 0, 0, 0, 0, 5224, 0, 109, 2121, 74, 75, 76, 77, 78, 79, 0, 196, 6144, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3072, 95, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 22528, 0, 22528, 0, 5224, 0, 0, 0, 74, 75, 76, 77, 78, 79, 0, 0, 0, 34304, 34304, 0, 0, 0, 0, 0, 0, 0, 0, 34304,
  34304, 0, 0, 0, 0, 0, 34304, 34304, 0, 0, 0, 130, 0, 130, 135, 0, 130, 5224, 5224, 0, 130, 0, 0, 0, 0, 0, 89, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 89, 0, 0, 198, 0, 0, 0, 0, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5258, 0, 0, 0, 0, 0, 0, 196, 226, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11776, 0, 0, 0, 0, 0, 0, 2121, 2563, 0, 0, 0, 0, 8785, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 94, 95, 0, 0, 2121, 2121, 0, 96, 0, 0, 0, 0, 2121, 0, 0, 0, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 94, 95, 149,
  0, 0, 151, 0, 0, 0, 0, 0, 0, 157, 157, 159, 159, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 12875, 0, 0, 0, 75, 0, 0, 163, 0, 0,
  0, 0, 163, 0, 0, 5224, 139, 172, 175, 0, 0, 0, 0, 277, 0, 277, 6656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5224, 8192, 0, 0, 0,
  0, 0, 0, 0, 214, 0, 215, 0, 216, 217, 27648, 0, 0, 0, 0, 0, 0, 223, 0, 224, 0, 196, 197, 0, 0, 0, 0, 0, 163, 204, 0,
  0, 0, 0, 0, 5224, 106, 0, 0, 74, 75, 76, 77, 78, 79, 0, 0, 24064, 0, 0, 0, 0, 215, 216, 0, 0, 0, 0, 0, 0, 223, 224,
  196, 197, 0, 0, 0, 0, 248, 0, 0, 0, 252, 0, 0, 0, 0, 10752, 149, 0, 0, 0, 0, 0, 0, 155, 0, 0, 157, 157, 159, 159, 0,
  0, 0, 180, 215, 182, 216, 0, 0, 0, 0, 0, 0, 0, 191, 223, 149, 0, 150, 0, 0, 0, 0, 0, 0, 0, 157, 157, 159, 159, 0, 0,
  0, 196, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31744, 0, 224, 0, 196, 197, 0, 0, 0, 0, 230, 163, 204, 0, 0,
  0, 0, 0, 5225, 31232, 0, 0, 74, 75, 76, 77, 0, 0, 0, 8785, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 0, 74, 0,
  75, 0, 0, 0, 0, 0, 0, 0, 94, 0, 95, 0, 0, 196, 197, 0, 0, 0, 0, 0, 0, 7680, 0, 0, 0, 0, 0, 5224, 0, 13312, 0, 74, 75,
  76, 77, 78, 79, 0, 0, 163, 0, 0, 0, 167, 163, 0, 0, 5224, 139, 0, 0, 0, 0, 0, 273, 0, 0, 0, 25088, 28672, 0, 0, 0, 0,
  0, 5224, 0, 0, 0, 74, 75, 76, 77, 0, 0, 0, 0, 224, 0, 196, 197, 0, 0, 0, 0, 0, 163, 204, 231, 0, 0, 0, 0, 277, 19968,
  277, 277, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 17506, 0, 0, 0, 0, 196, 197, 9728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  13824, 0, 0, 0, 10240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11264, 0, 0, 0, 196, 197, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0,
  0, 34304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 2121, 0, 0, 0, 0, 0, 2121, 2121, 0, 97, 0, 0, 0, 0, 2121, 0, 0, 0, 0, 0,
  0, 215, 216, 0, 0, 0, 0, 0, 0, 223, 224, 0, 163, 0, 0, 166, 0, 163, 0, 0, 5224, 139, 173, 0, 0, 0, 0, 0, 13912, 13824,
  0, 0, 0, 0, 0, 13912, 13824, 0, 0, 212, 0, 0, 0, 215, 0, 216, 0, 0, 0, 0, 0, 0, 222, 0, 223, 0, 224, 0, 196, 197, 0,
  227, 0, 0, 0, 163, 204, 0, 0, 233, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 3072, 0, 196, 197, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 196, 197, 0, 0, 0, 0, 0, 163, 0, 0, 232, 0, 234, 0, 0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 18432, 0, 0, 131, 0, 0, 0, 0, 5224, 5224, 139, 0, 0, 0, 0, 0, 147, 0, 149, 0, 0, 0, 0, 0, 0, 0, 157, 0, 159,
  0, 0, 163, 164, 0, 0, 0, 163, 0, 0, 5224, 139, 0, 0, 0, 0, 0, 5224, 0, 0, 0, 74, 75, 76, 77, 78, 79, 0, 196, 197, 0,
  245, 246, 0, 0, 0, 0, 251, 0, 253, 0, 0, 255, 0, 0, 132, 0, 0, 0, 0, 5224, 5224, 139, 0, 0, 0, 0, 0, 147, 0, 149, 0,
  0, 0, 0, 0, 189, 0, 157, 0, 159, 0, 196, 197, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 2121, 0, 0, 0, 0,
  128, 0, 0, 0, 0, 0, 0, 5224, 5224, 139, 0, 0, 0, 0, 144, 147, 0, 163, 0, 165, 0, 0, 163, 0, 0, 5224, 139, 0, 0, 0, 0,
  0, 5224, 0, 0, 0, 3584, 75, 4096, 77, 4608, 0, 0, 196, 197, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 5224, 5224, 0,
  0, 0, 0, 0, 0, 0, 169, 0, 5224, 139, 0, 0, 0, 0, 0, 8785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 95, 127, 0, 163, 0,
  0, 0, 0, 163, 0, 0, 5224, 139, 174, 0, 0, 0, 0, 86, 0, 0, 2121, 2563, 0, 0, 0, 0, 2121, 2121, 2121, 0, 213, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28427, 0, 0, 0, 0, 278, 0, 277, 0, 277, 277, 0, 0, 0, 0, 0, 0, 0, 0, 171, 5224, 0, 0,
  0, 0, 0, 0, 0, 2121, 2121, 90, 0, 0, 0, 0, 0, 2121, 0, 0, 0, 0, 0, 90, 8785, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
  95, 0, 0, 133, 0, 0, 0, 0, 5224, 5224, 139, 0, 0, 0, 0, 0, 147, 0, 149, 0, 0, 0, 0, 188, 0, 0, 157, 0, 159, 0, 149, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 157, 157, 159, 159, 0, 161, 0, 0, 163, 0, 200, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 262, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 201, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0,
  163, 0, 0, 5224, 139, 0, 0, 0, 177, 0, 0, 147, 0, 149, 0, 0, 0, 187, 0, 0, 0, 157, 0, 159, 0, 0, 147, 0, 149, 0, 0,
  186, 0, 0, 0, 0, 157, 0, 159, 0, 0, 147, 0, 149, 184, 0, 0, 0, 0, 0, 0, 157, 0, 159, 0, 0, 84, 0, 0, 0, 0, 2121, 2563,
  0, 0, 0, 0, 2121, 2121, 2121, 0, 2121, 2121, 91, 0, 0, 0, 0, 0, 2121, 0, 0, 0, 0, 0, 91, 149, 0, 0, 0, 0, 0, 0, 0,
  156, 0, 157, 157, 159, 159, 0, 0, 0, 196, 197, 0, 0, 0, 0, 0, 21155, 0, 0, 0, 0, 0, 5224, 0, 0, 2121, 74, 75, 76, 77,
  78, 79, 114, 196, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27136, 0, 0, 0, 74, 76, 78, 0, 0, 9216, 0, 0, 0, 0, 0, 0, 0, 261,
  0, 0, 264, 265, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 163, 0, 0, 5224, 139, 0, 0, 176, 0, 178, 179, 0, 147, 0, 149, 0, 185,
  0, 0, 0, 0, 190, 157, 0, 159, 0, 0, 163, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5224, 139, 0, 0, 0, 0, 0, 195, 0,
  163, 0, 0, 0, 0, 163, 0, 0, 0, 206, 0, 0, 210, 0, 0, 163, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 211, 235, 0, 236, 0,
  0, 239, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 5224, 5224, 139, 0, 0, 0, 0, 0, 147, 196, 197, 0, 0, 0, 247, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 93, 2121, 0, 0, 0, 0, 17920, 18944, 0, 0, 277, 0, 277, 277, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 0, 0, 0,
  0, 0, 8785, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 94, 95, 0, 0, 163, 0, 0, 0, 0, 163, 0, 0, 0, 0, 207, 0, 0, 0, 0,
  279, 0, 280, 280, 0, 0, 0, 0, 0, 0, 0, 0, 5224, 5224, 139, 0, 0, 142, 0, 0, 147, 0, 0, 163, 199, 0, 0, 0, 163, 0, 0,
  0, 0, 0, 0, 0, 0, 2563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 8785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
  94, 95, 0, 0, 163, 0, 0, 0, 0, 163, 0, 0, 0, 0, 208, 0, 0, 0, 0, 12390, 12390, 0, 0, 0, 112, 113, 76, 77, 0, 0, 0, 0,
  238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 157, 159, 159, 23552, 0,
  0, 163, 0, 0, 0, 0, 163, 0, 204, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 2121, 0, 0, 0, 0, 0, 0, 24576, 196, 197, 0, 0, 0,
  0, 0, 163, 0, 0, 0, 0, 0, 5224, 0, 0, 2121, 74, 75, 76, 77, 78, 79, 0, 196, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25600, 0,
  0, 0, 0, 215, 0, 216, 0, 0, 0, 0, 0, 0, 0, 0, 223, 149, 0, 0, 0, 0, 153, 0, 0, 0, 0, 157, 157, 159, 159, 0, 0, 0, 196,
  197, 0, 0, 0, 229, 0, 163, 0, 0, 0, 0, 0, 5224, 0, 0, 2121, 74, 75, 76, 77, 0, 0, 0, 149, 0, 0, 0, 152, 0, 0, 0, 0, 0,
  157, 157, 159, 159, 0, 0, 0, 196, 197, 0, 0, 228, 0, 0, 163, 0, 0, 0, 0, 0, 5224, 0, 0, 0, 74, 3584, 76, 4096, 78,
  4608, 0, 0, 2121, 2121, 0, 0, 0, 0, 85, 0, 2121, 0, 0, 0, 0, 0, 0, 215, 216, 0, 0, 0, 0, 29696, 0, 223, 224, 8785, 0,
  0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 122, 94, 95, 0, 0, 163, 0, 0, 0, 0, 163, 0, 204, 205, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 92, 2121, 0, 0, 0, 0, 0, 257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30208, 0, 0, 8785, 0, 0, 0,
  117, 0, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 0, 163, 0, 0, 0, 0, 163, 169, 204, 0, 0, 0, 0, 0, 0, 0, 19456, 0, 0, 0, 0, 0,
  0, 0, 0, 7680, 0, 0, 0, 0, 0, 0, 0, 256, 0, 33280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1537, 1537, 1537, 1537,
  1537, 8785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32256, 0, 94, 95, 0, 0, 163, 0, 0, 0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 5225,
  5258, 0, 0, 0, 0, 0, 0, 0, 5224, 5224, 139, 0, 0, 0, 0, 145, 147, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  21504, 149, 0, 0, 0, 0, 0, 154, 0, 0, 0, 157, 157, 159, 159, 0, 0, 0, 196, 197, 6144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  2121, 0, 0, 0, 0, 0, 2121, 2121, 0, 0, 0, 0, 86, 0, 2121, 0, 0, 0, 0, 0, 0, 215, 216, 0, 0, 242, 0, 0, 0, 223, 224,
  149, 0, 0, 0, 0, 0, 0, 0, 0, 33792, 157, 157, 159, 159, 0, 0, 0, 196, 226, 0, 0, 0, 0, 0, 198, 0, 0, 0, 0, 0, 136, 0,
  5224, 5224, 0, 0, 0, 0, 0, 0, 146, 8785, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 0, 163, 0, 0, 0, 202, 163,
  0, 0, 0, 0, 0, 209, 0, 0, 0, 196, 197, 0, 0, 0, 0, 0, 197, 0, 0, 0, 0, 0, 0, 260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
  0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 168, 170, 0, 5224, 139, 0, 0, 0, 0, 0, 5224, 0, 108, 2121, 74, 75, 76, 77, 78, 79, 0,
  0, 181, 147, 183, 149, 0, 0, 0, 0, 0, 0, 0, 157, 192, 159, 194
);

(:~
 : The DFA-state to expected-token-set mapping.
 :)
declare variable $p:EXPECTED as xs:integer+ :=
(
  4, 68, 132, 188, 222, 206, 215, 303, 305, 211, 219, 241, 251, 231, 484, 255, 259, 271, 278, 285, 281, 300, 244, 247,
  209, 228, 232, 295, 312, 315, 291, 411, 225, 305, 294, 296, 267, 405, 319, 305, 413, 328, 305, 262, 266, 336, 408,
  305, 411, 414, 305, 294, 264, 381, 337, 410, 305, 412, 210, 294, 267, 385, 305, 458, 438, 384, 305, 305, 335, 410,
  305, 341, 305, 350, 305, 305, 305, 288, 360, 232, 357, 344, 322, 346, 354, 438, 370, 374, 233, 274, 378, 389, 305,
  305, 402, 363, 445, 424, 393, 399, 324, 418, 330, 443, 304, 425, 305, 395, 323, 431, 437, 331, 444, 305, 423, 394,
  237, 429, 435, 305, 362, 303, 421, 305, 395, 476, 430, 436, 442, 303, 305, 366, 478, 449, 363, 365, 477, 462, 364,
  476, 466, 473, 470, 482, 305, 305, 305, 305, 305, 452, 305, 305, 237, 457, 234, 455, 305, 455, 305, 456, 237, 305,
  305, 305, 305, 307, 305, 236, 305, 305, 305, 305, 305, 307, 235, 305, 305, 305, 305, 305, 305, 305, 308, 305, 305,
  305, 305, 305, 305, 305, 306, 305, 305, 305, 305, 305, 307, 305, 305, 305, 305, 305, 305, 305, 305, 305, 128, 256,
  8192, 65536, 1048576, 0, 0, 0, 12, 131072, 1048576, 4194304, 16777216, 20, 1048580, 4, 4, 8, 16, 64, 8192, 1048576, 0,
  0, 0, 134217728, -2147483648, 0, 0, 0, 2, 0, 0, 0, 4, 4, 4194312, 33554440, 8, 64, 64, 128, 256, 256, 8192, 128,
  16908288, 1140850688, 67108864, 1140850692, 67108868, 134217732, -2147483644, 4, 34603016, -2147483640, 32, 32, 32,
  32, 0, 1024, 2048, 262144, 524288, 33554432, 201326592, 1140850688, 0, 0, 0, 234882048, 3078, 34603020, 16908356,
  3076, 805306372, 3076, 1946157060, 201326596, 1140850692, 2883648, 0, 0, 1, 512, 32768, 3072, 0, 0, 32, 32, 0, 0,
  8412160, 8412672, 35844, 33554432, 67108864, 0, 0, 0, 0, 1, 0, 0, 0, 3072, 2883584, 3072, 16384, 7168, 512, 5120, 512,
  32768, 1024, 0, 0, 0, 116, 16384, 64, 1048576, 0, 0, 0, 2097152, 536870912, 0, 524288, 2097152, 0, 2048, 16384, 0,
  2097152, 0, 4096, 0, 0, 1024, 2098176, 134218752, 4096, 0, 4096, 4096, -2147479552, 100663296, 1073741824, 0, 0, 512,
  1024, 4096, 2097152, 536870912, -2147483648, 0, 0, 8, 0, 4, 134218752, 0, 1024, 100663296, 40960, 0, 0, -1610608640,
  10, 3072, 266, 2048, 2048, 262144, 524288, 2097152, 0, 4096, 0, 130, 130, 268435572, 31408128, 32768, 0, 0, 8, 256, 0,
  264, 0, 128, 0, 0, 4096, 2097152, 1024, 2048, 16384, 16384, 4096, 0, 0, 0, 64, 64, 64, 1048576, 196608, 1835008,
  29360128, 0, 0, 32768, 0, 0, 0, 8192, 32768, 48, 64, 16384, 196608, 1572864, 12582912, 1572864, 12582912, 16777216, 0,
  0, 0, 1024, 0, 536870912, -2147483648, 0, 33554432, 67108864, 1073741824, 1048576, 12582912, 16777216, 0, 1, 4, 0, 4,
  4, 0, 0, 0, 1048576, 65536, 12582912, 16777216, 536870912, 64, 65536, 8388608, 16777216, 4, 16, 64, -2147483648, 0, 8,
  0, 4, 16, 32, 64, 196608, 0, 64, 0, 0, 0, 33554444
);

(:~
 : The token-string table.
 :)
declare variable $p:TOKEN as xs:string+ :=
(
  "(0)",
  "EOF",
  "S",
  "Name",
  "Nmtoken",
  "EntityValue",
  "AttValue",
  "SystemLiteral",
  "PubidLiteral",
  "CharData",
  "Comment",
  "PI",
  "CDSect",
  "VersionNum",
  "CharRef",
  "PEReference",
  "EncName",
  "'""'",
  "'#FIXED'",
  "'#IMPLIED'",
  "'#PCDATA'",
  "'#REQUIRED'",
  "'%'",
  "'&amp;'",
  "''''",
  "'('",
  "')'",
  "')*'",
  "'*'",
  "'+'",
  "','",
  "'/>'",
  "';'",
  "'<'",
  "'<!ATTLIST'",
  "'<!DOCTYPE'",
  "'<!ELEMENT'",
  "'<!ENTITY'",
  "'<!NOTATION'",
  "'</'",
  "'<?xml'",
  "'='",
  "'>'",
  "'?'",
  "'?>'",
  "'ANY'",
  "'CDATA'",
  "'EMPTY'",
  "'ENTITIES'",
  "'ENTITY'",
  "'ID'",
  "'IDREF'",
  "'IDREFS'",
  "'NDATA'",
  "'NMTOKEN'",
  "'NMTOKENS'",
  "'NOTATION'",
  "'PUBLIC'",
  "'SYSTEM'",
  "'['",
  "']'",
  "'encoding'",
  "'no'",
  "'standalone'",
  "'version'",
  "'yes'",
  "'|'"
);

(:~
 : Match next token in input string, starting at given index, using
 : the DFA entry state for the set of tokens that are expected in
 : the current context.
 :
 : @param $input the input string.
 : @param $begin the index where to start in input string.
 : @param $token-set the expected token set id.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:match($input as xs:string,
                         $begin as xs:integer,
                         $token-set as xs:integer) as xs:integer+
{
  let $result := $p:INITIAL[1 + $token-set]
  return p:transition($input,
                      $begin,
                      $begin,
                      $begin,
                      $result,
                      $result mod 512,
                      0)
};

(:~
 : The DFA state transition function. If we are in a valid DFA state, save
 : it's result annotation, consume one input codepoint, calculate the next
 : state, and use tail recursion to do the same again. Otherwise, return
 : any valid result or a negative DFA state id in case of an error.
 :
 : @param $input the input string.
 : @param $begin the begin index of the current token in the input string.
 : @param $current the index of the current position in the input string.
 : @param $end the end index of the result in the input string.
 : @param $result the result code.
 : @param $current-state the current DFA state.
 : @param $previous-state the  previous DFA state.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:transition($input as xs:string,
                              $begin as xs:integer,
                              $current as xs:integer,
                              $end as xs:integer,
                              $result as xs:integer,
                              $current-state as xs:integer,
                              $previous-state as xs:integer)
{
  if ($current-state eq 0) then
    let $result := $result idiv 512
    let $end := if ($end gt string-length($input)) then string-length($input) + 1 else $end
    return
      if ($result ne 0) then
      (
        $result - 1,
        $begin,
        $end
      )
      else
      (
        - $previous-state,
        $begin,
        $current - 1
      )
  else
    let $c0 := (string-to-codepoints(substring($input, $current, 1)), 0)[1]
    let $c1 :=
      if ($c0 < 128) then
        $p:MAP0[1 + $c0]
      else if ($c0 < 55296) then
        let $c1 := $c0 idiv 16
        let $c2 := $c1 idiv 32
        return $p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]
      else
        p:map2($c0, 1, 5)
    let $current := $current + 1
    let $i0 := 512 * $c1 + $current-state - 1
    let $i1 := $i0 idiv 16
    let $next-state := $p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]
    return
      if ($next-state > 511) then
        p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
      else
        p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
};

(:~
 : Recursively translate one 32-bit chunk of an expected token bitset
 : to the corresponding sequence of token strings.
 :
 : @param $result the result of previous recursion levels.
 : @param $chunk the 32-bit chunk of the expected token bitset.
 : @param $base-token-code the token code of bit 0 in the current chunk.
 : @return the set of token strings.
 :)
declare function p:token($result as xs:string*,
                         $chunk as xs:integer,
                         $base-token-code as xs:integer)
{
  if ($chunk = 0) then
    $result
  else
    p:token
    (
      ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
      if ($chunk < 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
      $base-token-code + 1
    )
};

(:~
 : Calculate expected token set for a given DFA state as a sequence
 : of strings.
 :
 : @param $state the DFA state.
 : @return the set of token strings.
 :)
declare function p:expected-token-set($state as xs:integer) as xs:string*
{
  if ($state > 0) then
    for $t in 0 to 2
    let $i0 := $t * 280 + $state - 1
    let $i1 := $i0 idiv 4
    let $i2 := $i1 idiv 64
    return p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 mod 64 + $p:EXPECTED[$i2 + 1] + 1] + 1], $t * 32 + 1)
  else
    ()
};

(:~
 : Classify codepoint by doing a tail recursive binary search for a
 : matching codepoint range entry in MAP2, the codepoint to charclass
 : map for codepoints above the surrogate block.
 :
 : @param $c the codepoint.
 : @param $lo the binary search lower bound map index.
 : @param $hi the binary search upper bound map index.
 : @return the character class.
 :)
declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer
{
  if ($lo > $hi) then
    0
  else
    let $m := ($hi + $lo) idiv 2
    return
      if ($p:MAP2[$m] > $c) then
        p:map2($c, $lo, $m - 1)
      else if ($p:MAP2[5 + $m] < $c) then
        p:map2($c, $m + 1, $hi)
      else
        $p:MAP2[10 + $m]
};

(:~
 : Parse ETag.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ETag($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(39, $input, $state)               (: '</' :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:lookahead1(27, $input, $state)            (: S | '>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(16, $input, $state)            (: '>' :)
  let $state := p:consume(42, $input, $state)               (: '>' :)
  return $state
};

(:~
 : Parse EntityRef.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EntityRef($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(23, $input, $state)               (: '&' :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:lookahead1(14, $input, $state)            (: ';' :)
  let $state := p:consume(32, $input, $state)               (: ';' :)
  return $state
};

(:~
 : Parse Reference.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Reference($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 23) then                       (: '&' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-EntityRef($input, $state)
      return $state
    else
      let $state := p:consume(14, $input, $state)           (: CharRef :)
      return $state
  return $state
};

(:~
 : Parse the 1st loop of production content (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-content-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(68, $input, $state)          (: Comment | PI | CDSect | CharRef | '&' | '<' | '</' :)
    return
      if ($state[$p:l1] = 39) then                          (: '</' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 33) then                 (: '<' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-element($input, $state)
            return $state
          else if ($state[$p:l1] = 12) then                 (: CDSect :)
            let $state := p:consume(12, $input, $state)     (: CDSect :)
            return $state
          else if ($state[$p:l1] = 11) then                 (: PI :)
            let $state := p:consume(11, $input, $state)     (: PI :)
            return $state
          else if ($state[$p:l1] = 10) then                 (: Comment :)
            let $state := p:consume(10, $input, $state)     (: Comment :)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Reference($input, $state)
            return $state
        let $state := p:lookahead1(69, $input, $state)      (: CharData | Comment | PI | CDSect | CharRef | '&' | '<' |
                                                               '</' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 9) then                  (: CharData :)
            let $state := p:consume(9, $input, $state)      (: CharData :)
            return $state
          else
            $state
        return p:parse-content-1($input, $state)
};

(:~
 : Parse content.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-content($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(69, $input, $state)            (: CharData | Comment | PI | CDSect | CharRef | '&' | '<' |
                                                               '</' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 9) then                        (: CharData :)
      let $state := p:consume(9, $input, $state)            (: CharData :)
      return $state
    else
      $state
  let $state := p:parse-content-1($input, $state)
  return $state
};

(:~
 : Parse Attribute.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Attribute($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Eq($input, $state)
  let $state := p:lookahead1(3, $input, $state)             (: AttValue :)
  let $state := p:consume(6, $input, $state)                (: AttValue :)
  return $state
};

(:~
 : Parse the 1st loop of production element (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-element-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(47, $input, $state)          (: S | '/>' | '>' :)
    let $state :=
      if ($state[$p:l1] eq 2) then                          (: S :)
        let $state := p:lookahead2(50, $input, $state)      (: Name | '/>' | '>' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 386) then                        (: S Name :)
        $state
      else
        let $state := p:consume(2, $input, $state)          (: S :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Attribute($input, $state)
        return p:parse-element-1($input, $state)
};

(:~
 : Parse element.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-element($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(33, $input, $state)               (: '<' :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:parse-element-1($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(37, $input, $state)            (: '/>' | '>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 31) then                       (: '/>' :)
      let $state := p:consume(31, $input, $state)           (: '/>' :)
      return $state
    else
      let $state := p:consume(42, $input, $state)           (: '>' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-content($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ETag($input, $state)
      return $state
  return $state
};

(:~
 : Parse DeclSep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DeclSep($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 15) then                       (: PEReference :)
      let $state := p:consume(15, $input, $state)           (: PEReference :)
      return $state
    else
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
  return $state
};

(:~
 : Parse ExternalOrPublicID.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ExternalOrPublicID($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(41, $input, $state)            (: 'PUBLIC' | 'SYSTEM' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 58) then                       (: 'SYSTEM' :)
      let $state := p:consume(58, $input, $state)           (: 'SYSTEM' :)
      let $state := p:lookahead1(0, $input, $state)         (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      let $state := p:lookahead1(4, $input, $state)         (: SystemLiteral :)
      let $state := p:consume(7, $input, $state)            (: SystemLiteral :)
      return $state
    else
      let $state := p:consume(57, $input, $state)           (: 'PUBLIC' :)
      let $state := p:lookahead1(0, $input, $state)         (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      let $state := p:lookahead1(5, $input, $state)         (: PubidLiteral :)
      let $state := p:consume(8, $input, $state)            (: PubidLiteral :)
      let $state := p:lookahead1(27, $input, $state)        (: S | '>' :)
      let $state :=
        if ($state[$p:l1] eq 2) then                        (: S :)
          let $state := p:lookahead2(32, $input, $state)    (: SystemLiteral | '>' :)
          return $state
        else
          ($state[$p:l1], subsequence($state, $p:lk + 1))
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:lk] = 898) then                  (: S SystemLiteral :)
          let $state := p:consume(2, $input, $state)        (: S :)
          let $state := p:lookahead1(4, $input, $state)     (: SystemLiteral :)
          let $state := p:consume(7, $input, $state)        (: SystemLiteral :)
          return $state
        else
          $state
      return $state
  return $state
};

(:~
 : Parse NotationDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NotationDecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(38, $input, $state)               (: '<!NOTATION' :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-ExternalOrPublicID($input, $state)
  let $state := p:lookahead1(27, $input, $state)            (: S | '>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(16, $input, $state)            (: '>' :)
  let $state := p:consume(42, $input, $state)               (: '>' :)
  return $state
};

(:~
 : Parse PEDef.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PEDef($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(51, $input, $state)            (: EntityValue | 'PUBLIC' | 'SYSTEM' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 5) then                        (: EntityValue :)
      let $state := p:consume(5, $input, $state)            (: EntityValue :)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ExternalID($input, $state)
      return $state
  return $state
};

(:~
 : Parse PEDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PEDecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(37, $input, $state)               (: '<!ENTITY' :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(10, $input, $state)            (: '%' :)
  let $state := p:consume(22, $input, $state)               (: '%' :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-PEDef($input, $state)
  let $state := p:lookahead1(27, $input, $state)            (: S | '>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(16, $input, $state)            (: '>' :)
  let $state := p:consume(42, $input, $state)               (: '>' :)
  return $state
};

(:~
 : Parse NDataDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NDataDecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(18, $input, $state)            (: 'NDATA' :)
  let $state := p:consume(53, $input, $state)               (: 'NDATA' :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  return $state
};

(:~
 : Parse EntityDef.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EntityDef($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(51, $input, $state)            (: EntityValue | 'PUBLIC' | 'SYSTEM' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 5) then                        (: EntityValue :)
      let $state := p:consume(5, $input, $state)            (: EntityValue :)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ExternalID($input, $state)
      let $state := p:lookahead1(27, $input, $state)        (: S | '>' :)
      let $state :=
        if ($state[$p:l1] eq 2) then                        (: S :)
          let $state := p:lookahead2(38, $input, $state)    (: '>' | 'NDATA' :)
          return $state
        else
          ($state[$p:l1], subsequence($state, $p:lk + 1))
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:lk] = 6786) then                 (: S 'NDATA' :)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-NDataDecl($input, $state)
          return $state
        else
          $state
      return $state
  return $state
};

(:~
 : Parse GEDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GEDecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(37, $input, $state)               (: '<!ENTITY' :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-EntityDef($input, $state)
  let $state := p:lookahead1(27, $input, $state)            (: S | '>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(16, $input, $state)            (: '>' :)
  let $state := p:consume(42, $input, $state)               (: '>' :)
  return $state
};

(:~
 : Parse EntityDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EntityDecl($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:l1] eq 37) then                           (: '<!ENTITY' :)
      let $state := p:lookahead2(0, $input, $state)         (: S :)
      let $state :=
        if ($state[$p:lk] eq 293) then                      (: '<!ENTITY' S :)
          let $state := p:lookahead3(29, $input, $state)    (: Name | '%' :)
          return $state
        else
          $state
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 49445) then                    (: '<!ENTITY' S Name :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-GEDecl($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-PEDecl($input, $state)
      return $state
  return $state
};

(:~
 : Parse DefaultDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DefaultDecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(62, $input, $state)            (: AttValue | '#FIXED' | '#IMPLIED' | '#REQUIRED' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 21) then                       (: '#REQUIRED' :)
      let $state := p:consume(21, $input, $state)           (: '#REQUIRED' :)
      return $state
    else if ($state[$p:l1] = 19) then                       (: '#IMPLIED' :)
      let $state := p:consume(19, $input, $state)           (: '#IMPLIED' :)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 18) then                   (: '#FIXED' :)
          let $state := p:consume(18, $input, $state)       (: '#FIXED' :)
          let $state := p:lookahead1(0, $input, $state)     (: S :)
          let $state := p:consume(2, $input, $state)        (: S :)
          return $state
        else
          $state
      let $state := p:lookahead1(3, $input, $state)         (: AttValue :)
      let $state := p:consume(6, $input, $state)            (: AttValue :)
      return $state
  return $state
};

(:~
 : Parse the 1st loop of production Enumeration (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Enumeration-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(45, $input, $state)          (: S | ')' | '|' :)
    let $state :=
      if ($state[$p:l1] eq 2) then                          (: S :)
        let $state := p:lookahead2(35, $input, $state)      (: ')' | '|' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 66                               (: '|' :)
      and $state[$p:lk] != 8450) then                       (: S '|' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 2) then                  (: S :)
            let $state := p:consume(2, $input, $state)      (: S :)
            return $state
          else
            $state
        let $state := p:lookahead1(22, $input, $state)      (: '|' :)
        let $state := p:consume(66, $input, $state)         (: '|' :)
        let $state := p:lookahead1(24, $input, $state)      (: S | Nmtoken :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 2) then                  (: S :)
            let $state := p:consume(2, $input, $state)      (: S :)
            return $state
          else
            $state
        let $state := p:lookahead1(2, $input, $state)       (: Nmtoken :)
        let $state := p:consume(4, $input, $state)          (: Nmtoken :)
        return p:parse-Enumeration-1($input, $state)
};

(:~
 : Parse Enumeration.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Enumeration($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(25, $input, $state)               (: '(' :)
  let $state := p:lookahead1(24, $input, $state)            (: S | Nmtoken :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(2, $input, $state)             (: Nmtoken :)
  let $state := p:consume(4, $input, $state)                (: Nmtoken :)
  let $state := p:parse-Enumeration-1($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(13, $input, $state)            (: ')' :)
  let $state := p:consume(26, $input, $state)               (: ')' :)
  return $state
};

(:~
 : Parse the 1st loop of production NotationType (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NotationType-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(45, $input, $state)          (: S | ')' | '|' :)
    let $state :=
      if ($state[$p:l1] eq 2) then                          (: S :)
        let $state := p:lookahead2(35, $input, $state)      (: ')' | '|' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 66                               (: '|' :)
      and $state[$p:lk] != 8450) then                       (: S '|' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 2) then                  (: S :)
            let $state := p:consume(2, $input, $state)      (: S :)
            return $state
          else
            $state
        let $state := p:lookahead1(22, $input, $state)      (: '|' :)
        let $state := p:consume(66, $input, $state)         (: '|' :)
        let $state := p:lookahead1(23, $input, $state)      (: S | Name :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 2) then                  (: S :)
            let $state := p:consume(2, $input, $state)      (: S :)
            return $state
          else
            $state
        let $state := p:lookahead1(1, $input, $state)       (: Name :)
        let $state := p:consume(3, $input, $state)          (: Name :)
        return p:parse-NotationType-1($input, $state)
};

(:~
 : Parse NotationType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NotationType($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(56, $input, $state)               (: 'NOTATION' :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(12, $input, $state)            (: '(' :)
  let $state := p:consume(25, $input, $state)               (: '(' :)
  let $state := p:lookahead1(23, $input, $state)            (: S | Name :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:parse-NotationType-1($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(13, $input, $state)            (: ')' :)
  let $state := p:consume(26, $input, $state)               (: ')' :)
  return $state
};

(:~
 : Parse EnumeratedType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EnumeratedType($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 56) then                       (: 'NOTATION' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-NotationType($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Enumeration($input, $state)
      return $state
  return $state
};

(:~
 : Parse TokenizedType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TokenizedType($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 50) then                       (: 'ID' :)
      let $state := p:consume(50, $input, $state)           (: 'ID' :)
      return $state
    else if ($state[$p:l1] = 51) then                       (: 'IDREF' :)
      let $state := p:consume(51, $input, $state)           (: 'IDREF' :)
      return $state
    else if ($state[$p:l1] = 52) then                       (: 'IDREFS' :)
      let $state := p:consume(52, $input, $state)           (: 'IDREFS' :)
      return $state
    else if ($state[$p:l1] = 49) then                       (: 'ENTITY' :)
      let $state := p:consume(49, $input, $state)           (: 'ENTITY' :)
      return $state
    else if ($state[$p:l1] = 48) then                       (: 'ENTITIES' :)
      let $state := p:consume(48, $input, $state)           (: 'ENTITIES' :)
      return $state
    else if ($state[$p:l1] = 54) then                       (: 'NMTOKEN' :)
      let $state := p:consume(54, $input, $state)           (: 'NMTOKEN' :)
      return $state
    else
      let $state := p:consume(55, $input, $state)           (: 'NMTOKENS' :)
      return $state
  return $state
};

(:~
 : Parse StringType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-StringType($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(46, $input, $state)               (: 'CDATA' :)
  return $state
};

(:~
 : Parse AttType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AttType($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(71, $input, $state)            (: '(' | 'CDATA' | 'ENTITIES' | 'ENTITY' | 'ID' | 'IDREF' |
                                                               'IDREFS' | 'NMTOKEN' | 'NMTOKENS' | 'NOTATION' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 46) then                       (: 'CDATA' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-StringType($input, $state)
      return $state
    else if ($state[$p:l1] = 25                             (: '(' :)
          or $state[$p:l1] = 56) then                       (: 'NOTATION' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-EnumeratedType($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-TokenizedType($input, $state)
      return $state
  return $state
};

(:~
 : Parse AttDef.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AttDef($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-AttType($input, $state)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-DefaultDecl($input, $state)
  return $state
};

(:~
 : Parse the 1st loop of production AttlistDecl (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AttlistDecl-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(27, $input, $state)          (: S | '>' :)
    let $state :=
      if ($state[$p:l1] eq 2) then                          (: S :)
        let $state := p:lookahead2(31, $input, $state)      (: Name | '>' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 386) then                        (: S Name :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AttDef($input, $state)
        return p:parse-AttlistDecl-1($input, $state)
};

(:~
 : Parse AttlistDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AttlistDecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(34, $input, $state)               (: '<!ATTLIST' :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:parse-AttlistDecl-1($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(16, $input, $state)            (: '>' :)
  let $state := p:consume(42, $input, $state)               (: '>' :)
  return $state
};

(:~
 : Parse cp.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-cp($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(30, $input, $state)            (: Name | '(' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 3) then                        (: Name :)
      let $state := p:consume(3, $input, $state)            (: Name :)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-choiceOrSeq($input, $state)
      return $state
  let $state := p:lookahead1(67, $input, $state)            (: S | ')' | '*' | '+' | ',' | '?' | '|' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 28                             (: '*' :)
          or $state[$p:l1] = 29                             (: '+' :)
          or $state[$p:l1] = 43) then                       (: '?' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 43) then                   (: '?' :)
          let $state := p:consume(43, $input, $state)       (: '?' :)
          return $state
        else if ($state[$p:l1] = 28) then                   (: '*' :)
          let $state := p:consume(28, $input, $state)       (: '*' :)
          return $state
        else
          let $state := p:consume(29, $input, $state)       (: '+' :)
          return $state
      return $state
    else
      $state
  return $state
};

(:~
 : Parse the 1st loop of production choiceOrSeq (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-choiceOrSeq-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:consume(66, $input, $state)             (: '|' :)
    let $state := p:lookahead1(43, $input, $state)          (: S | Name | '(' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 2) then                      (: S :)
        let $state := p:consume(2, $input, $state)          (: S :)
        return $state
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-cp($input, $state)
    let $state := p:lookahead1(45, $input, $state)          (: S | ')' | '|' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 2) then                      (: S :)
        let $state := p:consume(2, $input, $state)          (: S :)
        return $state
      else
        $state
    let $state := p:lookahead1(35, $input, $state)          (: ')' | '|' :)
    return
      if ($state[$p:l1] != 66) then                         (: '|' :)
        $state
      else
        p:parse-choiceOrSeq-1($input, $state)
};

(:~
 : Parse the 2nd loop of production choiceOrSeq (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-choiceOrSeq-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(34, $input, $state)          (: ')' | ',' :)
    return
      if ($state[$p:l1] != 30) then                         (: ',' :)
        $state
      else
        let $state := p:consume(30, $input, $state)         (: ',' :)
        let $state := p:lookahead1(43, $input, $state)      (: S | Name | '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 2) then                  (: S :)
            let $state := p:consume(2, $input, $state)      (: S :)
            return $state
          else
            $state
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-cp($input, $state)
        let $state := p:lookahead1(44, $input, $state)      (: S | ')' | ',' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 2) then                  (: S :)
            let $state := p:consume(2, $input, $state)      (: S :)
            return $state
          else
            $state
        return p:parse-choiceOrSeq-2($input, $state)
};

(:~
 : Parse choiceOrSeq.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-choiceOrSeq($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(25, $input, $state)               (: '(' :)
  let $state := p:lookahead1(43, $input, $state)            (: S | Name | '(' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-cp($input, $state)
  let $state := p:lookahead1(61, $input, $state)            (: S | ')' | ',' | '|' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(54, $input, $state)            (: ')' | ',' | '|' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 66) then                       (: '|' :)
      let $state := p:parse-choiceOrSeq-1($input, $state)
      return $state
    else
      let $state := p:parse-choiceOrSeq-2($input, $state)
      return $state
  let $state := p:consume(26, $input, $state)               (: ')' :)
  return $state
};

(:~
 : Parse children.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-children($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-choiceOrSeq($input, $state)
  let $state := p:lookahead1(65, $input, $state)            (: S | '*' | '+' | '>' | '?' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 2                             (: S :)
         and $state[$p:l1] != 42) then                      (: '>' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 43) then                   (: '?' :)
          let $state := p:consume(43, $input, $state)       (: '?' :)
          return $state
        else if ($state[$p:l1] = 28) then                   (: '*' :)
          let $state := p:consume(28, $input, $state)       (: '*' :)
          return $state
        else
          let $state := p:consume(29, $input, $state)       (: '+' :)
          return $state
      return $state
    else
      $state
  return $state
};

(:~
 : Parse the 1st loop of production Mixed (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Mixed-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(36, $input, $state)          (: ')*' | '|' :)
    return
      if ($state[$p:l1] != 66) then                         (: '|' :)
        $state
      else
        let $state := p:consume(66, $input, $state)         (: '|' :)
        let $state := p:lookahead1(23, $input, $state)      (: S | Name :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 2) then                  (: S :)
            let $state := p:consume(2, $input, $state)      (: S :)
            return $state
          else
            $state
        let $state := p:lookahead1(1, $input, $state)       (: Name :)
        let $state := p:consume(3, $input, $state)          (: Name :)
        let $state := p:lookahead1(46, $input, $state)      (: S | ')*' | '|' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 2) then                  (: S :)
            let $state := p:consume(2, $input, $state)      (: S :)
            return $state
          else
            $state
        return p:parse-Mixed-1($input, $state)
};

(:~
 : Parse Mixed.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Mixed($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(25, $input, $state)               (: '(' :)
  let $state := p:lookahead1(25, $input, $state)            (: S | '#PCDATA' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(9, $input, $state)             (: '#PCDATA' :)
  let $state := p:consume(20, $input, $state)               (: '#PCDATA' :)
  let $state := p:lookahead1(60, $input, $state)            (: S | ')' | ')*' | '|' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(53, $input, $state)            (: ')' | ')*' | '|' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 26) then                       (: ')' :)
      let $state := p:consume(26, $input, $state)           (: ')' :)
      return $state
    else
      let $state := p:parse-Mixed-1($input, $state)
      let $state := p:consume(27, $input, $state)           (: ')*' :)
      return $state
  return $state
};

(:~
 : Parse contentspec.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-contentspec($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(52, $input, $state)            (: '(' | 'ANY' | 'EMPTY' :)
  let $state :=
    if ($state[$p:l1] eq 25) then                           (: '(' :)
      let $state := p:lookahead2(57, $input, $state)        (: S | Name | '#PCDATA' | '(' :)
      let $state :=
        if ($state[$p:lk] eq 281) then                      (: '(' S :)
          let $state := p:lookahead3(49, $input, $state)    (: Name | '#PCDATA' | '(' :)
          return $state
        else
          $state
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 47) then                       (: 'EMPTY' :)
      let $state := p:consume(47, $input, $state)           (: 'EMPTY' :)
      return $state
    else if ($state[$p:lk] = 45) then                       (: 'ANY' :)
      let $state := p:consume(45, $input, $state)           (: 'ANY' :)
      return $state
    else if ($state[$p:lk] = 2585                           (: '(' '#PCDATA' :)
          or $state[$p:lk] = 327961) then                   (: '(' S '#PCDATA' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Mixed($input, $state)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-children($input, $state)
      return $state
  return $state
};

(:~
 : Parse elementdecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-elementdecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(36, $input, $state)               (: '<!ELEMENT' :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-contentspec($input, $state)
  let $state := p:lookahead1(27, $input, $state)            (: S | '>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(16, $input, $state)            (: '>' :)
  let $state := p:consume(42, $input, $state)               (: '>' :)
  return $state
};

(:~
 : Parse markupdecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-markupdecl($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 36) then                       (: '<!ELEMENT' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-elementdecl($input, $state)
      return $state
    else if ($state[$p:l1] = 34) then                       (: '<!ATTLIST' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-AttlistDecl($input, $state)
      return $state
    else if ($state[$p:l1] = 37) then                       (: '<!ENTITY' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-EntityDecl($input, $state)
      return $state
    else if ($state[$p:l1] = 38) then                       (: '<!NOTATION' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-NotationDecl($input, $state)
      return $state
    else if ($state[$p:l1] = 11) then                       (: PI :)
      let $state := p:consume(11, $input, $state)           (: PI :)
      return $state
    else
      let $state := p:consume(10, $input, $state)           (: Comment :)
      return $state
  return $state
};

(:~
 : Parse the 1st loop of production intSubset (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-intSubset-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(70, $input, $state)          (: S | Comment | PI | PEReference | '<!ATTLIST' |
                                                               '<!ELEMENT' | '<!ENTITY' | '<!NOTATION' | ']' :)
    return
      if ($state[$p:l1] = 60) then                          (: ']' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 2                        (: S :)
                or $state[$p:l1] = 15) then                 (: PEReference :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-DeclSep($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-markupdecl($input, $state)
            return $state
        return p:parse-intSubset-1($input, $state)
};

(:~
 : Parse intSubset.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-intSubset($input as xs:string, $state as item()+) as item()+
{
  let $state := p:parse-intSubset-1($input, $state)
  return $state
};

(:~
 : Parse ExternalID.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ExternalID($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(41, $input, $state)            (: 'PUBLIC' | 'SYSTEM' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 58) then                       (: 'SYSTEM' :)
      let $state := p:consume(58, $input, $state)           (: 'SYSTEM' :)
      let $state := p:lookahead1(0, $input, $state)         (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      let $state := p:lookahead1(4, $input, $state)         (: SystemLiteral :)
      let $state := p:consume(7, $input, $state)            (: SystemLiteral :)
      return $state
    else
      let $state := p:consume(57, $input, $state)           (: 'PUBLIC' :)
      let $state := p:lookahead1(0, $input, $state)         (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      let $state := p:lookahead1(5, $input, $state)         (: PubidLiteral :)
      let $state := p:consume(8, $input, $state)            (: PubidLiteral :)
      let $state := p:lookahead1(0, $input, $state)         (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      let $state := p:lookahead1(4, $input, $state)         (: SystemLiteral :)
      let $state := p:consume(7, $input, $state)            (: SystemLiteral :)
      return $state
  return $state
};

(:~
 : Parse doctypedecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-doctypedecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(35, $input, $state)               (: '<!DOCTYPE' :)
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(1, $input, $state)             (: Name :)
  let $state := p:consume(3, $input, $state)                (: Name :)
  let $state := p:lookahead1(48, $input, $state)            (: S | '>' | '[' :)
  let $state :=
    if ($state[$p:l1] eq 2) then                            (: S :)
      let $state := p:lookahead2(63, $input, $state)        (: '>' | 'PUBLIC' | 'SYSTEM' | '[' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 7298                           (: S 'PUBLIC' :)
          or $state[$p:lk] = 7426) then                     (: S 'SYSTEM' :)
      let $state := p:consume(2, $input, $state)            (: S :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ExternalID($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1(48, $input, $state)            (: S | '>' | '[' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(39, $input, $state)            (: '>' | '[' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 59) then                       (: '[' :)
      let $state := p:consume(59, $input, $state)           (: '[' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-intSubset($input, $state)
      let $state := p:consume(60, $input, $state)           (: ']' :)
      let $state := p:lookahead1(27, $input, $state)        (: S | '>' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 2) then                    (: S :)
          let $state := p:consume(2, $input, $state)        (: S :)
          return $state
        else
          $state
      return $state
    else
      $state
  let $state := p:lookahead1(16, $input, $state)            (: '>' :)
  let $state := p:consume(42, $input, $state)               (: '>' :)
  return $state
};

(:~
 : Parse Misc.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Misc($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 10) then                       (: Comment :)
      let $state := p:consume(10, $input, $state)           (: Comment :)
      return $state
    else if ($state[$p:l1] = 11) then                       (: PI :)
      let $state := p:consume(11, $input, $state)           (: PI :)
      return $state
    else
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
  return $state
};

(:~
 : Parse SDDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SDDecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(20, $input, $state)            (: 'standalone' :)
  let $state := p:consume(63, $input, $state)               (: 'standalone' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Eq($input, $state)
  let $state := p:lookahead1(33, $input, $state)            (: '"' | "'" :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 24) then                       (: "'" :)
      let $state := p:consume(24, $input, $state)           (: "'" :)
      let $state := p:lookahead1(42, $input, $state)        (: 'no' | 'yes' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 65) then                   (: 'yes' :)
          let $state := p:consume(65, $input, $state)       (: 'yes' :)
          return $state
        else
          let $state := p:consume(62, $input, $state)       (: 'no' :)
          return $state
      let $state := p:lookahead1(11, $input, $state)        (: "'" :)
      let $state := p:consume(24, $input, $state)           (: "'" :)
      return $state
    else
      let $state := p:consume(17, $input, $state)           (: '"' :)
      let $state := p:lookahead1(42, $input, $state)        (: 'no' | 'yes' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 65) then                   (: 'yes' :)
          let $state := p:consume(65, $input, $state)       (: 'yes' :)
          return $state
        else
          let $state := p:consume(62, $input, $state)       (: 'no' :)
          return $state
      let $state := p:lookahead1(8, $input, $state)         (: '"' :)
      let $state := p:consume(17, $input, $state)           (: '"' :)
      return $state
  return $state
};

(:~
 : Parse EncodingDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EncodingDecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(19, $input, $state)            (: 'encoding' :)
  let $state := p:consume(61, $input, $state)               (: 'encoding' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Eq($input, $state)
  let $state := p:lookahead1(33, $input, $state)            (: '"' | "'" :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 17) then                       (: '"' :)
      let $state := p:consume(17, $input, $state)           (: '"' :)
      let $state := p:lookahead1(7, $input, $state)         (: EncName :)
      let $state := p:consume(16, $input, $state)           (: EncName :)
      let $state := p:lookahead1(8, $input, $state)         (: '"' :)
      let $state := p:consume(17, $input, $state)           (: '"' :)
      return $state
    else
      let $state := p:consume(24, $input, $state)           (: "'" :)
      let $state := p:lookahead1(7, $input, $state)         (: EncName :)
      let $state := p:consume(16, $input, $state)           (: EncName :)
      let $state := p:lookahead1(11, $input, $state)        (: "'" :)
      let $state := p:consume(24, $input, $state)           (: "'" :)
      return $state
  return $state
};

(:~
 : Parse Eq.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Eq($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(26, $input, $state)            (: S | '=' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(15, $input, $state)            (: '=' :)
  let $state := p:consume(41, $input, $state)               (: '=' :)
  let $state := p:lookahead1(58, $input, $state)            (: S | AttValue | '"' | "'" :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  return $state
};

(:~
 : Parse VersionInfo.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-VersionInfo($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(0, $input, $state)             (: S :)
  let $state := p:consume(2, $input, $state)                (: S :)
  let $state := p:lookahead1(21, $input, $state)            (: 'version' :)
  let $state := p:consume(64, $input, $state)               (: 'version' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Eq($input, $state)
  let $state := p:lookahead1(33, $input, $state)            (: '"' | "'" :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 24) then                       (: "'" :)
      let $state := p:consume(24, $input, $state)           (: "'" :)
      let $state := p:lookahead1(6, $input, $state)         (: VersionNum :)
      let $state := p:consume(13, $input, $state)           (: VersionNum :)
      let $state := p:lookahead1(11, $input, $state)        (: "'" :)
      let $state := p:consume(24, $input, $state)           (: "'" :)
      return $state
    else
      let $state := p:consume(17, $input, $state)           (: '"' :)
      let $state := p:lookahead1(6, $input, $state)         (: VersionNum :)
      let $state := p:consume(13, $input, $state)           (: VersionNum :)
      let $state := p:lookahead1(8, $input, $state)         (: '"' :)
      let $state := p:consume(17, $input, $state)           (: '"' :)
      return $state
  return $state
};

(:~
 : Parse XMLDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-XMLDecl($input as xs:string, $state as item()+) as item()+
{
  let $state := p:consume(40, $input, $state)               (: '<?xml' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-VersionInfo($input, $state)
  let $state := p:lookahead1(28, $input, $state)            (: S | '?>' :)
  let $state :=
    if ($state[$p:l1] eq 2) then                            (: S :)
      let $state := p:lookahead2(55, $input, $state)        (: '?>' | 'encoding' | 'standalone' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 7810) then                     (: S 'encoding' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-EncodingDecl($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1(28, $input, $state)            (: S | '?>' :)
  let $state :=
    if ($state[$p:l1] eq 2) then                            (: S :)
      let $state := p:lookahead2(40, $input, $state)        (: '?>' | 'standalone' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 8066) then                     (: S 'standalone' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-SDDecl($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1(28, $input, $state)            (: S | '?>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 2) then                        (: S :)
      let $state := p:consume(2, $input, $state)            (: S :)
      return $state
    else
      $state
  let $state := p:lookahead1(17, $input, $state)            (: '?>' :)
  let $state := p:consume(44, $input, $state)               (: '?>' :)
  return $state
};

(:~
 : Parse the 1st loop of production prolog (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-prolog-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(64, $input, $state)          (: S | Comment | PI | '<' | '<!DOCTYPE' :)
    return
      if ($state[$p:l1] = 33                                (: '<' :)
       or $state[$p:l1] = 35) then                          (: '<!DOCTYPE' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Misc($input, $state)
        return p:parse-prolog-1($input, $state)
};

(:~
 : Parse the 2nd loop of production prolog (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-prolog-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(59, $input, $state)          (: S | Comment | PI | '<' :)
    return
      if ($state[$p:l1] = 33) then                          (: '<' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Misc($input, $state)
        return p:parse-prolog-2($input, $state)
};

(:~
 : Parse prolog.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-prolog($input as xs:string, $state as item()+) as item()+
{
  let $state := p:lookahead1(66, $input, $state)            (: S | Comment | PI | '<' | '<!DOCTYPE' | '<?xml' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 40) then                       (: '<?xml' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-XMLDecl($input, $state)
      return $state
    else
      $state
  let $state := p:parse-prolog-1($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 35) then                       (: '<!DOCTYPE' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-doctypedecl($input, $state)
      let $state := p:parse-prolog-2($input, $state)
      return $state
    else
      $state
  return $state
};

(:~
 : Parse the 1st loop of production document (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-document-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(56, $input, $state)          (: EOF | S | Comment | PI :)
    return
      if ($state[$p:l1] = 1) then                           (: EOF :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Misc($input, $state)
        return p:parse-document-1($input, $state)
};

(:~
 : Parse document.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-document($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-prolog($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-element($input, $state)
  let $state := p:parse-document-1($input, $state)
  let $state := p:consume(1, $input, $state)                (: EOF :)
  return $state
};

(:~
 : Create a textual error message from a parsing error.
 :
 : @param $input the input string.
 : @param $error the parsing error descriptor.
 : @return the error message.
 :)
declare function p:error-message($input as xs:string, $error as element(error)) as xs:string
{
  let $begin := xs:integer($error/@b)
  let $context := string-to-codepoints(substring($input, 1, $begin - 1))
  let $linefeeds := index-of($context, 10)
  let $line := count($linefeeds) + 1
  let $column := ($begin - $linefeeds[last()], $begin)[1]
  return
    string-join
    (
      (
        if ($error/@o) then
          ("syntax error, found ", $p:TOKEN[$error/@o + 1])
        else
          "lexical analysis failed",
        "&#10;",
        "while expecting ",
        if ($error/@x) then
          $p:TOKEN[$error/@x + 1]
        else
          let $expected := p:expected-token-set($error/@s)
          return
          (
            "["[exists($expected[2])],
            string-join($expected, ", "),
            "]"[exists($expected[2])]
          ),
        "&#10;",
        if ($error/@o or $error/@e = $begin) then
          ()
        else
          ("after successfully scanning ", string($error/@e - $begin), " characters beginning "),
        "at line ", string($line), ", column ", string($column), ":&#10;",
        "...", substring($input, $begin, 64), "..."
      ),
      ""
    )
};

(:~
 : Consume one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : lexer state.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:consume($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] eq $code) then
  (
    subsequence($state, $p:l1, 9),
    0, 0, 0,
    subsequence($state, 13)
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      attribute b {$state[$p:b1]},
      attribute e {$state[$p:e1]},
      if ($state[$p:l1] lt 0) then
        attribute s {- $state[$p:l1]}
      else
        (attribute o {$state[$p:l1]}, attribute x {$code})
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Lookahead one token on level 1.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] ne 0) then
    $state
  else
    let $match :=
      (
        p:match($input, $state[$p:e0], $set),
        0, 0, 0
      )
    return
    (
      $match[1],
      subsequence($state, $p:b0, 2),
      $match,
      subsequence($state, 10)
    )
};

(:~
 : Lookahead one token on level 2.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead2($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l2] ne 0) then
      subsequence($state, $p:l2, 6)
    else
    (
      p:match($input, $state[$p:e1], $set),
      0, 0, 0
    )
  return
  (
    $match[1] * 128 + $state[$p:l1],
    subsequence($state, $p:b0, 5),
    $match,
    subsequence($state, 13)
  )
};

(:~
 : Lookahead one token on level 3.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead3($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l3] ne 0) then
      subsequence($state, $p:l3, 3)
    else
      p:match($input, $state[$p:e2], $set)
  return
  (
    $match[1] * 16384 + $state[$p:lk],
    subsequence($state, $p:b0, 8),
    $match,
    subsequence($state, 13)
  )
};

(:~
 : Parse start symbol document from given string.
 :
 : @param $s the string to be parsed.
 : @return the result as generated by parser actions.
 :)
declare function p:parse-document($s as xs:string) as item()*
{
  let $state := (0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false())
  let $state := p:parse-document($s, $state)
  let $error := $state[$p:error]
  return
    if ($error) then
      element ERROR {$error/@*, p:error-message($s, $error)}
    else
      subsequence($state, $p:result)
};

                                                                      (: line 266 "XmlParser.ebnf" :)
                                                                      declare option saxon:output "method=text";

                                                                      declare variable $input external;

                                                                      p:parse-document(collection(concat(".?select=", $input, ";unparsed=yes"))),
                                                                      "pass"
                                                                      (: line 2796 "XmlParser.xquery" :)
(: End :)
