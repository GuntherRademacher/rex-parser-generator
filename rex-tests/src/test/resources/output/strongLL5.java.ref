// This file was generated on Sun Jun 6, 2021 17:04 (UTC+02) by REx v5.53 which is Copyright (c) 1979-2021 by Gunther Rademacher <grd@gmx.net>
// REx command line: -q strongLL5.ebnf -java -ll 5 -xml

public class strongLL5
{
  public static class ParseException extends RuntimeException
  {
    private static final long serialVersionUID = 1L;
    private int begin, end, offending, expected, state;

    public ParseException(int b, int e, int s, int o, int x)
    {
      begin = b;
      end = e;
      state = s;
      offending = o;
      expected = x;
    }

    @Override
    public String getMessage()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    }

    public int getBegin() {return begin;}
    public int getEnd() {return end;}
    public int getState() {return state;}
    public int getOffending() {return offending;}
    public int getExpected() {return expected;}
    public boolean isAmbiguousInput() {return false;}
  }

  public strongLL5(CharSequence string)
  {
    initialize(string);
  }

  public void initialize(CharSequence source)
  {
    input = source;
    size = source.length();
    reset(0, 0, 0);
  }

  public CharSequence getInput()
  {
    return input;
  }

  public int getTokenOffset()
  {
    return b0;
  }

  public int getTokenEnd()
  {
    return e0;
  }

  public final void reset(int l, int b, int e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    l3 = 0; b3 = 0; e3 = 0;
    l4 = 0; b4 = 0; e4 = 0;
    l5 = 0; b5 = 0; e5 = 0;
    end = e;
  }

  public void reset()
  {
    reset(0, 0, 0);
  }

  public static String getOffendingToken(ParseException e)
  {
    return e.getOffending() < 0 ? null : TOKEN[e.getOffending()];
  }

  public static String[] getExpectedTokenSet(ParseException e)
  {
    String[] expected;
    if (e.getExpected() >= 0)
    {
      expected = new String[]{TOKEN[e.getExpected()]};
    }
    else
    {
      expected = getTokenSet(- e.getState());
    }
    return expected;
  }

  public String getErrorMessage(ParseException e)
  {
    String message = e.getMessage();
    String[] tokenSet = getExpectedTokenSet(e);
    String found = getOffendingToken(e);
    int size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : java.util.Arrays.toString(tokenSet))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    String prefix = input.subSequence(0, e.getBegin()).toString();
    int line = prefix.replaceAll("[^\n]", "").length() + 1;
    int column = prefix.length() - prefix.lastIndexOf('\n');
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.subSequence(e.getBegin(), Math.min(input.length(), e.getBegin() + 64))
         + "...";
  }

  public void parse_Prg()
  {
    lookahead1W(18);                // Identifier | Whitespace^Token | 'clearscent' | 'drop' | 'if' | 'leavescent' |
                                    // 'pickup' | 'skip' | 'turn' | 'walk' | 'while' | '{'
    parse_PrgSeq();
    consume(3);                     // Eof
  }

  private void parse_PrgSeq()
  {
    parse_PrgAtom();
    for (;;)
    {
      lookahead1W(15);              // Eof | Whitespace^Token | ';' | '}'
      if (l1 != 15)                 // ';'
      {
        break;
      }
      consume(15);                  // ';'
      lookahead1W(18);              // Identifier | Whitespace^Token | 'clearscent' | 'drop' | 'if' | 'leavescent' |
                                    // 'pickup' | 'skip' | 'turn' | 'walk' | 'while' | '{'
      parse_PrgAtom();
    }
  }

  private void parse_PrgAtom()
  {
    switch (l1)
    {
    case 43:                        // 'skip'
      consume(43);                  // 'skip'
      break;
    case 47:                        // 'walk'
      consume(47);                  // 'walk'
      break;
    case 46:                        // 'turn'
      consume(46);                  // 'turn'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp();
      consume(9);                   // ')'
      break;
    case 40:                        // 'pickup'
      consume(40);                  // 'pickup'
      break;
    case 26:                        // 'drop'
      consume(26);                  // 'drop'
      break;
    case 37:                        // 'leavescent'
      consume(37);                  // 'leavescent'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp();
      consume(9);                   // ')'
      break;
    case 24:                        // 'clearscent'
      consume(24);                  // 'clearscent'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp();
      consume(9);                   // ')'
      break;
    case 1:                         // Identifier
      consume(1);                   // Identifier
      lookahead1W(3);               // Whitespace^Token | '='
      consume(18);                  // '='
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp();
      break;
    case 49:                        // '{'
      consume(49);                  // '{'
      lookahead1W(18);              // Identifier | Whitespace^Token | 'clearscent' | 'drop' | 'if' | 'leavescent' |
                                    // 'pickup' | 'skip' | 'turn' | 'walk' | 'while' | '{'
      parse_PrgSeq();
      consume(51);                  // '}'
      break;
    case 36:                        // 'if'
      consume(36);                  // 'if'
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp();
      consume(44);                  // 'then'
      lookahead1W(18);              // Identifier | Whitespace^Token | 'clearscent' | 'drop' | 'if' | 'leavescent' |
                                    // 'pickup' | 'skip' | 'turn' | 'walk' | 'while' | '{'
      parse_PrgAtom();
      lookahead1W(5);               // Whitespace^Token | 'else'
      consume(27);                  // 'else'
      lookahead1W(18);              // Identifier | Whitespace^Token | 'clearscent' | 'drop' | 'if' | 'leavescent' |
                                    // 'pickup' | 'skip' | 'turn' | 'walk' | 'while' | '{'
      parse_PrgAtom();
      break;
    default:
      consume(48);                  // 'while'
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp();
      consume(25);                  // 'do'
      lookahead1W(18);              // Identifier | Whitespace^Token | 'clearscent' | 'drop' | 'if' | 'leavescent' |
                                    // 'pickup' | 'skip' | 'turn' | 'walk' | 'while' | '{'
      parse_PrgAtom();
    }
  }

  private void parse_IExp()
  {
    parse_IExp1();
  }

  private void parse_IExp1()
  {
    parse_IExp2();
    for (;;)
    {
      if (l1 != 50)                 // '||'
      {
        break;
      }
      parse_op1();
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp2();
    }
  }

  private void parse_IExp2()
  {
    parse_IExp3();
    for (;;)
    {
      if (l1 != 7)                  // '&&'
      {
        break;
      }
      parse_op2();
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp3();
    }
  }

  private void parse_IExp3()
  {
    parse_IExp4();
    for (;;)
    {
      if (l1 != 16                  // '<'
       && l1 != 17                  // '<='
       && l1 != 18                  // '='
       && l1 != 19                  // '=='
       && l1 != 20                  // '>'
       && l1 != 21)                 // '>='
      {
        break;
      }
      parse_op3();
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp4();
    }
  }

  private void parse_IExp4()
  {
    parse_IExp5();
    for (;;)
    {
      if (l1 != 11                  // '+'
       && l1 != 13)                 // '-'
      {
        break;
      }
      parse_op4();
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp5();
    }
  }

  private void parse_IExp5()
  {
    parse_IExp6();
    for (;;)
    {
      lookahead1W(19);              // Eof | Whitespace^Token | '%' | '&&' | ')' | '*' | '+' | '-' | '/' | ';' | '<' |
                                    // '<=' | '=' | '==' | '>' | '>=' | 'do' | 'else' | 'then' | '||' | '}'
      if (l1 != 6                   // '%'
       && l1 != 10                  // '*'
       && l1 != 14)                 // '/'
      {
        break;
      }
      parse_op5();
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp6();
    }
  }

  private void parse_IExp6()
  {
    switch (l1)
    {
    case 13:                        // '-'
      consume(13);                  // '-'
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp6();
      break;
    case 5:                         // '!'
      consume(5);                   // '!'
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp6();
      break;
    case 8:                         // '('
      consume(8);                   // '('
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp1();
      consume(9);                   // ')'
      break;
    default:
      parse_IExpAtom();
    }
  }

  private void parse_IExpAtom()
  {
    switch (l1)
    {
    case 42:                        // 'sense'
      lookahead2W(0);               // Whitespace^Token | '('
      switch (lk)
      {
      case 554:                     // 'sense' '('
        lookahead3W(14);            // Whitespace^Token | 'ahead' | 'here'
        switch (lk)
        {
        case 90666:                 // 'sense' '(' 'ahead'
        case 139818:                // 'sense' '(' 'here'
          lookahead4W(2);           // Whitespace^Token | ','
          switch (lk)
          {
          case 3236394:             // 'sense' '(' 'ahead' ','
          case 3285546:             // 'sense' '(' 'here' ','
            lookahead5W(17);        // Whitespace^Token | 'carriesfood' | 'foe' | 'foehome' | 'foescent' | 'food' |
                                    // 'friend' | 'home' | 'obstacle' | 'ownscent'
            break;
          }
          break;
        }
        break;
      }
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // Identifier
      consume(1);                   // Identifier
      break;
    case 2:                         // Number
      consume(2);                   // Number
      break;
    case 45:                        // 'true'
      consume(45);                  // 'true'
      break;
    case 28:                        // 'false'
      consume(28);                  // 'false'
      break;
    case 41:                        // 'rand'
      consume(41);                  // 'rand'
      break;
    case 540107306:                 // 'sense' '(' 'ahead' ',' 'food'
    case 540156458:                 // 'sense' '(' 'here' ',' 'food'
      consume(42);                  // 'sense'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(14);              // Whitespace^Token | 'ahead' | 'here'
      parse_Where();
      lookahead1W(2);               // Whitespace^Token | ','
      consume(12);                  // ','
      lookahead1W(9);               // Whitespace^Token | 'food'
      consume(32);                  // 'food'
      lookahead1W(1);               // Whitespace^Token | ')'
      consume(9);                   // ')'
      break;
    case 640770602:                 // 'sense' '(' 'ahead' ',' 'obstacle'
    case 640819754:                 // 'sense' '(' 'here' ',' 'obstacle'
      consume(42);                  // 'sense'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(14);              // Whitespace^Token | 'ahead' | 'here'
      parse_Where();
      lookahead1W(2);               // Whitespace^Token | ','
      consume(12);                  // ','
      lookahead1W(12);              // Whitespace^Token | 'obstacle'
      consume(38);                  // 'obstacle'
      lookahead1W(1);               // Whitespace^Token | ')'
      consume(9);                   // ')'
      break;
    case 590438954:                 // 'sense' '(' 'ahead' ',' 'home'
    case 590488106:                 // 'sense' '(' 'here' ',' 'home'
      consume(42);                  // 'sense'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(14);              // Whitespace^Token | 'ahead' | 'here'
      parse_Where();
      lookahead1W(2);               // Whitespace^Token | ','
      consume(12);                  // ','
      lookahead1W(11);              // Whitespace^Token | 'home'
      consume(35);                  // 'home'
      lookahead1W(1);               // Whitespace^Token | ')'
      consume(9);                   // ')'
      break;
    case 556884522:                 // 'sense' '(' 'ahead' ',' 'friend'
    case 556933674:                 // 'sense' '(' 'here' ',' 'friend'
      consume(42);                  // 'sense'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(14);              // Whitespace^Token | 'ahead' | 'here'
      parse_Where();
      lookahead1W(2);               // Whitespace^Token | ','
      consume(12);                  // ','
      lookahead1W(10);              // Whitespace^Token | 'friend'
      consume(33);                  // 'friend'
      lookahead1W(1);               // Whitespace^Token | ')'
      consume(9);                   // ')'
      break;
    case 489775658:                 // 'sense' '(' 'ahead' ',' 'foe'
    case 489824810:                 // 'sense' '(' 'here' ',' 'foe'
      consume(42);                  // 'sense'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(14);              // Whitespace^Token | 'ahead' | 'here'
      parse_Where();
      lookahead1W(2);               // Whitespace^Token | ','
      consume(12);                  // ','
      lookahead1W(6);               // Whitespace^Token | 'foe'
      consume(29);                  // 'foe'
      lookahead1W(1);               // Whitespace^Token | ')'
      consume(9);                   // ')'
      break;
    case 506552874:                 // 'sense' '(' 'ahead' ',' 'foehome'
    case 506602026:                 // 'sense' '(' 'here' ',' 'foehome'
      consume(42);                  // 'sense'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(14);              // Whitespace^Token | 'ahead' | 'here'
      parse_Where();
      lookahead1W(2);               // Whitespace^Token | ','
      consume(12);                  // ','
      lookahead1W(7);               // Whitespace^Token | 'foehome'
      consume(30);                  // 'foehome'
      lookahead1W(1);               // Whitespace^Token | ')'
      consume(9);                   // ')'
      break;
    case 389112362:                 // 'sense' '(' 'ahead' ',' 'carriesfood'
    case 389161514:                 // 'sense' '(' 'here' ',' 'carriesfood'
      consume(42);                  // 'sense'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(14);              // Whitespace^Token | 'ahead' | 'here'
      parse_Where();
      lookahead1W(2);               // Whitespace^Token | ','
      consume(12);                  // ','
      lookahead1W(4);               // Whitespace^Token | 'carriesfood'
      consume(23);                  // 'carriesfood'
      lookahead1W(1);               // Whitespace^Token | ')'
      consume(9);                   // ')'
      break;
    case 523330090:                 // 'sense' '(' 'ahead' ',' 'foescent'
    case 523379242:                 // 'sense' '(' 'here' ',' 'foescent'
      consume(42);                  // 'sense'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(14);              // Whitespace^Token | 'ahead' | 'here'
      parse_Where();
      lookahead1W(2);               // Whitespace^Token | ','
      consume(12);                  // ','
      lookahead1W(8);               // Whitespace^Token | 'foescent'
      consume(31);                  // 'foescent'
      lookahead1W(1);               // Whitespace^Token | ')'
      consume(9);                   // ')'
      break;
    default:
      consume(42);                  // 'sense'
      lookahead1W(0);               // Whitespace^Token | '('
      consume(8);                   // '('
      lookahead1W(14);              // Whitespace^Token | 'ahead' | 'here'
      parse_Where();
      lookahead1W(2);               // Whitespace^Token | ','
      consume(12);                  // ','
      lookahead1W(13);              // Whitespace^Token | 'ownscent'
      consume(39);                  // 'ownscent'
      lookahead1W(2);               // Whitespace^Token | ','
      consume(12);                  // ','
      lookahead1W(16);              // Identifier | Number | Whitespace^Token | '!' | '(' | '-' | 'false' | 'rand' |
                                    // 'sense' | 'true'
      parse_IExp();
      consume(9);                   // ')'
    }
  }

  private void parse_Where()
  {
    switch (l1)
    {
    case 34:                        // 'here'
      consume(34);                  // 'here'
      break;
    default:
      consume(22);                  // 'ahead'
    }
  }

  private void parse_op1()
  {
    consume(50);                    // '||'
  }

  private void parse_op2()
  {
    consume(7);                     // '&&'
  }

  private void parse_op3()
  {
    switch (l1)
    {
    case 19:                        // '=='
      consume(19);                  // '=='
      break;
    case 17:                        // '<='
      consume(17);                  // '<='
      break;
    case 16:                        // '<'
      consume(16);                  // '<'
      break;
    case 18:                        // '='
      consume(18);                  // '='
      break;
    case 21:                        // '>='
      consume(21);                  // '>='
      break;
    default:
      consume(20);                  // '>'
    }
  }

  private void parse_op4()
  {
    switch (l1)
    {
    case 11:                        // '+'
      consume(11);                  // '+'
      break;
    default:
      consume(13);                  // '-'
    }
  }

  private void parse_op5()
  {
    switch (l1)
    {
    case 10:                        // '*'
      consume(10);                  // '*'
      break;
    case 14:                        // '/'
      consume(14);                  // '/'
      break;
    default:
      consume(6);                   // '%'
    }
  }

  private void consume(int t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = l4; if (l3 != 0) {
      b3 = b4; e3 = e4; l4 = l5; if (l4 != 0) {
      b4 = b5; e4 = e5; l5 = 0; }}}}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private int matchW(int tokenSetId)
  {
    int code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 4)                // Whitespace^Token
      {
        break;
      }
    }
    return code;
  }

  private void lookahead1W(int tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  private void lookahead2W(int tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 6) | l1;
  }

  private void lookahead3W(int tokenSetId)
  {
    if (l3 == 0)
    {
      l3 = matchW(tokenSetId);
      b3 = begin;
      e3 = end;
    }
    lk |= l3 << 12;
  }

  private void lookahead4W(int tokenSetId)
  {
    if (l4 == 0)
    {
      l4 = matchW(tokenSetId);
      b4 = begin;
      e4 = end;
    }
    lk |= l4 << 18;
  }

  private void lookahead5W(int tokenSetId)
  {
    if (l5 == 0)
    {
      l5 = matchW(tokenSetId);
      b5 = begin;
      e5 = end;
    }
    lk |= l5 << 24;
  }

  private int error(int b, int e, int s, int l, int t)
  {
    throw new ParseException(b, e, s, l, t);
  }

  private int lk, b0, e0;
  private int l1, b1, e1;
  private int l2, b2, e2;
  private int l3, b3, e3;
  private int l4, b4, e4;
  private int l5, b5, e5;
  private CharSequence input = null;
  private int size = 0;
  private int begin = 0;
  private int end = 0;

  private int match(int tokenSetId)
  {
    begin = end;
    int current = end;
    int result = INITIAL[tokenSetId];
    int state = 0;

    for (int code = result & 127; code != 0; )
    {
      int charclass;
      int c0 = current < size ? input.charAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        int c1 = c0 >> 5;
        charclass = MAP1[(c0 & 31) + MAP1[(c1 & 31) + MAP1[c1 >> 5]]];
      }
      else
      {
        charclass = 0;
      }

      state = code;
      int i0 = (charclass << 7) + code - 1;
      code = TRANSITION[(i0 & 7) + TRANSITION[i0 >> 3]];

      if (code > 127)
      {
        result = code;
        code &= 127;
        end = current;
      }
    }

    result >>= 7;
    if (result == 0)
    {
      end = current - 1;
      int c1 = end < size ? input.charAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000)
      {
        --end;
      }
      return error(begin, end, state, -1, -1);
    }

    if (end > size) end = size;
    return (result & 63) - 1;
  }

  private static String[] getTokenSet(int tokenSetId)
  {
    java.util.ArrayList<String> expected = new java.util.ArrayList<>();
    int s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 127;
    for (int i = 0; i < 52; i += 32)
    {
      int j = i;
      int i0 = (i >> 5) * 96 + s - 1;
      int f = EXPECTED[(i0 & 3) + EXPECTED[i0 >> 2]];
      for ( ; f != 0; f >>>= 1, ++j)
      {
        if ((f & 1) != 0)
        {
          expected.add(TOKEN[j]);
        }
      }
    }
    return expected.toArray(new String[]{});
  }

  private static final int[] MAP0 =
  {
    /*   0 */ 37, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0,
    /*  35 */ 0, 0, 3, 4, 0, 5, 6, 7, 8, 9, 10, 0, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 13, 14, 15, 16, 0, 0,
    /*  65 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0,
    /*  92 */ 0, 0, 0, 0, 0, 18, 19, 20, 21, 22, 23, 17, 24, 25, 17, 17, 26, 27, 28, 29, 17, 17, 30, 31, 32, 17, 17, 33,
    /* 120 */ 17, 17, 17, 34, 35, 36, 0, 0
  };

  private static final int[] MAP1 =
  {
    /*   0 */ 54, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
    /*  26 */ 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
    /*  52 */ 58, 58, 90, 136, 167, 198, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
    /*  74 */ 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 37, 0, 0, 0, 0, 0, 0, 0,
    /*  98 */ 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 133 */ 0, 0, 0, 1, 2, 0, 0, 0, 3, 4, 0, 5, 6, 7, 8, 9, 10, 0, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 13,
    /* 164 */ 14, 15, 16, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    /* 191 */ 17, 17, 17, 0, 0, 0, 0, 0, 18, 19, 20, 21, 22, 23, 17, 24, 25, 17, 17, 26, 27, 28, 29, 17, 17, 30, 31, 32,
    /* 219 */ 17, 17, 33, 17, 17, 17, 34, 35, 36, 0, 0
  };

  private static final int[] INITIAL =
  {
    /*  0 */ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
  };

  private static final int[] TRANSITION =
  {
    /*    0 */ 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 608, 608, 611, 620, 620,
    /*   21 */ 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 619, 620, 620, 620, 620, 620, 620, 620,
    /*   42 */ 620, 620, 620, 620, 620, 620, 620, 620, 792, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620,
    /*   63 */ 620, 620, 620, 740, 620, 1086, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 629, 620, 629, 620,
    /*   84 */ 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 826, 620, 824, 620, 620, 620, 620, 620, 620,
    /*  105 */ 620, 620, 620, 620, 620, 620, 620, 620, 620, 890, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620,
    /*  126 */ 620, 620, 620, 620, 1018, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 638, 620, 620,
    /*  147 */ 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 649, 620, 620, 620, 620, 620,
    /*  168 */ 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 859, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620,
    /*  189 */ 620, 620, 620, 620, 620, 661, 620, 670, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 1069,
    /*  210 */ 735, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 757, 620, 620, 620, 620,
    /*  231 */ 620, 620, 620, 620, 620, 620, 620, 620, 620, 819, 620, 885, 620, 693, 681, 620, 620, 620, 620, 620, 620,
    /*  252 */ 620, 620, 620, 620, 620, 620, 1013, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620,
    /*  273 */ 620, 690, 620, 975, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 1050, 701, 620, 975, 620,
    /*  294 */ 620, 620, 777, 782, 620, 620, 620, 620, 620, 620, 620, 620, 690, 922, 854, 620, 620, 620, 620, 620, 620,
    /*  315 */ 620, 620, 620, 620, 620, 796, 620, 719, 620, 975, 620, 620, 620, 620, 730, 1133, 620, 620, 620, 620, 620,
    /*  336 */ 620, 620, 752, 620, 975, 620, 620, 722, 620, 1147, 804, 828, 620, 620, 620, 620, 839, 620, 814, 620, 836,
    /*  357 */ 978, 847, 872, 880, 641, 902, 1008, 620, 620, 620, 620, 943, 919, 930, 620, 975, 620, 620, 620, 620, 620,
    /*  378 */ 620, 941, 620, 620, 620, 620, 620, 864, 951, 621, 975, 707, 620, 711, 710, 620, 620, 620, 620, 620, 620,
    /*  399 */ 620, 620, 620, 690, 620, 975, 620, 908, 620, 662, 620, 620, 620, 620, 620, 620, 620, 620, 620, 962, 620,
    /*  420 */ 975, 620, 620, 620, 620, 620, 987, 620, 620, 620, 620, 620, 620, 620, 690, 620, 975, 620, 772, 620, 620,
    /*  441 */ 682, 620, 620, 620, 620, 620, 620, 620, 620, 690, 620, 975, 620, 954, 620, 1136, 1106, 673, 986, 620,
    /*  461 */ 620, 620, 620, 620, 744, 995, 1003, 1030, 1048, 1058, 1059, 620, 1068, 620, 1109, 620, 620, 620, 620,
    /*  480 */ 620, 620, 690, 767, 1077, 894, 630, 1083, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 690, 620,
    /*  500 */ 975, 933, 1022, 911, 1100, 620, 653, 620, 620, 620, 620, 620, 620, 620, 1094, 620, 975, 620, 620, 620,
    /*  520 */ 1117, 620, 620, 1127, 620, 620, 620, 620, 620, 620, 690, 1119, 969, 620, 620, 620, 620, 620, 620, 620,
    /*  540 */ 620, 620, 620, 620, 620, 620, 1144, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620,
    /*  561 */ 620, 762, 620, 620, 1035, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 806, 1040, 620, 620,
    /*  581 */ 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 1060, 787, 620, 620, 620, 620, 620, 620, 620,
    /*  602 */ 620, 620, 620, 620, 620, 620, 661, 661, 661, 661, 661, 661, 661, 661, 0, 0, 0, 768, 0, 0, 0, 0, 0, 0, 0,
    /*  627 */ 0, 55, 1152, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 1664, 0, 0, 0, 0, 0, 0, 85, 0, 1792, 0, 0, 1792, 0, 0, 0, 0,
    /*  657 */ 90, 0, 0, 0, 418, 0, 0, 0, 0, 0, 0, 0, 79, 0, 418, 291, 0, 0, 0, 0, 0, 0, 91, 0, 2816, 0, 0, 0, 0, 0, 0,
    /*  688 */ 0, 86, 291, 0, 291, 0, 0, 0, 0, 0, 0, 2304, 2560, 291, 0, 291, 0, 0, 45, 0, 0, 58, 0, 0, 0, 0, 0, 73, 0,
    /*  717 */ 0, 0, 291, 22, 291, 0, 0, 0, 0, 0, 0, 4224, 0, 0, 81, 0, 0, 84, 0, 0, 0, 2048, 0, 0, 0, 0, 38, 0, 0, 0,
    /*  747 */ 0, 30, 31, 0, 0, 291, 0, 291, 42, 0, 0, 0, 0, 2215, 0, 0, 0, 0, 44, 0, 0, 0, 0, 51, 0, 0, 0, 0, 65, 0, 0,
    /*  778 */ 0, 0, 78, 0, 0, 0, 0, 83, 0, 0, 0, 0, 512, 0, 0, 0, 0, 896, 0, 0, 0, 0, 22, 0, 0, 0, 0, 4352, 0, 0, 0, 0,
    /*  810 */ 0, 0, 0, 6656, 291, 0, 291, 23, 0, 0, 0, 0, 2432, 0, 0, 0, 0, 1280, 0, 0, 0, 0, 0, 0, 0, 3072, 56, 0,
    /*  838 */ 291, 0, 0, 0, 0, 0, 23, 0, 0, 62, 0, 0, 0, 0, 0, 68, 0, 0, 291, 0, 53, 0, 0, 0, 1920, 0, 0, 0, 0, 29, 0,
    /*  869 */ 0, 33, 0, 3910, 71, 0, 3584, 0, 0, 0, 75, 4608, 0, 0, 0, 4480, 0, 0, 0, 2472, 0, 0, 0, 0, 1408, 0, 0, 0,
    /*  897 */ 0, 59, 0, 0, 0, 87, 0, 0, 89, 0, 3968, 0, 0, 64, 0, 0, 0, 0, 0, 74, 0, 0, 26, 27, 28, 0, 0, 0, 0, 0, 53,
    /*  928 */ 0, 0, 291, 36, 291, 0, 0, 0, 0, 0, 60, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 24, 25, 291, 29, 291, 0, 0, 0, 0,
    /*  958 */ 0, 67, 0, 0, 291, 0, 291, 0, 0, 0, 46, 0, 0, 291, 0, 54, 0, 0, 0, 291, 0, 0, 0, 0, 0, 0, 3840, 61, 93, 0,
    /*  988 */ 0, 0, 0, 0, 0, 0, 92, 291, 37, 291, 0, 0, 0, 0, 47, 48, 49, 50, 0, 52, 0, 0, 0, 4992, 0, 0, 0, 0, 2729,
    /* 1017 */ 0, 0, 0, 0, 1536, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 291, 57, 0, 0, 0, 0, 6528, 0, 0, 0, 0, 6656, 0, 0, 0, 0,
    /* 1048 */ 0, 3328, 0, 0, 0, 0, 0, 0, 32, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 512, 80, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 0,
    /* 1079 */ 291, 51, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 1024, 0, 0, 291, 0, 291, 43, 0, 0, 0, 0, 77, 0, 0, 74, 0, 0, 82,
    /* 1109 */ 0, 0, 0, 0, 0, 95, 96, 0, 0, 76, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 4096, 0, 5120, 0, 0, 0, 88, 0, 0, 0, 0,
    /* 1140 */ 0, 0, 5760, 0, 0, 0, 6400, 0, 0, 0, 0, 0, 2944, 0, 0
  };

  private static final int[] EXPECTED =
  {
    /*   0 */ 48, 52, 56, 58, 62, 66, 92, 117, 71, 78, 82, 67, 93, 118, 74, 92, 117, 132, 92, 89, 93, 91, 134, 99, 94,
    /*  25 */ 94, 85, 147, 103, 94, 84, 107, 112, 116, 140, 94, 85, 108, 122, 84, 107, 129, 124, 138, 125, 95, 144, 138,
    /*  48 */ 272, 528, 4112, 262160, 8388624, 134217744, 536870928, 1073741840, -2147483632, 16, 16, 16, 4194320,
    /*  61 */ 32792, 8502, -528482288, 18, 171962072, 16, 8388608, 134217728, 536870912, 1073741824, 0, 4, 2,
    /*  74 */ -536870912, 0, 8388608, 134217728, 0, 128, 131072, 524288, 2097152, 33554432, 0, 0, 1, 2, 8, 0, 4194304,
    /*  91 */ 8388608, 1073741824, -2147483648, 0, 0, 0, 0, 64, 0, 8388608, 8388608, 8388608, 0, 203, 131072, 790528, 8,
    /* 108 */ 64, 128, 0, 4, 4, 0, 0, 3, 192, 0, 0, 0, 4194304, 0, 1, 4096, 0, 0, 2, 64, 128, 4, 0, 4096, 0,
    /* 133 */ -1073741824, 0, 8388608, -2147483648, 0, 128, 0, 0, 0, 4096, 262144, 128, 0, 0, 64, 128, 4, 524288
  };

  private static final String[] TOKEN =
  {
    "(0)",
    "Identifier",
    "Number",
    "Eof",
    "Whitespace",
    "'!'",
    "'%'",
    "'&&'",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'/'",
    "';'",
    "'<'",
    "'<='",
    "'='",
    "'=='",
    "'>'",
    "'>='",
    "'ahead'",
    "'carriesfood'",
    "'clearscent'",
    "'do'",
    "'drop'",
    "'else'",
    "'false'",
    "'foe'",
    "'foehome'",
    "'foescent'",
    "'food'",
    "'friend'",
    "'here'",
    "'home'",
    "'if'",
    "'leavescent'",
    "'obstacle'",
    "'ownscent'",
    "'pickup'",
    "'rand'",
    "'sense'",
    "'skip'",
    "'then'",
    "'true'",
    "'turn'",
    "'walk'",
    "'while'",
    "'{'",
    "'||'",
    "'}'"
  };
}

// End
