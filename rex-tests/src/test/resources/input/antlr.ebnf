// antlr-2.7.7/antlr/antlr.g from http://www.antlr2.org/download/antlr-2.7.7.tar.gz

grammar
   ::=
    (
        "header"
        (STRING_LITERAL)?
        ACTION
    )*
    ( fileOptionsSpec )?
    ( classDef )*
    EOF

classDef
    ::=
    ( ACTION )?
    ( DOC_COMMENT )?
    (   lexerSpec
    |   treeParserSpec
    |   parserSpec
    )
    rules

fileOptionsSpec
    ::= OPTIONS
        (
          id
            ASSIGN
          optionValue
            SEMI
        )*
        RCURLY

parserOptionsSpec
    ::= OPTIONS
        (
          id
            ASSIGN
         optionValue
            SEMI
        )*
        RCURLY

treeParserOptionsSpec
    ::= OPTIONS
        (
          id
            ASSIGN
          optionValue
            SEMI
        )*
        RCURLY

lexerOptionsSpec
    ::=
    OPTIONS
    (
// Special case for vocabulary option because it has a bit-set
        "charVocabulary"
        ASSIGN
      charSet
        SEMI
    | id
        ASSIGN
      optionValue
        SEMI
    )*
    RCURLY

subruleOptionsSpec
    ::= OPTIONS
        ( id
            ASSIGN
          optionValue
            SEMI
        )*
        RCURLY


// optionValue returns a Token which may be one of several things:

//    STRING_LITERAL -- a quoted string

//    CHAR_LITERAL -- a single quoted character

//      INT -- an integer

//  RULE_REF or TOKEN_REF -- an identifier

optionValue
    ::= qualifiedID
    |   STRING_LITERAL
    |   CHAR_LITERAL
    |   INT

charSet
    ::=

// TODO: generate a bit set
      setBlockElement
        (
            OR
          setBlockElement
        )*

setBlockElement
    ::=
    CHAR_LITERAL
    (
        RANGE CHAR_LITERAL
    )?

tokensSpec
    ::= TOKENS
            (   (
                    TOKEN_REF
                    ( ASSIGN STRING_LITERAL )?
                    (tokensSpecOptions)?
                |   STRING_LITERAL
                    (tokensSpecOptions)?
                )
                SEMI
            )+
        RCURLY

tokensSpecOptions
    ::= OPEN_ELEMENT_OPTION
        id ASSIGN optionValue
        (
            SEMI
            id ASSIGN optionValue
        )*
        CLOSE_ELEMENT_OPTION

superClass
    ::= LPAREN
            (STRING_LITERAL)
        RPAREN

parserSpec
    ::= "class"
      id
        (   "extends" "Parser"
            (superClass)?
        |
        )
        SEMI
        (parserOptionsSpec)?
        (tokensSpec)?
        ( ACTION )?

lexerSpec
    ::=   ( "lexclass"
          id
        |   "class"
          id
            "extends"
            "Lexer"
            (superClass)?
        )
        SEMI
        (lexerOptionsSpec)?
        (tokensSpec)?
        ( ACTION )?

treeParserSpec
    ::= "class"
      id
        "extends"
        "TreeParser"
        (superClass)?
        SEMI
        (treeParserOptionsSpec)?
        (tokensSpec)?
        ( ACTION )?

rules
    ::= rule+

rule
    ::=
    (   DOC_COMMENT
    )?
    (   "protected"
    |   "public"
    |   "private"
    )?
  id
    ( BANG )?
    ( ARG_ACTION )?
    ( "returns" ARG_ACTION )?
    ( throwsSpec )?
    ( ruleOptionsSpec )?
    (ACTION)?
    COLON block SEMI
    ( exceptionGroup )?

ruleOptionsSpec
    ::= OPTIONS
        (
          id
            ASSIGN
          optionValue
            SEMI
        )*
        RCURLY

throwsSpec
    ::= "throws" id
        ( COMMA id )*

block
 ::=
        alternative ( OR alternative )*

alternative
 ::=
        (BANG )?
        ( element )* ( exceptionSpecNoLabel )?

exceptionGroup
    ::=
        ( exceptionSpec )+

exceptionSpec
   ::=
   "exception"
   ( ARG_ACTION )?
   ( exceptionHandler )*

exceptionSpecNoLabel
   ::=
   "exception"
   ( exceptionHandler )*

exceptionHandler
   ::=
   "catch"
   ARG_ACTION
   ACTION

element
    ::= elementNoOptionSpec (elementOptionSpec)?

elementOptionSpec
    ::= OPEN_ELEMENT_OPTION
        id ASSIGN optionValue
        (
            SEMI
            id ASSIGN optionValue
        )*
        CLOSE_ELEMENT_OPTION

elementNoOptionSpec
    ::= id
        ASSIGN
        ( id COLON )?
        (   RULE_REF
            ( ARG_ACTION )?
            ( BANG )?
        |
// this syntax only valid for lexer
            TOKEN_REF
            ( ARG_ACTION )?
        )
    |
        (id COLON )?
        (   RULE_REF
            ( ARG_ACTION )?
            ( BANG )?
        |
            range
        |
            terminal
        |
            NOT_OP
            (   notTerminal
            |   ebnf
            )
        |
            ebnf
        )
    |
        ACTION_OR_SEMPRED
    |
        tree

tree ::=
    TREE_BEGIN
    rootNode
    ( element )+
    RPAREN

rootNode
    ::=
        (id COLON)?
        terminal

//  |   range

ebnf
    ::= LPAREN
        (

// 2nd alt and optional branch ambig due to

// linear approx LL(2) issue.  COLON ACTION

// matched correctly in 2nd alt.
            subruleOptionsSpec
            ( ACTION )?
            COLON
        |   ACTION
            COLON
        )?

        block
        RPAREN

        (   (   QUESTION
            |   STAR
            |   PLUS
            )?
            ( BANG )?
        |
            IMPLIES
        )

ast_type_spec
    ::= (   CARET
        |   BANG
        )?

range
    ::= CHAR_LITERAL RANGE CHAR_LITERAL
        ( BANG )?
    |
        (TOKEN_REF|STRING_LITERAL)
        RANGE
        (TOKEN_REF|STRING_LITERAL)
      ast_type_spec

terminal
    ::=
        CHAR_LITERAL
        ( BANG )?
    |
        TOKEN_REF
      ast_type_spec

// Args are only valid for lexer
        ( ARG_ACTION )?
    |
        STRING_LITERAL
      ast_type_spec
    |
        WILDCARD
      ast_type_spec


notTerminal
    ::=
        CHAR_LITERAL
        ( BANG )?
    |
        TOKEN_REF
      ast_type_spec

/** Match a.b.c.d qualified ids; WILDCARD here is overloaded as
 *  id separator; that is, I need a reference to the '.' token.
 */
qualifiedID
    ::= id
        (   WILDCARD id
        )*

id
    ::= TOKEN_REF
    |   RULE_REF

ACTION
    ::= NESTED_ACTION

NESTED_ACTION ::=
    '{'
    ( CR
  | LF
    |   NESTED_ACTION
    |   CHAR_LITERAL
    |   COMMENT
    |   STRING_LITERAL
    |   ACTION_CHAR
    )*
    '}'
/* ws: explicit */

ARG_ACTION
   ::=
    NESTED_ARG_ACTION

NESTED_ARG_ACTION ::=
    '['
    (
        /*  '\r' '\n' can be matched in one alternative or by matching
            '\r' and then '\n' in the next iteration.
         */
        NESTED_ARG_ACTION
    |   CR
    |   LF
    |   CHAR_LITERAL
    |   STRING_LITERAL
    |   ARG_ACTION_CHAR
    )*
    ']'
/* ws: explicit */

ACTION_OR_SEMPRED ::= ACTION '?'?
/* ws: explicit */

Whitespace ::= WS | COMMENT^WS
    /* ws:definition */

<?TOKENS?>

WS  ::= (   /*  '\r' '\n' can be matched in one alternative or by matching
                '\r' in one iteration and '\n' in another.  I am trying to
                handle any flavor of newline that comes in, but the language
                that allows both "\r\n" and "\r" and "\n" to all be valid
                newline is ambiguous.  Consequently, the resulting grammar
                must be ambiguous.  I'm shutting this warning off.
             */
            ' '
        |   #x09
        |   CR LF
        |   CR
        |   LF
        )

COMMENT? ::=
    ( SL_COMMENT | ML_COMMENT )

SL_COMMENT ::=
    "//"
    ( [^#x0A#x0D] )*
    (
        /*  '\r' '\n' can be matched in one alternative or by matching
            '\r' and then in the next token.  The language
            that allows both "\r\n" and "\r" and "\n" to all be valid
            newline is ambiguous.  Consequently, the resulting grammar
            must be ambiguous.  I'm shutting this warning off.
         */
            CR LF
        |   CR
        |   LF
    )

ML_COMMENT ::=
    "/*"
    (   '*'
    |
    )
    (
        /*  '\r' '\n' can be matched in one alternative or by matching
            '\r' and then in the next token.  The language
            that allows both "\r\n" and "\r" and "\n" to all be valid
            newline is ambiguous.  Consequently, the resulting grammar
            must be ambiguous.  I'm shutting this warning off.
         */
        CR LF
    |   CR
    |   LF
    |   [^#x0A#x0D]
    )*
    "*/"

OPEN_ELEMENT_OPTION
    ::= '<'

CLOSE_ELEMENT_OPTION
    ::= '>'

COMMA ::= ','

QUESTION ::=    '?'

TREE_BEGIN ::= "#("

LPAREN::=   '('

RPAREN::=   ')'

COLON ::=   ':'

STAR::= '*'

PLUS::= '+'

ASSIGN ::= '='

IMPLIES ::= "=>"

SEMI::= ';'

CARET ::= '^'

BANG ::= '!'

OR  ::= '|'

WILDCARD ::= '.'

RANGE ::= ".."

NOT_OP ::=  '~'

RCURLY::=   '}'

CHAR_LITERAL
    ::= "'" (ESC|[^']) "'"

STRING_LITERAL
    ::= '"' (ESC|[^"])* '"'

ESC ::= '\'
        (   'n'
        |   'r'
        |   't'
        |   'b'
        |   'f'
        |   'w'
        |   'a'
        |   '"'
        |   "'"
        |   '\'
        |   [0-3]
            [0-7]?
            [0-7]?
        |   [4-7]
            [0-7]?
        |   'u' XDIGIT XDIGIT XDIGIT XDIGIT
        )

XDIGIT ::=
        [0-9]
    |   [a-f]
    |   [A-F]

INT ::= [0-9]+

CR ::= #x0D

LF ::= #x0A

TOKEN_REF
    ::= [A-Z]
        (
// scarf as many letters/numbers as you can
            [a-zA-Z_0-9]
        )*


// we get a warning here when looking for options '{', but it works right
RULE_REF
    ::= INTERNAL_RULE_REF

WS_LOOP
    ::= (
// grab as much WS as you can
            WS
        |   COMMENT
        )*

INTERNAL_RULE_REF
    ::= [a-z]
        (
// scarf as many letters/numbers as you can
            [a-zA-Z_0-9]
        )*

EOF ::= $

DOC_COMMENT? ::=
    "/*"
    '*'
    (
        /*  '\r' '\n' can be matched in one alternative or by matching
            '\r' and then in the next token.  The language
            that allows both "\r\n" and "\r" and "\n" to all be valid
            newline is ambiguous.  Consequently, the resulting grammar
            must be ambiguous.  I'm shutting this warning off.
         */
        CR LF
    |   CR
    |   LF
    |   [^#x0A#x0D]
    )*
    "*/"

OPTIONS ::= "options" WS_LOOP '{'

TOKENS ::= "tokens" WS_LOOP '{'

ACTION_CHAR ::= [^#x0A#x0D{}]

ARG_ACTION_CHAR ::= [^#x0A#x0D[#x5D]

COMMENT^WS << DOC_COMMENT

RULE_REF << "catch" "charVocabulary" "class" "exception" "lexclass" "private" "protected" "public"
