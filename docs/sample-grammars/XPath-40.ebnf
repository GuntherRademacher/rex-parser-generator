/* XML Path Language (XPath) 4.0 WG Review Draft
 * version https://qt4cg.org/specifications/xpath-40/
 * extracted from https://qt4cg.org/specifications/xquery-40/xpath-40.html on Thu Aug 21, 2025, 20:28 (UTC+02)
 * and transformed by rexify-xquery-40.xq
 */

XPath    ::= Expr EOF
Expr     ::= ExprSingle ( ',' ExprSingle )*
ExprSingle
         ::= ForExpr
           | LetExpr
           | QuantifiedExpr
           | IfExpr
           | OrExpr
ForExpr  ::= ForClause ForLetReturn
ForClause
         ::= 'for' ForBinding ( ',' ForBinding )*
ForBinding
         ::= ForItemBinding
           | ForMemberBinding
           | ForEntryBinding
ForItemBinding
         ::= VarNameAndType PositionalVar? 'in' ExprSingle
VarNameAndType
         ::= '$' EQName TypeDeclaration?
EQName   ::= QName
           | URIQualifiedName
QName    ::= UnreservedFunctionQName
           | 'attribute'
           | 'comment'
           | 'document-node'
           | 'element'
           | 'namespace-node'
           | 'node'
           | 'schema-attribute'
           | 'schema-element'
           | 'processing-instruction'
           | 'text'
           | 'array'
           | 'enum'
           | 'fn'
           | 'function'
           | 'gnode'
           | 'get'
           | 'if'
           | 'item'
           | 'jnode'
           | 'map'
           | 'record'
           | 'switch'
           | 'type'
           | 'typeswitch'
UnreservedFunctionQName
         ::= UnreservedQName
           | 'ancestor'
           | 'ancestor-or-self'
           | 'and'
           | 'as'
           | 'at'
           | 'cast'
           | 'castable'
           | 'child'
           | 'descendant'
           | 'descendant-or-self'
           | 'div'
           | 'else'
           | 'empty-sequence'
           | 'eq'
           | 'every'
           | 'except'
           | 'following'
           | 'following-or-self'
           | 'following-sibling'
           | 'following-sibling-or-self'
           | 'follows'
           | 'for'
           | 'ge'
           | 'gt'
           | 'idiv'
           | 'in'
           | 'instance'
           | 'intersect'
           | 'is'
           | 'is-not'
           | 'key'
           | 'le'
           | 'let'
           | 'lt'
           | 'member'
           | 'mod'
           | 'namespace'
           | 'ne'
           | 'of'
           | 'or'
           | 'otherwise'
           | 'parent'
           | 'precedes'
           | 'preceding'
           | 'preceding-or-self'
           | 'preceding-sibling'
           | 'preceding-sibling-or-self'
           | 'return'
           | 'satisfies'
           | 'self'
           | 'some'
           | 'then'
           | 'to'
           | 'treat'
           | 'union'
           | 'value'
TypeDeclaration
         ::= 'as' SequenceType
SequenceType
         ::= 'empty-sequence' '(' ')'
           | ItemType ( OccurrenceIndicator / )
ItemType ::= RegularItemType
           | FunctionType
           | TypeName
           | ChoiceItemType
RegularItemType
         ::= AnyItemTest
           | NodeKindTest
           | GNodeType
           | JNodeType
           | MapType
           | ArrayType
           | RecordType
           | EnumerationType
AnyItemTest
         ::= 'item' '(' ')'
NodeKindTest
         ::= DocumentTest
           | ElementTest
           | AttributeTest
           | SchemaElementTest
           | SchemaAttributeTest
           | PITest
           | CommentTest
           | TextTest
           | NamespaceNodeTest
           | AnyNodeKindTest
DocumentTest
         ::= 'document-node' '(' ( ElementTest | SchemaElementTest | NameTestUnion )? ')'
ElementTest
         ::= 'element' '(' ( NameTestUnion ( ',' TypeName '?'? )? )? ')'
NameTestUnion
         ::= NameTest ( '|' NameTest )*
NameTest ::= EQName
           | Wildcard
TypeName ::= EQName
SchemaElementTest
         ::= 'schema-element' '(' ElementName ')'
ElementName
         ::= EQName
AttributeTest
         ::= 'attribute' '(' ( NameTestUnion ( ',' TypeName )? )? ')'
SchemaAttributeTest
         ::= 'schema-attribute' '(' AttributeName ')'
AttributeName
         ::= EQName
PITest   ::= 'processing-instruction' '(' ( NCName | StringLiteral )? ')'
NCName   ::= UnreservedNCName
           | 'ancestor'
           | 'ancestor-or-self'
           | 'and'
           | 'array'
           | 'as'
           | 'at'
           | 'attribute'
           | 'cast'
           | 'castable'
           | 'child'
           | 'comment'
           | 'descendant'
           | 'descendant-or-self'
           | 'div'
           | 'document-node'
           | 'element'
           | 'else'
           | 'empty-sequence'
           | 'enum'
           | 'eq'
           | 'every'
           | 'except'
           | 'fn'
           | 'following'
           | 'following-or-self'
           | 'following-sibling'
           | 'following-sibling-or-self'
           | 'follows'
           | 'for'
           | 'function'
           | 'ge'
           | 'get'
           | 'gnode'
           | 'gt'
           | 'idiv'
           | 'if'
           | 'in'
           | 'instance'
           | 'intersect'
           | 'is'
           | 'is-not'
           | 'item'
           | 'jnode'
           | 'key'
           | 'le'
           | 'let'
           | 'lt'
           | 'map'
           | 'member'
           | 'mod'
           | 'namespace'
           | 'namespace-node'
           | 'ne'
           | 'node'
           | 'of'
           | 'or'
           | 'otherwise'
           | 'parent'
           | 'precedes'
           | 'preceding'
           | 'preceding-or-self'
           | 'preceding-sibling'
           | 'preceding-sibling-or-self'
           | 'processing-instruction'
           | 'record'
           | 'return'
           | 'satisfies'
           | 'schema-attribute'
           | 'schema-element'
           | 'self'
           | 'some'
           | 'switch'
           | 'text'
           | 'then'
           | 'to'
           | 'treat'
           | 'type'
           | 'typeswitch'
           | 'union'
           | 'value'
CommentTest
         ::= 'comment' '(' ')'
TextTest ::= 'text' '(' ')'
NamespaceNodeTest
         ::= 'namespace-node' '(' ')'
AnyNodeKindTest
         ::= 'node' '(' ')'
GNodeType
         ::= 'gnode' '(' ')'
JNodeType
         ::= 'jnode' '(' SequenceType? ')'
MapType  ::= AnyMapType
           | TypedMapType
AnyMapType
         ::= 'map' '(' '*' ')'
TypedMapType
         ::= 'map' '(' ItemType ',' SequenceType ')'
ArrayType
         ::= AnyArrayType
           | TypedArrayType
AnyArrayType
         ::= 'array' '(' '*' ')'
TypedArrayType
         ::= 'array' '(' SequenceType ')'
RecordType
         ::= AnyRecordType
           | TypedRecordType
AnyRecordType
         ::= 'record' '(' '*' ')'
TypedRecordType
         ::= 'record' '(' ( FieldDeclaration ( ',' FieldDeclaration )* )? ExtensibleFlag? ')'
FieldDeclaration
         ::= FieldName '?'? ( 'as' SequenceType )?
FieldName
         ::= NCName
           | StringLiteral
ExtensibleFlag
         ::= ',' '*'
EnumerationType
         ::= 'enum' '(' StringLiteral ( ',' StringLiteral )* ')'
FunctionType
         ::= AnyFunctionType
           | TypedFunctionType
AnyFunctionType
         ::= ( 'function' | 'fn' ) '(' '*' ')'
TypedFunctionType
         ::= ( 'function' | 'fn' ) '(' ( TypedFunctionParam ( ',' TypedFunctionParam )* )? ')' 'as' SequenceType
TypedFunctionParam
         ::= ( '$' EQName 'as' )? SequenceType
ChoiceItemType
         ::= '(' ItemType ( '|' ItemType )* ')'
OccurrenceIndicator
         ::= '?'
           | '*'
           | '+'
PositionalVar
         ::= 'at' VarName
VarName  ::= '$' EQName
ForMemberBinding
         ::= 'member' VarNameAndType PositionalVar? 'in' ExprSingle
ForEntryBinding
         ::= ( ForEntryKeyBinding ForEntryValueBinding? | ForEntryValueBinding ) PositionalVar? 'in' ExprSingle
ForEntryKeyBinding
         ::= 'key' VarNameAndType
ForEntryValueBinding
         ::= 'value' VarNameAndType
ForLetReturn
         ::= ForExpr
           | LetExpr
           | 'return' ExprSingle
LetExpr  ::= LetClause ForLetReturn
LetClause
         ::= 'let' LetBinding ( ',' LetBinding )*
LetBinding
         ::= LetValueBinding
           | LetSequenceBinding
           | LetArrayBinding
           | LetMapBinding
LetValueBinding
         ::= VarNameAndType ':=' ExprSingle
LetSequenceBinding
         ::= '$' '(' VarNameAndType ( ',' VarNameAndType )* ')' TypeDeclaration? ':=' ExprSingle
LetArrayBinding
         ::= '$' '[' VarNameAndType ( ',' VarNameAndType )* ']' TypeDeclaration? ':=' ExprSingle
LetMapBinding
         ::= '$' '{' VarNameAndType ( ',' VarNameAndType )* '}' TypeDeclaration? ':=' ExprSingle
QuantifiedExpr
         ::= ( 'some' | 'every' ) QuantifierBinding ( ',' QuantifierBinding )* 'satisfies' ExprSingle
QuantifierBinding
         ::= VarNameAndType 'in' ExprSingle
IfExpr   ::= 'if' '(' Expr ')' ( UnbracedActions | BracedAction )
UnbracedActions
         ::= 'then' ExprSingle 'else' ExprSingle
BracedAction
         ::= EnclosedExpr
EnclosedExpr
         ::= '{' Expr? '}'
OrExpr   ::= AndExpr ( 'or' AndExpr )*
AndExpr  ::= ComparisonExpr ( 'and' ComparisonExpr )*
ComparisonExpr
         ::= OtherwiseExpr ( ( ValueComp | GeneralComp | NodeComp ) OtherwiseExpr )?
OtherwiseExpr
         ::= StringConcatExpr ( 'otherwise' StringConcatExpr )*
StringConcatExpr
         ::= RangeExpr ( '||' RangeExpr )*
RangeExpr
         ::= AdditiveExpr ( 'to' AdditiveExpr )?
AdditiveExpr
         ::= MultiplicativeExpr ( ( '+' | '-' ) MultiplicativeExpr )*
MultiplicativeExpr
         ::= UnionExpr ( ( '*' | 'ร' | 'div' | 'รท' | 'idiv' | 'mod' ) UnionExpr )*
UnionExpr
         ::= IntersectExceptExpr ( ( 'union' | '|' ) IntersectExceptExpr )*
IntersectExceptExpr
         ::= InstanceofExpr ( ( 'intersect' | 'except' ) InstanceofExpr )*
InstanceofExpr
         ::= TreatExpr ( 'instance' 'of' SequenceType )?
TreatExpr
         ::= CastableExpr ( 'treat' 'as' SequenceType )?
CastableExpr
         ::= CastExpr ( 'castable' 'as' CastTarget '?'? )?
CastExpr ::= PipelineExpr ( 'cast' 'as' CastTarget '?'? )?
PipelineExpr
         ::= ArrowExpr ( '->' ArrowExpr )*
ArrowExpr
         ::= UnaryExpr ( SequenceArrowTarget | MappingArrowTarget )*
UnaryExpr
         ::= ( '-' | '+' )* ValueExpr
ValueExpr
         ::= SimpleMapExpr
SimpleMapExpr
         ::= PathExpr ( '!' PathExpr )*
PathExpr ::= AbsolutePathExpr
           | RelativePathExpr
AbsolutePathExpr
         ::= '/' ( RelativePathExpr / )
           | '//' RelativePathExpr
RelativePathExpr
         ::= StepExpr ( ( '/' | '//' ) StepExpr )*
StepExpr ::= PostfixExpr
           | AxisStep
PostfixExpr
         ::= PrimaryExpr
           | FilterExpr
           | DynamicFunctionCall
           | LookupExpr
           | MethodCall
           | FilterExprAM
PrimaryExpr
         ::= Literal
           | VarRef
           | ParenthesizedExpr
           | ContextValueRef
           | FunctionCall
           | FunctionItemExpr
           | MapConstructor
           | ArrayConstructor
           | StringTemplate
           | UnaryLookup
Literal  ::= NumericLiteral
           | StringLiteral
           | QNameLiteral
NumericLiteral
         ::= IntegerLiteral
           | HexIntegerLiteral
           | BinaryIntegerLiteral
           | DecimalLiteral
           | DoubleLiteral
QNameLiteral
         ::= '#' EQName
VarRef   ::= '$' EQName
ParenthesizedExpr
         ::= '(' Expr? ')'
ContextValueRef
         ::= '.'
FunctionCall
         ::= UnreservedFunctionEQName ArgumentList
UnreservedFunctionEQName
         ::= UnreservedFunctionQName
           | URIQualifiedName
ArgumentList
         ::= '(' ( PositionalArguments ( ',' KeywordArguments )? | KeywordArguments )? ')'
PositionalArguments
         ::= Argument
           | PositionalArguments ',' Argument
Argument ::= ExprSingle
           | ArgumentPlaceholder
ArgumentPlaceholder
         ::= '?'
KeywordArguments
         ::= KeywordArgument ( ',' KeywordArgument )*
KeywordArgument
         ::= EQName ':=' Argument
FunctionItemExpr
         ::= NamedFunctionRef
           | InlineFunctionExpr
NamedFunctionRef
         ::= UnreservedFunctionEQName '#' IntegerLiteral
InlineFunctionExpr
         ::= MethodAnnotation* ( 'function' | 'fn' ) FunctionSignature? FunctionBody
MethodAnnotation
         ::= '%method'
FunctionSignature
         ::= '(' ParamList ')' TypeDeclaration?
ParamList
         ::= ( VarNameAndType ( ',' VarNameAndType )* )?
FunctionBody
         ::= EnclosedExpr
MapConstructor
         ::= 'map'? '{' ( MapConstructorEntry ( ',' MapConstructorEntry )* )? '}'
MapConstructorEntry
         ::= ExprSingle ( ':' ExprSingle )?
ArrayConstructor
         ::= SquareArrayConstructor
           | CurlyArrayConstructor
SquareArrayConstructor
         ::= '[' ( ExprSingle ( ',' ExprSingle )* )? ']'
CurlyArrayConstructor
         ::= 'array' EnclosedExpr
StringTemplate
         ::= '`' ( StringTemplateFixedPart | StringTemplateVariablePart )* '`'
          /* ws: explicit */
StringTemplateVariablePart
         ::= EnclosedExpr
UnaryLookup
         ::= Lookup
Lookup   ::= '?' KeySpecifier
KeySpecifier
         ::= NCName
           | Literal
           | ContextValueRef
           | VarRef
           | ParenthesizedExpr
           | LookupWildcard
LookupWildcard
         ::= '*'
FilterExpr
         ::= PostfixExpr Predicate
Predicate
         ::= '[' Expr ']'
DynamicFunctionCall
         ::= PostfixExpr PositionalArgumentList
PositionalArgumentList
         ::= '(' PositionalArguments? ')'
LookupExpr
         ::= PostfixExpr Lookup
MethodCall
         ::= PostfixExpr '?>' NCName PositionalArgumentList
FilterExprAM
         ::= PostfixExpr '?[' Expr ']'
AxisStep ::= ( AbbreviatedStep | FullStep ) Predicate*
AbbreviatedStep
         ::= '..'
           | '@' NodeTest
           | SimpleNodeTest
NodeTest ::= UnionNodeTest
           | SimpleNodeTest
UnionNodeTest
         ::= '(' SimpleNodeTest ( '|' SimpleNodeTest )* ')'
SimpleNodeTest
         ::= TypeTest
           | Selector
TypeTest ::= RegularItemType
           | 'type' '(' SequenceType ')'
Selector ::= EQName
           | Wildcard
           | 'get' '(' ExprSingle ')'
FullStep ::= Axis NodeTest
Axis     ::= ( 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'descendant' | 'descendant-or-self' | 'following' | 'following-or-self' | 'following-sibling' | 'following-sibling-or-self' | 'namespace' | 'parent' | 'preceding' | 'preceding-or-self' | 'preceding-sibling' | 'preceding-sibling-or-self' | 'self' ) '::'
SequenceArrowTarget
         ::= '=>' ArrowTarget
ArrowTarget
         ::= FunctionCall
           | RestrictedDynamicCall
RestrictedDynamicCall
         ::= ( VarRef | ParenthesizedExpr | FunctionItemExpr | MapConstructor | ArrayConstructor ) PositionalArgumentList
MappingArrowTarget
         ::= '=!>' ArrowTarget
CastTarget
         ::= TypeName
           | ChoiceItemType
           | EnumerationType
ValueComp
         ::= 'eq'
           | 'ne'
           | 'lt'
           | 'le'
           | 'gt'
           | 'ge'
GeneralComp
         ::= '='
           | '!='
           | '<'
           | '<='
           | '>'
           | '>='
NodeComp ::= 'is'
           | 'is-not'
           | NodePrecedes
           | NodeFollows
NodePrecedes
         ::= '<<'
           | 'precedes'
NodeFollows
         ::= '>>'
           | 'follows'
Whitespace
         ::= S^WS
           | Comment
          /* ws: definition */
Comment  ::= '(:' ( CommentContents | Comment )* ':)'
          /* ws: explicit */

<?TOKENS?>

StringLiteral
         ::= AposStringLiteral
           | QuotStringLiteral
          /* ws: explicit */
AposStringLiteral
         ::= "'" ( EscapeApos | [^'] )* "'"
          /* ws: explicit */
EscapeApos
         ::= "''"
          /* ws: explicit */
QuotStringLiteral
         ::= '"' ( EscapeQuot | [^"] )* '"'
          /* ws: explicit */
EscapeQuot
         ::= '""'
          /* ws: explicit */
URIQualifiedName
         ::= BracedURILiteral NCName
          /* ws: explicit */
BracedURILiteral
         ::= 'Q' '{' [^{}]* '}'
          /* ws: explicit */
NCName   ::= Name - ( Char* ':' Char* )
Name     ::= NameStartChar NameChar*
NameStartChar
         ::= ':'
           | [A-Z]
           | '_'
           | [a-z]
           | [#xC0-#xD6]
           | [#xD8-#xF6]
           | [#xF8-#x2FF]
           | [#x370-#x37D]
           | [#x37F-#x1FFF]
           | [#x200C-#x200D]
           | [#x2070-#x218F]
           | [#x2C00-#x2FEF]
           | [#x3001-#xD7FF]
           | [#xF900-#xFDCF]
           | [#xFDF0-#xFFFD]
           | [#x10000-#xEFFFF]
NameChar ::= NameStartChar
           | '-'
           | '.'
           | [0-9]
           | #xB7
           | [#x0300-#x036F]
           | [#x203F-#x2040]
Char     ::= #x9
           | #xA
           | #xD
           | [#x20-#xD7FF]
           | [#xE000-#xFFFD]
           | [#x10000-#x10FFFF]
IntegerLiteral
         ::= Digits
          /* ws: explicit */
Digits   ::= DecDigit ( ( DecDigit | '_' )* DecDigit )?
          /* ws: explicit */
DecDigit ::= [0-9]
          /* ws: explicit */
Wildcard ::= '*'
           | NCName ':*'
           | '*:' NCName
           | BracedURILiteral '*'
          /* ws: explicit */
HexIntegerLiteral
         ::= '0x' HexDigits
          /* ws: explicit */
HexDigits
         ::= HexDigit ( ( HexDigit | '_' )* HexDigit )?
          /* ws: explicit */
HexDigit ::= [0-9a-fA-F]
          /* ws: explicit */
BinaryIntegerLiteral
         ::= '0b' BinaryDigits
          /* ws: explicit */
BinaryDigits
         ::= BinaryDigit ( ( BinaryDigit | '_' )* BinaryDigit )?
          /* ws: explicit */
BinaryDigit
         ::= [0-1]
          /* ws: explicit */
DecimalLiteral
         ::= '.' Digits
           | Digits '.' Digits?
          /* ws: explicit */
DoubleLiteral
         ::= ( '.' Digits | Digits ( '.' Digits? )? ) [eE] [+#x2D]? Digits
          /* ws: explicit */
StringTemplateFixedPart
         ::= ( Char - ( '{' | '}' | '`' ) | '{{' | '}}' | '``' )+
          /* ws: explicit */
EOF      ::= $
UnreservedQName
         ::= QName - ReservedName
QName    ::= PrefixedName
           | UnprefixedName
PrefixedName
         ::= Prefix ':' LocalPart
Prefix   ::= NCName
LocalPart
         ::= NCName
UnprefixedName
         ::= LocalPart
ReservedName
         ::= 'ancestor'
           | 'ancestor-or-self'
           | 'and'
           | 'array'
           | 'as'
           | 'at'
           | 'attribute'
           | 'cast'
           | 'castable'
           | 'child'
           | 'comment'
           | 'descendant'
           | 'descendant-or-self'
           | 'div'
           | 'document-node'
           | 'element'
           | 'else'
           | 'empty-sequence'
           | 'enum'
           | 'eq'
           | 'every'
           | 'except'
           | 'fn'
           | 'following'
           | 'following-or-self'
           | 'following-sibling'
           | 'following-sibling-or-self'
           | 'follows'
           | 'for'
           | 'function'
           | 'ge'
           | 'get'
           | 'gnode'
           | 'gt'
           | 'idiv'
           | 'if'
           | 'in'
           | 'instance'
           | 'intersect'
           | 'is'
           | 'is-not'
           | 'item'
           | 'jnode'
           | 'key'
           | 'le'
           | 'let'
           | 'lt'
           | 'map'
           | 'member'
           | 'mod'
           | 'namespace'
           | 'namespace-node'
           | 'ne'
           | 'node'
           | 'of'
           | 'or'
           | 'otherwise'
           | 'parent'
           | 'precedes'
           | 'preceding'
           | 'preceding-or-self'
           | 'preceding-sibling'
           | 'preceding-sibling-or-self'
           | 'processing-instruction'
           | 'record'
           | 'return'
           | 'satisfies'
           | 'schema-attribute'
           | 'schema-element'
           | 'self'
           | 'some'
           | 'switch'
           | 'text'
           | 'then'
           | 'to'
           | 'treat'
           | 'type'
           | 'typeswitch'
           | 'union'
           | 'value'
UnreservedNCName
         ::= NCName - ReservedName
S        ::= ( #x20 | #x9 | #xD | #xA )+
CommentContents
         ::= ( Char+ - ( Char* ( '(:' | ':)' ) Char* ) ) - ( Char* '(' ) & ':'
           | Char+ - ( Char* ( '(:' | ':)' ) Char* ) & '('
          /* ws: explicit */
QNameOrKeywordDelimiter
         ::= $
           | ':'
           | Char - NameChar
NCNameDelimiter
         ::= $ $
           | ( Char - NameChar ) ( $ | Char )
           | ':' ( Char - NameStartChar )
NumericLiteralDelimiter
         ::= QNameOrKeywordDelimiter
           | '-'
'*'       << Wildcard
QNameOrKeywordDelimiter
          \\ UnreservedQName 'ancestor' 'ancestor-or-self' 'and' 'array' 'as' 'at' 'attribute' 'cast' 'castable' 'child' 'comment' 'descendant' 'descendant-or-self' 'div' 'document-node' 'element' 'else' 'empty-sequence' 'enum' 'eq' 'every' 'except' 'fn' 'following' 'following-or-self' 'following-sibling' 'following-sibling-or-self' 'follows' 'for' 'function' 'ge' 'get' 'gnode' 'gt' 'idiv' 'if' 'in' 'instance' 'intersect' 'is' 'is-not' 'item' 'jnode' 'key' 'le' 'let' 'lt' 'map' 'member' 'mod' 'namespace' 'namespace-node' 'ne' 'node' 'of' 'or' 'otherwise' 'parent' 'precedes' 'preceding' 'preceding-or-self' 'preceding-sibling' 'preceding-sibling-or-self' 'processing-instruction' 'record' 'return' 'satisfies' 'schema-attribute' 'schema-element' 'self' 'some' 'switch' 'text' 'then' 'to' 'treat' 'type' 'typeswitch' 'union' 'value'
Char      \\ '<<' '<=' '<'
NCNameDelimiter
          \\ UnreservedNCName
NumericLiteralDelimiter
          \\ DecimalLiteral DoubleLiteral IntegerLiteral